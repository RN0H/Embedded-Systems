
stm32_fmsc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000915c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  080092ec  080092ec  000192ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009418  08009418  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009418  08009418  00019418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009420  08009420  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009420  08009420  00019420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009424  08009424  00019424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009428  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000334  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003a4  200003a4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015f0f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002dcf  00000000  00000000  00035faf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001340  00000000  00000000  00038d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001220  00000000  00000000  0003a0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023407  00000000  00000000  0003b2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001816f  00000000  00000000  0005e6e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d41ed  00000000  00000000  00076856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014aa43  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005948  00000000  00000000  0014aa94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080092d4 	.word	0x080092d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080092d4 	.word	0x080092d4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <lcdIli9341_setArea>:
#endif
//static void lcdIli9341_readData();

/*** External Function Defines ***/
void lcdIli9341_setArea(uint16_t xStart, uint16_t yStart, uint16_t xEnd, uint16_t yEnd)
{
 8000574:	b590      	push	{r4, r7, lr}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	4604      	mov	r4, r0
 800057c:	4608      	mov	r0, r1
 800057e:	4611      	mov	r1, r2
 8000580:	461a      	mov	r2, r3
 8000582:	4623      	mov	r3, r4
 8000584:	80fb      	strh	r3, [r7, #6]
 8000586:	4603      	mov	r3, r0
 8000588:	80bb      	strh	r3, [r7, #4]
 800058a:	460b      	mov	r3, r1
 800058c:	807b      	strh	r3, [r7, #2]
 800058e:	4613      	mov	r3, r2
 8000590:	803b      	strh	r3, [r7, #0]
  lcdIli9341_writeCmd(0x2a);
 8000592:	202a      	movs	r0, #42	; 0x2a
 8000594:	f000 f95a 	bl	800084c <lcdIli9341_writeCmd>
  lcdIli9341_writeData(xStart >> 8);
 8000598:	88fb      	ldrh	r3, [r7, #6]
 800059a:	0a1b      	lsrs	r3, r3, #8
 800059c:	b29b      	uxth	r3, r3
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 f964 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(xStart & 0xff);
 80005a4:	88fb      	ldrh	r3, [r7, #6]
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 f95e 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(xEnd >> 8);
 80005b0:	887b      	ldrh	r3, [r7, #2]
 80005b2:	0a1b      	lsrs	r3, r3, #8
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 f958 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(xEnd & 0xff);
 80005bc:	887b      	ldrh	r3, [r7, #2]
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 f952 	bl	800086c <lcdIli9341_writeData>

  lcdIli9341_writeCmd(0x2b);
 80005c8:	202b      	movs	r0, #43	; 0x2b
 80005ca:	f000 f93f 	bl	800084c <lcdIli9341_writeCmd>
  lcdIli9341_writeData(yStart >> 8);
 80005ce:	88bb      	ldrh	r3, [r7, #4]
 80005d0:	0a1b      	lsrs	r3, r3, #8
 80005d2:	b29b      	uxth	r3, r3
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 f949 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(yStart & 0xff);
 80005da:	88bb      	ldrh	r3, [r7, #4]
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	b29b      	uxth	r3, r3
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 f943 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(yEnd >> 8);
 80005e6:	883b      	ldrh	r3, [r7, #0]
 80005e8:	0a1b      	lsrs	r3, r3, #8
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 f93d 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(yEnd & 0xff);
 80005f2:	883b      	ldrh	r3, [r7, #0]
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	b29b      	uxth	r3, r3
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 f937 	bl	800086c <lcdIli9341_writeData>

  lcdIli9341_writeCmd(0x2c);
 80005fe:	202c      	movs	r0, #44	; 0x2c
 8000600:	f000 f924 	bl	800084c <lcdIli9341_writeCmd>
}
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	bd90      	pop	{r4, r7, pc}

0800060c <lcdIli9341_drawRect>:
  // the first read is invalid
  lcdIli9341_readData();
}

void lcdIli9341_drawRect(uint16_t xStart, uint16_t yStart, uint16_t width, uint16_t height, uint16_t color)
{
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	4604      	mov	r4, r0
 8000614:	4608      	mov	r0, r1
 8000616:	4611      	mov	r1, r2
 8000618:	461a      	mov	r2, r3
 800061a:	4623      	mov	r3, r4
 800061c:	80fb      	strh	r3, [r7, #6]
 800061e:	4603      	mov	r3, r0
 8000620:	80bb      	strh	r3, [r7, #4]
 8000622:	460b      	mov	r3, r1
 8000624:	807b      	strh	r3, [r7, #2]
 8000626:	4613      	mov	r3, r2
 8000628:	803b      	strh	r3, [r7, #0]
  lcdIli9341_setArea(xStart, yStart, xStart + width - 1, yStart + height - 1);
 800062a:	88fa      	ldrh	r2, [r7, #6]
 800062c:	887b      	ldrh	r3, [r7, #2]
 800062e:	4413      	add	r3, r2
 8000630:	b29b      	uxth	r3, r3
 8000632:	3b01      	subs	r3, #1
 8000634:	b29c      	uxth	r4, r3
 8000636:	88ba      	ldrh	r2, [r7, #4]
 8000638:	883b      	ldrh	r3, [r7, #0]
 800063a:	4413      	add	r3, r2
 800063c:	b29b      	uxth	r3, r3
 800063e:	3b01      	subs	r3, #1
 8000640:	b29b      	uxth	r3, r3
 8000642:	88b9      	ldrh	r1, [r7, #4]
 8000644:	88f8      	ldrh	r0, [r7, #6]
 8000646:	4622      	mov	r2, r4
 8000648:	f7ff ff94 	bl	8000574 <lcdIli9341_setArea>
  for( uint16_t y = 0; y < height; y++ ){
 800064c:	2300      	movs	r3, #0
 800064e:	81fb      	strh	r3, [r7, #14]
 8000650:	e00f      	b.n	8000672 <lcdIli9341_drawRect+0x66>
    for( uint16_t x = 0; x < width; x++ ){
 8000652:	2300      	movs	r3, #0
 8000654:	81bb      	strh	r3, [r7, #12]
 8000656:	e005      	b.n	8000664 <lcdIli9341_drawRect+0x58>
//      lcdIli9341_writeData(color >> 8);
//      lcdIli9341_writeData(color);
      LCD_DATA = color;
 8000658:	4a0a      	ldr	r2, [pc, #40]	; (8000684 <lcdIli9341_drawRect+0x78>)
 800065a:	8c3b      	ldrh	r3, [r7, #32]
 800065c:	8013      	strh	r3, [r2, #0]
    for( uint16_t x = 0; x < width; x++ ){
 800065e:	89bb      	ldrh	r3, [r7, #12]
 8000660:	3301      	adds	r3, #1
 8000662:	81bb      	strh	r3, [r7, #12]
 8000664:	89ba      	ldrh	r2, [r7, #12]
 8000666:	887b      	ldrh	r3, [r7, #2]
 8000668:	429a      	cmp	r2, r3
 800066a:	d3f5      	bcc.n	8000658 <lcdIli9341_drawRect+0x4c>
  for( uint16_t y = 0; y < height; y++ ){
 800066c:	89fb      	ldrh	r3, [r7, #14]
 800066e:	3301      	adds	r3, #1
 8000670:	81fb      	strh	r3, [r7, #14]
 8000672:	89fa      	ldrh	r2, [r7, #14]
 8000674:	883b      	ldrh	r3, [r7, #0]
 8000676:	429a      	cmp	r2, r3
 8000678:	d3eb      	bcc.n	8000652 <lcdIli9341_drawRect+0x46>
    }
  }
}
 800067a:	bf00      	nop
 800067c:	bf00      	nop
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	bd90      	pop	{r4, r7, pc}
 8000684:	60020000 	.word	0x60020000

08000688 <lcdIli9341_getDrawAddress>:

inline uint16_t* lcdIli9341_getDrawAddress()
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
//	  lcdIli9341_setArea(0, 0, LCD_ILI9342_WIDTH, LCD_ILI9342_HEIGHT);
  return (uint16_t*)LCD_DATA_ADDR;
 800068c:	4b02      	ldr	r3, [pc, #8]	; (8000698 <lcdIli9341_getDrawAddress+0x10>)
}
 800068e:	4618      	mov	r0, r3
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	60020000 	.word	0x60020000

0800069c <lcdIli9341_init>:

void lcdIli9341_init()
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af02      	add	r7, sp, #8

	HAL_GPIO_WritePin(TFT_RESET_GPIO_Port, TFT_RESET_Pin, GPIO_PIN_SET);HAL_Delay(10);
 80006a2:	2201      	movs	r2, #1
 80006a4:	2108      	movs	r1, #8
 80006a6:	4868      	ldr	r0, [pc, #416]	; (8000848 <lcdIli9341_init+0x1ac>)
 80006a8:	f003 fdde 	bl	8004268 <HAL_GPIO_WritePin>
 80006ac:	200a      	movs	r0, #10
 80006ae:	f001 facd 	bl	8001c4c <HAL_Delay>
	HAL_GPIO_WritePin(TFT_RESET_GPIO_Port, TFT_RESET_Pin, GPIO_PIN_RESET);HAL_Delay(10);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2108      	movs	r1, #8
 80006b6:	4864      	ldr	r0, [pc, #400]	; (8000848 <lcdIli9341_init+0x1ac>)
 80006b8:	f003 fdd6 	bl	8004268 <HAL_GPIO_WritePin>
 80006bc:	200a      	movs	r0, #10
 80006be:	f001 fac5 	bl	8001c4c <HAL_Delay>
	HAL_GPIO_WritePin(TFT_RESET_GPIO_Port, TFT_RESET_Pin, GPIO_PIN_SET);HAL_Delay(10);
 80006c2:	2201      	movs	r2, #1
 80006c4:	2108      	movs	r1, #8
 80006c6:	4860      	ldr	r0, [pc, #384]	; (8000848 <lcdIli9341_init+0x1ac>)
 80006c8:	f003 fdce 	bl	8004268 <HAL_GPIO_WritePin>
 80006cc:	200a      	movs	r0, #10
 80006ce:	f001 fabd 	bl	8001c4c <HAL_Delay>
  //  GPIO_SetBits(GPIO_RESET_PORT, GPIO_RESET_PIN);  delay(10);
  //  GPIO_ResetBits(GPIO_RESET_PORT, GPIO_RESET_PIN);  delay(10);
  //  GPIO_SetBits(GPIO_RESET_PORT, GPIO_RESET_PIN);  delay(10);

  lcdIli9341_writeCmd(0x01); //software reset
 80006d2:	2001      	movs	r0, #1
 80006d4:	f000 f8ba 	bl	800084c <lcdIli9341_writeCmd>
  HAL_Delay(50);
 80006d8:	2032      	movs	r0, #50	; 0x32
 80006da:	f001 fab7 	bl	8001c4c <HAL_Delay>
  lcdIli9341_writeCmd(0x11); //exit sleep
 80006de:	2011      	movs	r0, #17
 80006e0:	f000 f8b4 	bl	800084c <lcdIli9341_writeCmd>
  HAL_Delay(50);
 80006e4:	2032      	movs	r0, #50	; 0x32
 80006e6:	f001 fab1 	bl	8001c4c <HAL_Delay>

  lcdIli9341_writeCmd(0xB6);
 80006ea:	20b6      	movs	r0, #182	; 0xb6
 80006ec:	f000 f8ae 	bl	800084c <lcdIli9341_writeCmd>
  lcdIli9341_writeData(0x0A);
 80006f0:	200a      	movs	r0, #10
 80006f2:	f000 f8bb 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(0xC2);
 80006f6:	20c2      	movs	r0, #194	; 0xc2
 80006f8:	f000 f8b8 	bl	800086c <lcdIli9341_writeData>

  lcdIli9341_writeCmd(0x36);   // memory access control
 80006fc:	2036      	movs	r0, #54	; 0x36
 80006fe:	f000 f8a5 	bl	800084c <lcdIli9341_writeCmd>
  lcdIli9341_writeData(0x68);     // BGR -> seems RGB
 8000702:	2068      	movs	r0, #104	; 0x68
 8000704:	f000 f8b2 	bl	800086c <lcdIli9341_writeData>
//  lcdIli9341_writeData(0x60);     // RGB -> seems BGR

  lcdIli9341_writeCmd(0x3A); // pixel format
 8000708:	203a      	movs	r0, #58	; 0x3a
 800070a:	f000 f89f 	bl	800084c <lcdIli9341_writeCmd>
  lcdIli9341_writeData(0x55); //RGB565 (16bit)
 800070e:	2055      	movs	r0, #85	; 0x55
 8000710:	f000 f8ac 	bl	800086c <lcdIli9341_writeData>

  lcdIli9341_writeCmd(0xE0); //gamma
 8000714:	20e0      	movs	r0, #224	; 0xe0
 8000716:	f000 f899 	bl	800084c <lcdIli9341_writeCmd>
  lcdIli9341_writeData(0x10);
 800071a:	2010      	movs	r0, #16
 800071c:	f000 f8a6 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(0x10);
 8000720:	2010      	movs	r0, #16
 8000722:	f000 f8a3 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(0x10);
 8000726:	2010      	movs	r0, #16
 8000728:	f000 f8a0 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(0x08);
 800072c:	2008      	movs	r0, #8
 800072e:	f000 f89d 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(0x0E);
 8000732:	200e      	movs	r0, #14
 8000734:	f000 f89a 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(0x06);
 8000738:	2006      	movs	r0, #6
 800073a:	f000 f897 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(0x42);
 800073e:	2042      	movs	r0, #66	; 0x42
 8000740:	f000 f894 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(0x28);
 8000744:	2028      	movs	r0, #40	; 0x28
 8000746:	f000 f891 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(0x36);
 800074a:	2036      	movs	r0, #54	; 0x36
 800074c:	f000 f88e 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(0x03);
 8000750:	2003      	movs	r0, #3
 8000752:	f000 f88b 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(0x0E);
 8000756:	200e      	movs	r0, #14
 8000758:	f000 f888 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(0x04);
 800075c:	2004      	movs	r0, #4
 800075e:	f000 f885 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(0x13);
 8000762:	2013      	movs	r0, #19
 8000764:	f000 f882 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(0x0E);
 8000768:	200e      	movs	r0, #14
 800076a:	f000 f87f 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(0x0C);
 800076e:	200c      	movs	r0, #12
 8000770:	f000 f87c 	bl	800086c <lcdIli9341_writeData>

  lcdIli9341_writeCmd(0XE1); //gamma
 8000774:	20e1      	movs	r0, #225	; 0xe1
 8000776:	f000 f869 	bl	800084c <lcdIli9341_writeCmd>
  lcdIli9341_writeData(0x0C);
 800077a:	200c      	movs	r0, #12
 800077c:	f000 f876 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(0x23);
 8000780:	2023      	movs	r0, #35	; 0x23
 8000782:	f000 f873 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(0x26);
 8000786:	2026      	movs	r0, #38	; 0x26
 8000788:	f000 f870 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(0x04);
 800078c:	2004      	movs	r0, #4
 800078e:	f000 f86d 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(0x0C);
 8000792:	200c      	movs	r0, #12
 8000794:	f000 f86a 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(0x04);
 8000798:	2004      	movs	r0, #4
 800079a:	f000 f867 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(0x39);
 800079e:	2039      	movs	r0, #57	; 0x39
 80007a0:	f000 f864 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(0x24);
 80007a4:	2024      	movs	r0, #36	; 0x24
 80007a6:	f000 f861 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(0x4B);
 80007aa:	204b      	movs	r0, #75	; 0x4b
 80007ac:	f000 f85e 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(0x03);
 80007b0:	2003      	movs	r0, #3
 80007b2:	f000 f85b 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(0x0B);
 80007b6:	200b      	movs	r0, #11
 80007b8:	f000 f858 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(0x0B);
 80007bc:	200b      	movs	r0, #11
 80007be:	f000 f855 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(0x33);
 80007c2:	2033      	movs	r0, #51	; 0x33
 80007c4:	f000 f852 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(0x37);
 80007c8:	2037      	movs	r0, #55	; 0x37
 80007ca:	f000 f84f 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(0x0F);
 80007ce:	200f      	movs	r0, #15
 80007d0:	f000 f84c 	bl	800086c <lcdIli9341_writeData>

  lcdIli9341_writeCmd(0x2a);//
 80007d4:	202a      	movs	r0, #42	; 0x2a
 80007d6:	f000 f839 	bl	800084c <lcdIli9341_writeCmd>
  lcdIli9341_writeData(0x00);
 80007da:	2000      	movs	r0, #0
 80007dc:	f000 f846 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(0x00);
 80007e0:	2000      	movs	r0, #0
 80007e2:	f000 f843 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(0x00);
 80007e6:	2000      	movs	r0, #0
 80007e8:	f000 f840 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(0xef);
 80007ec:	20ef      	movs	r0, #239	; 0xef
 80007ee:	f000 f83d 	bl	800086c <lcdIli9341_writeData>

  lcdIli9341_writeCmd(0x2b); //
 80007f2:	202b      	movs	r0, #43	; 0x2b
 80007f4:	f000 f82a 	bl	800084c <lcdIli9341_writeCmd>
  lcdIli9341_writeData(0x00);
 80007f8:	2000      	movs	r0, #0
 80007fa:	f000 f837 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(0x00);
 80007fe:	2000      	movs	r0, #0
 8000800:	f000 f834 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(0x01);
 8000804:	2001      	movs	r0, #1
 8000806:	f000 f831 	bl	800086c <lcdIli9341_writeData>
  lcdIli9341_writeData(0x3f);
 800080a:	203f      	movs	r0, #63	; 0x3f
 800080c:	f000 f82e 	bl	800086c <lcdIli9341_writeData>

  lcdIli9341_writeCmd(0x29);
 8000810:	2029      	movs	r0, #41	; 0x29
 8000812:	f000 f81b 	bl	800084c <lcdIli9341_writeCmd>
  HAL_Delay(10);
 8000816:	200a      	movs	r0, #10
 8000818:	f001 fa18 	bl	8001c4c <HAL_Delay>
  lcdIli9341_writeCmd(0x2C);
 800081c:	202c      	movs	r0, #44	; 0x2c
 800081e:	f000 f815 	bl	800084c <lcdIli9341_writeCmd>
//  lcdIli9341_readData();
//  lcdIli9341_readData();
//  lcdIli9341_readData();

//  lcdIli9341_drawRect(0, 0, LCD_ILI9342_WIDTH, LCD_ILI9342_HEIGHT, 0xffff);
  lcdIli9341_drawRect(0, 0, LCD_ILI9342_WIDTH, LCD_ILI9342_HEIGHT, 0x0000);
 8000822:	2300      	movs	r3, #0
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	23f0      	movs	r3, #240	; 0xf0
 8000828:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800082c:	2100      	movs	r1, #0
 800082e:	2000      	movs	r0, #0
 8000830:	f7ff feec 	bl	800060c <lcdIli9341_drawRect>
  lcdIli9341_setArea(0, 0, LCD_ILI9342_WIDTH - 1, LCD_ILI9342_HEIGHT - 1);
 8000834:	23ef      	movs	r3, #239	; 0xef
 8000836:	f240 123f 	movw	r2, #319	; 0x13f
 800083a:	2100      	movs	r1, #0
 800083c:	2000      	movs	r0, #0
 800083e:	f7ff fe99 	bl	8000574 <lcdIli9341_setArea>

  return RET_OK;
 8000842:	bf00      	nop
}
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40021000 	.word	0x40021000

0800084c <lcdIli9341_writeCmd>:
#ifdef BIT_WIDTH_16
inline static void lcdIli9341_writeCmd(uint16_t cmd)
#else
inline static void lcdIli9341_writeCmd(uint8_t cmd)
#endif
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	80fb      	strh	r3, [r7, #6]
  LCD_CMD = cmd;
 8000856:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800085a:	88fb      	ldrh	r3, [r7, #6]
 800085c:	8013      	strh	r3, [r2, #0]
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
	...

0800086c <lcdIli9341_writeData>:
#ifdef BIT_WIDTH_16
void lcdIli9341_writeData(uint16_t data)
#else
inline static void lcdIli9341_writeData(uint8_t data)
#endif
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	80fb      	strh	r3, [r7, #6]
  LCD_DATA = data;
 8000876:	4a04      	ldr	r2, [pc, #16]	; (8000888 <lcdIli9341_writeData+0x1c>)
 8000878:	88fb      	ldrh	r3, [r7, #6]
 800087a:	8013      	strh	r3, [r2, #0]
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	60020000 	.word	0x60020000

0800088c <HAL_UARTEx_RxEventCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	460b      	mov	r3, r1
 8000896:	807b      	strh	r3, [r7, #2]
	  if (huart->Instance == USART2){
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a22      	ldr	r2, [pc, #136]	; (8000928 <HAL_UARTEx_RxEventCallback+0x9c>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d13e      	bne.n	8000920 <HAL_UARTEx_RxEventCallback+0x94>
		   memcpy(MainBuffer, RxBuffer, Size);
 80008a2:	887b      	ldrh	r3, [r7, #2]
 80008a4:	461a      	mov	r2, r3
 80008a6:	4921      	ldr	r1, [pc, #132]	; (800092c <HAL_UARTEx_RxEventCallback+0xa0>)
 80008a8:	4821      	ldr	r0, [pc, #132]	; (8000930 <HAL_UARTEx_RxEventCallback+0xa4>)
 80008aa:	f007 fd6f 	bl	800838c <memcpy>

		   if (MainBuffer[0] == 'U')
 80008ae:	4b20      	ldr	r3, [pc, #128]	; (8000930 <HAL_UARTEx_RxEventCallback+0xa4>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b55      	cmp	r3, #85	; 0x55
 80008b4:	d103      	bne.n	80008be <HAL_UARTEx_RxEventCallback+0x32>
		       htim3.Instance->CCR1 = 25;
 80008b6:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <HAL_UARTEx_RxEventCallback+0xa8>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2219      	movs	r2, #25
 80008bc:	635a      	str	r2, [r3, #52]	; 0x34
		   if (MainBuffer[0] ==  'D')
 80008be:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <HAL_UARTEx_RxEventCallback+0xa4>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b44      	cmp	r3, #68	; 0x44
 80008c4:	d103      	bne.n	80008ce <HAL_UARTEx_RxEventCallback+0x42>
		   	   htim3.Instance->CCR1 = 79;
 80008c6:	4b1b      	ldr	r3, [pc, #108]	; (8000934 <HAL_UARTEx_RxEventCallback+0xa8>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	224f      	movs	r2, #79	; 0x4f
 80008cc:	635a      	str	r2, [r3, #52]	; 0x34
		   if (MainBuffer[0] == 'L')
 80008ce:	4b18      	ldr	r3, [pc, #96]	; (8000930 <HAL_UARTEx_RxEventCallback+0xa4>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b4c      	cmp	r3, #76	; 0x4c
 80008d4:	d103      	bne.n	80008de <HAL_UARTEx_RxEventCallback+0x52>
		   	   htim2.Instance->CCR1 = 25;
 80008d6:	4b18      	ldr	r3, [pc, #96]	; (8000938 <HAL_UARTEx_RxEventCallback+0xac>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	2219      	movs	r2, #25
 80008dc:	635a      	str	r2, [r3, #52]	; 0x34
		   if (MainBuffer[0] == 'R')
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <HAL_UARTEx_RxEventCallback+0xa4>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b52      	cmp	r3, #82	; 0x52
 80008e4:	d103      	bne.n	80008ee <HAL_UARTEx_RxEventCallback+0x62>
		   	   htim2.Instance->CCR1 = 79;
 80008e6:	4b14      	ldr	r3, [pc, #80]	; (8000938 <HAL_UARTEx_RxEventCallback+0xac>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	224f      	movs	r2, #79	; 0x4f
 80008ec:	635a      	str	r2, [r3, #52]	; 0x34
		   if (MainBuffer[0] == 'S')
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <HAL_UARTEx_RxEventCallback+0xa4>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b53      	cmp	r3, #83	; 0x53
 80008f4:	d107      	bne.n	8000906 <HAL_UARTEx_RxEventCallback+0x7a>
		   		{
		   		htim2.Instance->CCR1 = 75;
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <HAL_UARTEx_RxEventCallback+0xac>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	224b      	movs	r2, #75	; 0x4b
 80008fc:	635a      	str	r2, [r3, #52]	; 0x34
		   		htim3.Instance->CCR1 = 75;
 80008fe:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <HAL_UARTEx_RxEventCallback+0xa8>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	224b      	movs	r2, #75	; 0x4b
 8000904:	635a      	str	r2, [r3, #52]	; 0x34
		   		}
		   HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuffer, RxBufferSize);
 8000906:	2201      	movs	r2, #1
 8000908:	4908      	ldr	r1, [pc, #32]	; (800092c <HAL_UARTEx_RxEventCallback+0xa0>)
 800090a:	480c      	ldr	r0, [pc, #48]	; (800093c <HAL_UARTEx_RxEventCallback+0xb0>)
 800090c:	f006 fb55 	bl	8006fba <HAL_UARTEx_ReceiveToIdle_DMA>
		  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000910:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <HAL_UARTEx_RxEventCallback+0xb4>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <HAL_UARTEx_RxEventCallback+0xb4>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f022 0208 	bic.w	r2, r2, #8
 800091e:	601a      	str	r2, [r3, #0]
	  }
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40004400 	.word	0x40004400
 800092c:	20000368 	.word	0x20000368
 8000930:	20000364 	.word	0x20000364
 8000934:	200001c8 	.word	0x200001c8
 8000938:	20000180 	.word	0x20000180
 800093c:	20000210 	.word	0x20000210
 8000940:	20000254 	.word	0x20000254

08000944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800094a:	f001 f90d 	bl	8001b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800094e:	f000 f849 	bl	80009e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000952:	f000 fa63 	bl	8000e1c <MX_GPIO_Init>
  MX_DMA_Init();
 8000956:	f000 fa23 	bl	8000da0 <MX_DMA_Init>
  MX_TIM2_Init();
 800095a:	f000 f909 	bl	8000b70 <MX_TIM2_Init>
  MX_DCMI_Init();
 800095e:	f000 f8b1 	bl	8000ac4 <MX_DCMI_Init>
  MX_I2C2_Init();
 8000962:	f000 f8d7 	bl	8000b14 <MX_I2C2_Init>
  MX_FSMC_Init();
 8000966:	f000 fb2f 	bl	8000fc8 <MX_FSMC_Init>
  MX_TIM3_Init();
 800096a:	f000 f977 	bl	8000c5c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800096e:	f000 f9ed 	bl	8000d4c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

   lcdIli9341_init();
 8000972:	f7ff fe93 	bl	800069c <lcdIli9341_init>

    volatile uint16_t* p_lcdData;

    p_lcdData = lcdIli9341_getDrawAddress();
 8000976:	f7ff fe87 	bl	8000688 <lcdIli9341_getDrawAddress>
 800097a:	6078      	str	r0, [r7, #4]

    ov7670_init(&hdcmi,&hdma_dcmi, &hi2c2);
 800097c:	4a11      	ldr	r2, [pc, #68]	; (80009c4 <main+0x80>)
 800097e:	4912      	ldr	r1, [pc, #72]	; (80009c8 <main+0x84>)
 8000980:	4812      	ldr	r0, [pc, #72]	; (80009cc <main+0x88>)
 8000982:	f000 fb87 	bl	8001094 <ov7670_init>
    ov7670_config(OV7670_MODE_QVGA_RGB565);
 8000986:	2000      	movs	r0, #0
 8000988:	f000 fbca 	bl	8001120 <ov7670_config>
    ov7670_startCap(OV7670_CAP_CONTINUOUS, p_lcdData);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4619      	mov	r1, r3
 8000990:	2000      	movs	r0, #0
 8000992:	f000 fbf5 	bl	8001180 <ov7670_startCap>

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000996:	2100      	movs	r1, #0
 8000998:	480d      	ldr	r0, [pc, #52]	; (80009d0 <main+0x8c>)
 800099a:	f005 fb95 	bl	80060c8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800099e:	2100      	movs	r1, #0
 80009a0:	480c      	ldr	r0, [pc, #48]	; (80009d4 <main+0x90>)
 80009a2:	f005 fb91 	bl	80060c8 <HAL_TIM_PWM_Start>


    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuffer, RxBufferSize);
 80009a6:	2201      	movs	r2, #1
 80009a8:	490b      	ldr	r1, [pc, #44]	; (80009d8 <main+0x94>)
 80009aa:	480c      	ldr	r0, [pc, #48]	; (80009dc <main+0x98>)
 80009ac:	f006 fb05 	bl	8006fba <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80009b0:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <main+0x9c>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <main+0x9c>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f022 0208 	bic.w	r2, r2, #8
 80009be:	601a      	str	r2, [r3, #0]





  while (1)
 80009c0:	e7fe      	b.n	80009c0 <main+0x7c>
 80009c2:	bf00      	nop
 80009c4:	2000012c 	.word	0x2000012c
 80009c8:	200000cc 	.word	0x200000cc
 80009cc:	2000008c 	.word	0x2000008c
 80009d0:	20000180 	.word	0x20000180
 80009d4:	200001c8 	.word	0x200001c8
 80009d8:	20000368 	.word	0x20000368
 80009dc:	20000210 	.word	0x20000210
 80009e0:	20000254 	.word	0x20000254

080009e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b094      	sub	sp, #80	; 0x50
 80009e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ea:	f107 0320 	add.w	r3, r7, #32
 80009ee:	2230      	movs	r2, #48	; 0x30
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f007 fcd8 	bl	80083a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	4b2b      	ldr	r3, [pc, #172]	; (8000abc <SystemClock_Config+0xd8>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a10:	4a2a      	ldr	r2, [pc, #168]	; (8000abc <SystemClock_Config+0xd8>)
 8000a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a16:	6413      	str	r3, [r2, #64]	; 0x40
 8000a18:	4b28      	ldr	r3, [pc, #160]	; (8000abc <SystemClock_Config+0xd8>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a24:	2300      	movs	r3, #0
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	4b25      	ldr	r3, [pc, #148]	; (8000ac0 <SystemClock_Config+0xdc>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a24      	ldr	r2, [pc, #144]	; (8000ac0 <SystemClock_Config+0xdc>)
 8000a2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a32:	6013      	str	r3, [r2, #0]
 8000a34:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <SystemClock_Config+0xdc>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a40:	2301      	movs	r3, #1
 8000a42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a54:	2304      	movs	r3, #4
 8000a56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a58:	23a8      	movs	r3, #168	; 0xa8
 8000a5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a60:	2304      	movs	r3, #4
 8000a62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a64:	f107 0320 	add.w	r3, r7, #32
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f004 fd3d 	bl	80054e8 <HAL_RCC_OscConfig>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a74:	f000 fb08 	bl	8001088 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a78:	230f      	movs	r3, #15
 8000a7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000a84:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8000a8a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a8e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	2105      	movs	r1, #5
 8000a96:	4618      	mov	r0, r3
 8000a98:	f004 ff9e 	bl	80059d8 <HAL_RCC_ClockConfig>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000aa2:	f000 faf1 	bl	8001088 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_4);
 8000aa6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000aaa:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f005 f878 	bl	8005ba4 <HAL_RCC_MCOConfig>
}
 8000ab4:	bf00      	nop
 8000ab6:	3750      	adds	r7, #80	; 0x50
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40007000 	.word	0x40007000

08000ac4 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000ac8:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <MX_DCMI_Init+0x48>)
 8000aca:	4a11      	ldr	r2, [pc, #68]	; (8000b10 <MX_DCMI_Init+0x4c>)
 8000acc:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <MX_DCMI_Init+0x48>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000ad4:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <MX_DCMI_Init+0x48>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <MX_DCMI_Init+0x48>)
 8000adc:	2280      	movs	r2, #128	; 0x80
 8000ade:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000ae0:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <MX_DCMI_Init+0x48>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <MX_DCMI_Init+0x48>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000aec:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <MX_DCMI_Init+0x48>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <MX_DCMI_Init+0x48>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000af8:	4804      	ldr	r0, [pc, #16]	; (8000b0c <MX_DCMI_Init+0x48>)
 8000afa:	f001 fc21 	bl	8002340 <HAL_DCMI_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 8000b04:	f000 fac0 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	2000008c 	.word	0x2000008c
 8000b10:	50050000 	.word	0x50050000

08000b14 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <MX_I2C2_Init+0x50>)
 8000b1a:	4a13      	ldr	r2, [pc, #76]	; (8000b68 <MX_I2C2_Init+0x54>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <MX_I2C2_Init+0x50>)
 8000b20:	4a12      	ldr	r2, [pc, #72]	; (8000b6c <MX_I2C2_Init+0x58>)
 8000b22:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <MX_I2C2_Init+0x50>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <MX_I2C2_Init+0x50>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <MX_I2C2_Init+0x50>)
 8000b32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b36:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b38:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <MX_I2C2_Init+0x50>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_I2C2_Init+0x50>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b44:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <MX_I2C2_Init+0x50>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <MX_I2C2_Init+0x50>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b50:	4804      	ldr	r0, [pc, #16]	; (8000b64 <MX_I2C2_Init+0x50>)
 8000b52:	f003 fba3 	bl	800429c <HAL_I2C_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b5c:	f000 fa94 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	2000012c 	.word	0x2000012c
 8000b68:	40005800 	.word	0x40005800
 8000b6c:	000186a0 	.word	0x000186a0

08000b70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08e      	sub	sp, #56	; 0x38
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b84:	f107 0320 	add.w	r3, r7, #32
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
 8000b9c:	615a      	str	r2, [r3, #20]
 8000b9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ba0:	4b2d      	ldr	r3, [pc, #180]	; (8000c58 <MX_TIM2_Init+0xe8>)
 8000ba2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ba6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840;
 8000ba8:	4b2b      	ldr	r3, [pc, #172]	; (8000c58 <MX_TIM2_Init+0xe8>)
 8000baa:	f44f 7252 	mov.w	r2, #840	; 0x348
 8000bae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb0:	4b29      	ldr	r3, [pc, #164]	; (8000c58 <MX_TIM2_Init+0xe8>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000bb6:	4b28      	ldr	r3, [pc, #160]	; (8000c58 <MX_TIM2_Init+0xe8>)
 8000bb8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bbc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bbe:	4b26      	ldr	r3, [pc, #152]	; (8000c58 <MX_TIM2_Init+0xe8>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc4:	4b24      	ldr	r3, [pc, #144]	; (8000c58 <MX_TIM2_Init+0xe8>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bca:	4823      	ldr	r0, [pc, #140]	; (8000c58 <MX_TIM2_Init+0xe8>)
 8000bcc:	f005 f9d4 	bl	8005f78 <HAL_TIM_Base_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000bd6:	f000 fa57 	bl	8001088 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000be0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000be4:	4619      	mov	r1, r3
 8000be6:	481c      	ldr	r0, [pc, #112]	; (8000c58 <MX_TIM2_Init+0xe8>)
 8000be8:	f005 fd00 	bl	80065ec <HAL_TIM_ConfigClockSource>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000bf2:	f000 fa49 	bl	8001088 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bf6:	4818      	ldr	r0, [pc, #96]	; (8000c58 <MX_TIM2_Init+0xe8>)
 8000bf8:	f005 fa0d 	bl	8006016 <HAL_TIM_PWM_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000c02:	f000 fa41 	bl	8001088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c06:	2300      	movs	r3, #0
 8000c08:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c0e:	f107 0320 	add.w	r3, r7, #32
 8000c12:	4619      	mov	r1, r3
 8000c14:	4810      	ldr	r0, [pc, #64]	; (8000c58 <MX_TIM2_Init+0xe8>)
 8000c16:	f006 f8f3 	bl	8006e00 <HAL_TIMEx_MasterConfigSynchronization>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000c20:	f000 fa32 	bl	8001088 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c24:	2360      	movs	r3, #96	; 0x60
 8000c26:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	2200      	movs	r2, #0
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4807      	ldr	r0, [pc, #28]	; (8000c58 <MX_TIM2_Init+0xe8>)
 8000c3c:	f005 fc14 	bl	8006468 <HAL_TIM_PWM_ConfigChannel>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000c46:	f000 fa1f 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c4a:	4803      	ldr	r0, [pc, #12]	; (8000c58 <MX_TIM2_Init+0xe8>)
 8000c4c:	f000 fcca 	bl	80015e4 <HAL_TIM_MspPostInit>

}
 8000c50:	bf00      	nop
 8000c52:	3738      	adds	r7, #56	; 0x38
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000180 	.word	0x20000180

08000c5c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08e      	sub	sp, #56	; 0x38
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c70:	f107 0320 	add.w	r3, r7, #32
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
 8000c88:	615a      	str	r2, [r3, #20]
 8000c8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c8c:	4b2d      	ldr	r3, [pc, #180]	; (8000d44 <MX_TIM3_Init+0xe8>)
 8000c8e:	4a2e      	ldr	r2, [pc, #184]	; (8000d48 <MX_TIM3_Init+0xec>)
 8000c90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840;
 8000c92:	4b2c      	ldr	r3, [pc, #176]	; (8000d44 <MX_TIM3_Init+0xe8>)
 8000c94:	f44f 7252 	mov.w	r2, #840	; 0x348
 8000c98:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c9a:	4b2a      	ldr	r3, [pc, #168]	; (8000d44 <MX_TIM3_Init+0xe8>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000ca0:	4b28      	ldr	r3, [pc, #160]	; (8000d44 <MX_TIM3_Init+0xe8>)
 8000ca2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ca6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca8:	4b26      	ldr	r3, [pc, #152]	; (8000d44 <MX_TIM3_Init+0xe8>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cae:	4b25      	ldr	r3, [pc, #148]	; (8000d44 <MX_TIM3_Init+0xe8>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cb4:	4823      	ldr	r0, [pc, #140]	; (8000d44 <MX_TIM3_Init+0xe8>)
 8000cb6:	f005 f95f 	bl	8005f78 <HAL_TIM_Base_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000cc0:	f000 f9e2 	bl	8001088 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cce:	4619      	mov	r1, r3
 8000cd0:	481c      	ldr	r0, [pc, #112]	; (8000d44 <MX_TIM3_Init+0xe8>)
 8000cd2:	f005 fc8b 	bl	80065ec <HAL_TIM_ConfigClockSource>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000cdc:	f000 f9d4 	bl	8001088 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ce0:	4818      	ldr	r0, [pc, #96]	; (8000d44 <MX_TIM3_Init+0xe8>)
 8000ce2:	f005 f998 	bl	8006016 <HAL_TIM_PWM_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000cec:	f000 f9cc 	bl	8001088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cf8:	f107 0320 	add.w	r3, r7, #32
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4811      	ldr	r0, [pc, #68]	; (8000d44 <MX_TIM3_Init+0xe8>)
 8000d00:	f006 f87e 	bl	8006e00 <HAL_TIMEx_MasterConfigSynchronization>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000d0a:	f000 f9bd 	bl	8001088 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d0e:	2360      	movs	r3, #96	; 0x60
 8000d10:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	2200      	movs	r2, #0
 8000d22:	4619      	mov	r1, r3
 8000d24:	4807      	ldr	r0, [pc, #28]	; (8000d44 <MX_TIM3_Init+0xe8>)
 8000d26:	f005 fb9f 	bl	8006468 <HAL_TIM_PWM_ConfigChannel>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000d30:	f000 f9aa 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d34:	4803      	ldr	r0, [pc, #12]	; (8000d44 <MX_TIM3_Init+0xe8>)
 8000d36:	f000 fc55 	bl	80015e4 <HAL_TIM_MspPostInit>

}
 8000d3a:	bf00      	nop
 8000d3c:	3738      	adds	r7, #56	; 0x38
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200001c8 	.word	0x200001c8
 8000d48:	40000400 	.word	0x40000400

08000d4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d52:	4a12      	ldr	r2, [pc, #72]	; (8000d9c <MX_USART2_UART_Init+0x50>)
 8000d54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d70:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d72:	220c      	movs	r2, #12
 8000d74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d76:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d82:	4805      	ldr	r0, [pc, #20]	; (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d84:	f006 f8cc 	bl	8006f20 <HAL_UART_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d8e:	f000 f97b 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000210 	.word	0x20000210
 8000d9c:	40004400 	.word	0x40004400

08000da0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <MX_DMA_Init+0x78>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a1a      	ldr	r2, [pc, #104]	; (8000e18 <MX_DMA_Init+0x78>)
 8000db0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <MX_DMA_Init+0x78>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	603b      	str	r3, [r7, #0]
 8000dc6:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <MX_DMA_Init+0x78>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a13      	ldr	r2, [pc, #76]	; (8000e18 <MX_DMA_Init+0x78>)
 8000dcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <MX_DMA_Init+0x78>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dda:	603b      	str	r3, [r7, #0]
 8000ddc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2100      	movs	r1, #0
 8000de2:	2010      	movs	r0, #16
 8000de4:	f001 f831 	bl	8001e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000de8:	2010      	movs	r0, #16
 8000dea:	f001 f84a 	bl	8001e82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2100      	movs	r1, #0
 8000df2:	2011      	movs	r0, #17
 8000df4:	f001 f829 	bl	8001e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000df8:	2011      	movs	r0, #17
 8000dfa:	f001 f842 	bl	8001e82 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2100      	movs	r1, #0
 8000e02:	2039      	movs	r0, #57	; 0x39
 8000e04:	f001 f821 	bl	8001e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000e08:	2039      	movs	r0, #57	; 0x39
 8000e0a:	f001 f83a 	bl	8001e82 <HAL_NVIC_EnableIRQ>

}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40023800 	.word	0x40023800

08000e1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08c      	sub	sp, #48	; 0x30
 8000e20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e22:	f107 031c 	add.w	r3, r7, #28
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
 8000e30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	61bb      	str	r3, [r7, #24]
 8000e36:	4b5f      	ldr	r3, [pc, #380]	; (8000fb4 <MX_GPIO_Init+0x198>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a5e      	ldr	r2, [pc, #376]	; (8000fb4 <MX_GPIO_Init+0x198>)
 8000e3c:	f043 0310 	orr.w	r3, r3, #16
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b5c      	ldr	r3, [pc, #368]	; (8000fb4 <MX_GPIO_Init+0x198>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0310 	and.w	r3, r3, #16
 8000e4a:	61bb      	str	r3, [r7, #24]
 8000e4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
 8000e52:	4b58      	ldr	r3, [pc, #352]	; (8000fb4 <MX_GPIO_Init+0x198>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a57      	ldr	r2, [pc, #348]	; (8000fb4 <MX_GPIO_Init+0x198>)
 8000e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b55      	ldr	r3, [pc, #340]	; (8000fb4 <MX_GPIO_Init+0x198>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	4b51      	ldr	r3, [pc, #324]	; (8000fb4 <MX_GPIO_Init+0x198>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a50      	ldr	r2, [pc, #320]	; (8000fb4 <MX_GPIO_Init+0x198>)
 8000e74:	f043 0304 	orr.w	r3, r3, #4
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b4e      	ldr	r3, [pc, #312]	; (8000fb4 <MX_GPIO_Init+0x198>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0304 	and.w	r3, r3, #4
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4b4a      	ldr	r3, [pc, #296]	; (8000fb4 <MX_GPIO_Init+0x198>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a49      	ldr	r2, [pc, #292]	; (8000fb4 <MX_GPIO_Init+0x198>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b47      	ldr	r3, [pc, #284]	; (8000fb4 <MX_GPIO_Init+0x198>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	4b43      	ldr	r3, [pc, #268]	; (8000fb4 <MX_GPIO_Init+0x198>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a42      	ldr	r2, [pc, #264]	; (8000fb4 <MX_GPIO_Init+0x198>)
 8000eac:	f043 0302 	orr.w	r3, r3, #2
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b40      	ldr	r3, [pc, #256]	; (8000fb4 <MX_GPIO_Init+0x198>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	4b3c      	ldr	r3, [pc, #240]	; (8000fb4 <MX_GPIO_Init+0x198>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a3b      	ldr	r2, [pc, #236]	; (8000fb4 <MX_GPIO_Init+0x198>)
 8000ec8:	f043 0308 	orr.w	r3, r3, #8
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b39      	ldr	r3, [pc, #228]	; (8000fb4 <MX_GPIO_Init+0x198>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0308 	and.w	r3, r3, #8
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_RESET_GPIO_Port, TFT_RESET_Pin, GPIO_PIN_SET);
 8000eda:	2201      	movs	r2, #1
 8000edc:	2108      	movs	r1, #8
 8000ede:	4836      	ldr	r0, [pc, #216]	; (8000fb8 <MX_GPIO_Init+0x19c>)
 8000ee0:	f003 f9c2 	bl	8004268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2120      	movs	r1, #32
 8000ee8:	4834      	ldr	r0, [pc, #208]	; (8000fbc <MX_GPIO_Init+0x1a0>)
 8000eea:	f003 f9bd 	bl	8004268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DC_Pin|T_CS_Pin|SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f44f 4150 	mov.w	r1, #53248	; 0xd000
 8000ef4:	4832      	ldr	r0, [pc, #200]	; (8000fc0 <MX_GPIO_Init+0x1a4>)
 8000ef6:	f003 f9b7 	bl	8004268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TFT_RESET_Pin */
  GPIO_InitStruct.Pin = TFT_RESET_Pin;
 8000efa:	2308      	movs	r3, #8
 8000efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efe:	2301      	movs	r3, #1
 8000f00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	2300      	movs	r3, #0
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TFT_RESET_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	f107 031c 	add.w	r3, r7, #28
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4829      	ldr	r0, [pc, #164]	; (8000fb8 <MX_GPIO_Init+0x19c>)
 8000f12:	f003 f80d 	bl	8003f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : INFRA_GPIO_Pin */
  GPIO_InitStruct.Pin = INFRA_GPIO_Pin;
 8000f16:	2302      	movs	r3, #2
 8000f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(INFRA_GPIO_GPIO_Port, &GPIO_InitStruct);
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	4619      	mov	r1, r3
 8000f28:	4824      	ldr	r0, [pc, #144]	; (8000fbc <MX_GPIO_Init+0x1a0>)
 8000f2a:	f003 f801 	bl	8003f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f2e:	23a0      	movs	r3, #160	; 0xa0
 8000f30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f3e:	2305      	movs	r3, #5
 8000f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f42:	f107 031c 	add.w	r3, r7, #28
 8000f46:	4619      	mov	r1, r3
 8000f48:	481e      	ldr	r0, [pc, #120]	; (8000fc4 <MX_GPIO_Init+0x1a8>)
 8000f4a:	f002 fff1 	bl	8003f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAMERA_RESET_Pin */
  GPIO_InitStruct.Pin = CAMERA_RESET_Pin;
 8000f4e:	2320      	movs	r3, #32
 8000f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f56:	2301      	movs	r3, #1
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CAMERA_RESET_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	4619      	mov	r1, r3
 8000f64:	4815      	ldr	r0, [pc, #84]	; (8000fbc <MX_GPIO_Init+0x1a0>)
 8000f66:	f002 ffe3 	bl	8003f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : DC_Pin T_CS_Pin SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = DC_Pin|T_CS_Pin|SPI1_NSS_Pin;
 8000f6a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000f6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f70:	2301      	movs	r3, #1
 8000f72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7c:	f107 031c 	add.w	r3, r7, #28
 8000f80:	4619      	mov	r1, r3
 8000f82:	480f      	ldr	r0, [pc, #60]	; (8000fc0 <MX_GPIO_Init+0x1a4>)
 8000f84:	f002 ffd4 	bl	8003f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f96:	2303      	movs	r3, #3
 8000f98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4807      	ldr	r0, [pc, #28]	; (8000fc4 <MX_GPIO_Init+0x1a8>)
 8000fa6:	f002 ffc3 	bl	8003f30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000faa:	bf00      	nop
 8000fac:	3730      	adds	r7, #48	; 0x30
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	40020800 	.word	0x40020800
 8000fc0:	40020400 	.word	0x40020400
 8000fc4:	40020000 	.word	0x40020000

08000fc8 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
 8000fdc:	615a      	str	r2, [r3, #20]
 8000fde:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000fe0:	4b27      	ldr	r3, [pc, #156]	; (8001080 <MX_FSMC_Init+0xb8>)
 8000fe2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000fe6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000fe8:	4b25      	ldr	r3, [pc, #148]	; (8001080 <MX_FSMC_Init+0xb8>)
 8000fea:	4a26      	ldr	r2, [pc, #152]	; (8001084 <MX_FSMC_Init+0xbc>)
 8000fec:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000fee:	4b24      	ldr	r3, [pc, #144]	; (8001080 <MX_FSMC_Init+0xb8>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000ff4:	4b22      	ldr	r3, [pc, #136]	; (8001080 <MX_FSMC_Init+0xb8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000ffa:	4b21      	ldr	r3, [pc, #132]	; (8001080 <MX_FSMC_Init+0xb8>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001000:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <MX_FSMC_Init+0xb8>)
 8001002:	2210      	movs	r2, #16
 8001004:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001006:	4b1e      	ldr	r3, [pc, #120]	; (8001080 <MX_FSMC_Init+0xb8>)
 8001008:	2200      	movs	r2, #0
 800100a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800100c:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <MX_FSMC_Init+0xb8>)
 800100e:	2200      	movs	r2, #0
 8001010:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001012:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <MX_FSMC_Init+0xb8>)
 8001014:	2200      	movs	r2, #0
 8001016:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001018:	4b19      	ldr	r3, [pc, #100]	; (8001080 <MX_FSMC_Init+0xb8>)
 800101a:	2200      	movs	r2, #0
 800101c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800101e:	4b18      	ldr	r3, [pc, #96]	; (8001080 <MX_FSMC_Init+0xb8>)
 8001020:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001024:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001026:	4b16      	ldr	r3, [pc, #88]	; (8001080 <MX_FSMC_Init+0xb8>)
 8001028:	2200      	movs	r2, #0
 800102a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800102c:	4b14      	ldr	r3, [pc, #80]	; (8001080 <MX_FSMC_Init+0xb8>)
 800102e:	2200      	movs	r2, #0
 8001030:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001032:	4b13      	ldr	r3, [pc, #76]	; (8001080 <MX_FSMC_Init+0xb8>)
 8001034:	2200      	movs	r2, #0
 8001036:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001038:	4b11      	ldr	r3, [pc, #68]	; (8001080 <MX_FSMC_Init+0xb8>)
 800103a:	2200      	movs	r2, #0
 800103c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800103e:	4b10      	ldr	r3, [pc, #64]	; (8001080 <MX_FSMC_Init+0xb8>)
 8001040:	2200      	movs	r2, #0
 8001042:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 4;
 8001044:	2304      	movs	r3, #4
 8001046:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001048:	230f      	movs	r3, #15
 800104a:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 8;
 800104c:	2308      	movs	r3, #8
 800104e:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 2;
 8001050:	2302      	movs	r3, #2
 8001052:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001054:	2310      	movs	r3, #16
 8001056:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001058:	2311      	movs	r3, #17
 800105a:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800105c:	2300      	movs	r3, #0
 800105e:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	2200      	movs	r2, #0
 8001064:	4619      	mov	r1, r3
 8001066:	4806      	ldr	r0, [pc, #24]	; (8001080 <MX_FSMC_Init+0xb8>)
 8001068:	f004 ff3e 	bl	8005ee8 <HAL_SRAM_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8001072:	f000 f809 	bl	8001088 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001076:	bf00      	nop
 8001078:	3720      	adds	r7, #32
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000314 	.word	0x20000314
 8001084:	a0000104 	.word	0xa0000104

08001088 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800108c:	b672      	cpsid	i
}
 800108e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001090:	e7fe      	b.n	8001090 <Error_Handler+0x8>
	...

08001094 <ov7670_init>:
static RET ov7670_read(uint8_t regAddr, uint8_t *data);

/*** External Function Defines ***/

RET ov7670_init(DCMI_HandleTypeDef *p_hdcmi, DMA_HandleTypeDef *p_hdma_dcmi, I2C_HandleTypeDef *p_hi2c)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  sp_hdcmi     = p_hdcmi;
 80010a0:	4a19      	ldr	r2, [pc, #100]	; (8001108 <ov7670_init+0x74>)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	6013      	str	r3, [r2, #0]
  sp_hdma_dcmi = p_hdma_dcmi;
 80010a6:	4a19      	ldr	r2, [pc, #100]	; (800110c <ov7670_init+0x78>)
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	6013      	str	r3, [r2, #0]
  sp_hi2c      = p_hi2c;
 80010ac:	4a18      	ldr	r2, [pc, #96]	; (8001110 <ov7670_init+0x7c>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6013      	str	r3, [r2, #0]
  s_destAddressForContiuousMode = 0;
 80010b2:	4b18      	ldr	r3, [pc, #96]	; (8001114 <ov7670_init+0x80>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]

  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2120      	movs	r1, #32
 80010bc:	4816      	ldr	r0, [pc, #88]	; (8001118 <ov7670_init+0x84>)
 80010be:	f003 f8d3 	bl	8004268 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80010c2:	2064      	movs	r0, #100	; 0x64
 80010c4:	f000 fdc2 	bl	8001c4c <HAL_Delay>
  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_SET);
 80010c8:	2201      	movs	r2, #1
 80010ca:	2120      	movs	r1, #32
 80010cc:	4812      	ldr	r0, [pc, #72]	; (8001118 <ov7670_init+0x84>)
 80010ce:	f003 f8cb 	bl	8004268 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80010d2:	2064      	movs	r0, #100	; 0x64
 80010d4:	f000 fdba 	bl	8001c4c <HAL_Delay>

  ov7670_write(0x12, 0x80);  // RESET
 80010d8:	2180      	movs	r1, #128	; 0x80
 80010da:	2012      	movs	r0, #18
 80010dc:	f000 f8bc 	bl	8001258 <ov7670_write>
  HAL_Delay(30);
 80010e0:	201e      	movs	r0, #30
 80010e2:	f000 fdb3 	bl	8001c4c <HAL_Delay>

  uint8_t buffer[4];
  ov7670_read(0x0b, buffer);
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	4619      	mov	r1, r3
 80010ec:	200b      	movs	r0, #11
 80010ee:	f000 f8d3 	bl	8001298 <ov7670_read>
  printf("[OV7670] dev id = %02X\n", buffer[0]);
 80010f2:	7d3b      	ldrb	r3, [r7, #20]
 80010f4:	4619      	mov	r1, r3
 80010f6:	4809      	ldr	r0, [pc, #36]	; (800111c <ov7670_init+0x88>)
 80010f8:	f007 f95e 	bl	80083b8 <iprintf>


  return RET_OK;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	2000036c 	.word	0x2000036c
 800110c:	20000370 	.word	0x20000370
 8001110:	20000374 	.word	0x20000374
 8001114:	20000378 	.word	0x20000378
 8001118:	40020800 	.word	0x40020800
 800111c:	080092ec 	.word	0x080092ec

08001120 <ov7670_config>:

RET ov7670_config(uint32_t mode)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  ov7670_stopCap();
 8001128:	f000 f858 	bl	80011dc <ov7670_stopCap>
  ov7670_write(0x12, 0x80);  // RESET
 800112c:	2180      	movs	r1, #128	; 0x80
 800112e:	2012      	movs	r0, #18
 8001130:	f000 f892 	bl	8001258 <ov7670_write>
  HAL_Delay(30);
 8001134:	201e      	movs	r0, #30
 8001136:	f000 fd89 	bl	8001c4c <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	e012      	b.n	8001166 <ov7670_config+0x46>
    ov7670_write(OV7670_reg[i][0], OV7670_reg[i][1]);
 8001140:	4a0e      	ldr	r2, [pc, #56]	; (800117c <ov7670_config+0x5c>)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001148:	490c      	ldr	r1, [pc, #48]	; (800117c <ov7670_config+0x5c>)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	440b      	add	r3, r1
 8001150:	785b      	ldrb	r3, [r3, #1]
 8001152:	4619      	mov	r1, r3
 8001154:	4610      	mov	r0, r2
 8001156:	f000 f87f 	bl	8001258 <ov7670_write>
    HAL_Delay(1);
 800115a:	2001      	movs	r0, #1
 800115c:	f000 fd76 	bl	8001c4c <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	3301      	adds	r3, #1
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	4a05      	ldr	r2, [pc, #20]	; (800117c <ov7670_config+0x5c>)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800116e:	2bff      	cmp	r3, #255	; 0xff
 8001170:	d1e6      	bne.n	8001140 <ov7670_config+0x20>
  }
  return RET_OK;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	08009304 	.word	0x08009304

08001180 <ov7670_startCap>:

RET ov7670_startCap(uint32_t capMode, uint32_t destAddress)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  ov7670_stopCap();
 800118a:	f000 f827 	bl	80011dc <ov7670_stopCap>
  if (capMode == OV7670_CAP_CONTINUOUS) {
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d10b      	bne.n	80011ac <ov7670_startCap+0x2c>
    /* note: continuous mode automatically invokes DCMI, but DMA needs to be invoked manually */
    s_destAddressForContiuousMode = destAddress;
 8001194:	4a0f      	ldr	r2, [pc, #60]	; (80011d4 <ov7670_startCap+0x54>)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	6013      	str	r3, [r2, #0]
    HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_CONTINUOUS, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <ov7670_startCap+0x58>)
 800119c:	6818      	ldr	r0, [r3, #0]
 800119e:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80011a2:	683a      	ldr	r2, [r7, #0]
 80011a4:	2100      	movs	r1, #0
 80011a6:	f000 fe87 	bl	8001eb8 <HAL_DCMI_Start_DMA>
 80011aa:	e00d      	b.n	80011c8 <ov7670_startCap+0x48>

  } else if (capMode == OV7670_CAP_SINGLE_FRAME) {
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d10a      	bne.n	80011c8 <ov7670_startCap+0x48>
    s_destAddressForContiuousMode = 0;
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <ov7670_startCap+0x54>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
    HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_SNAPSHOT, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
 80011b8:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <ov7670_startCap+0x58>)
 80011ba:	6818      	ldr	r0, [r3, #0]
 80011bc:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	2102      	movs	r1, #2
 80011c4:	f000 fe78 	bl	8001eb8 <HAL_DCMI_Start_DMA>
  }



  return RET_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000378 	.word	0x20000378
 80011d8:	2000036c 	.word	0x2000036c

080011dc <ov7670_stopCap>:



RET ov7670_stopCap()
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  HAL_DCMI_Stop(sp_hdcmi);
 80011e0:	4b03      	ldr	r3, [pc, #12]	; (80011f0 <ov7670_stopCap+0x14>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 ff07 	bl	8001ff8 <HAL_DCMI_Stop>
//  HAL_Delay(30);
  return RET_OK;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	2000036c 	.word	0x2000036c

080011f4 <HAL_DCMI_FrameEventCallback>:
  s_cbHsync = cbHsync;
  s_cbVsync = cbVsync;
}

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
//  printf("FRAME %d\n", HAL_GetTick());
  if(s_cbVsync)s_cbVsync(s_currentV);
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <HAL_DCMI_FrameEventCallback+0x54>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d005      	beq.n	8001210 <HAL_DCMI_FrameEventCallback+0x1c>
 8001204:	4b10      	ldr	r3, [pc, #64]	; (8001248 <HAL_DCMI_FrameEventCallback+0x54>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a10      	ldr	r2, [pc, #64]	; (800124c <HAL_DCMI_FrameEventCallback+0x58>)
 800120a:	6812      	ldr	r2, [r2, #0]
 800120c:	4610      	mov	r0, r2
 800120e:	4798      	blx	r3
  if(s_destAddressForContiuousMode != 0) {
 8001210:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <HAL_DCMI_FrameEventCallback+0x5c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d00b      	beq.n	8001230 <HAL_DCMI_FrameEventCallback+0x3c>
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_destAddressForContiuousMode, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	3328      	adds	r3, #40	; 0x28
 8001222:	4619      	mov	r1, r3
 8001224:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <HAL_DCMI_FrameEventCallback+0x5c>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 800122c:	f001 f9a4 	bl	8002578 <HAL_DMA_Start_IT>
//    HAL_SPI_Transmit(&hspi1, (uint32_t)&hdcmi->Instance->DR, 1000, HAL_MAX_DELAY);
  }
  s_currentV++;
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_DCMI_FrameEventCallback+0x58>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	3301      	adds	r3, #1
 8001236:	4a05      	ldr	r2, [pc, #20]	; (800124c <HAL_DCMI_FrameEventCallback+0x58>)
 8001238:	6013      	str	r3, [r2, #0]
  s_currentH = 0;
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <HAL_DCMI_FrameEventCallback+0x60>)
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	2000037c 	.word	0x2000037c
 800124c:	20000384 	.word	0x20000384
 8001250:	20000378 	.word	0x20000378
 8001254:	20000380 	.word	0x20000380

08001258 <ov7670_write>:
//  s_currentH++;
//}

/*** Internal Function Defines ***/
static RET ov7670_write(uint8_t regAddr, uint8_t data)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b088      	sub	sp, #32
 800125c:	af04      	add	r7, sp, #16
 800125e:	4603      	mov	r3, r0
 8001260:	460a      	mov	r2, r1
 8001262:	71fb      	strb	r3, [r7, #7]
 8001264:	4613      	mov	r3, r2
 8001266:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef ret;
  do {
    ret = HAL_I2C_Mem_Write(sp_hi2c, SLAVE_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8001268:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <ov7670_write+0x3c>)
 800126a:	6818      	ldr	r0, [r3, #0]
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	b29a      	uxth	r2, r3
 8001270:	2364      	movs	r3, #100	; 0x64
 8001272:	9302      	str	r3, [sp, #8]
 8001274:	2301      	movs	r3, #1
 8001276:	9301      	str	r3, [sp, #4]
 8001278:	1dbb      	adds	r3, r7, #6
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	2301      	movs	r3, #1
 800127e:	2142      	movs	r1, #66	; 0x42
 8001280:	f003 fc74 	bl	8004b6c <HAL_I2C_Mem_Write>
 8001284:	4603      	mov	r3, r0
 8001286:	73fb      	strb	r3, [r7, #15]
  } while (ret != HAL_OK && 0);
  return ret;
 8001288:	7bfb      	ldrb	r3, [r7, #15]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000374 	.word	0x20000374

08001298 <ov7670_read>:

static RET ov7670_read(uint8_t regAddr, uint8_t *data)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af02      	add	r7, sp, #8
 800129e:	4603      	mov	r3, r0
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef ret;
  do {
    // HAL_I2C_Mem_Read doesn't work (because of SCCB protocol(doesn't have ack))? */
//    ret = HAL_I2C_Mem_Read(sp_hi2c, SLAVE_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, data, 1, 1000);
    ret = HAL_I2C_Master_Transmit(sp_hi2c, SLAVE_ADDR, &regAddr, 1, 100);
 80012a4:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <ov7670_read+0x48>)
 80012a6:	6818      	ldr	r0, [r3, #0]
 80012a8:	1dfa      	adds	r2, r7, #7
 80012aa:	2364      	movs	r3, #100	; 0x64
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	2301      	movs	r3, #1
 80012b0:	2142      	movs	r1, #66	; 0x42
 80012b2:	f003 f937 	bl	8004524 <HAL_I2C_Master_Transmit>
 80012b6:	4603      	mov	r3, r0
 80012b8:	73fb      	strb	r3, [r7, #15]
    ret |= HAL_I2C_Master_Receive(sp_hi2c, SLAVE_ADDR, data, 1, 100);
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <ov7670_read+0x48>)
 80012bc:	6818      	ldr	r0, [r3, #0]
 80012be:	2364      	movs	r3, #100	; 0x64
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	2301      	movs	r3, #1
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	2142      	movs	r1, #66	; 0x42
 80012c8:	f003 fa2a 	bl	8004720 <HAL_I2C_Master_Receive>
 80012cc:	4603      	mov	r3, r0
 80012ce:	461a      	mov	r2, r3
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	73fb      	strb	r3, [r7, #15]
  } while (ret != HAL_OK && 0);
  return ret;
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000374 	.word	0x20000374

080012e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	607b      	str	r3, [r7, #4]
 80012ee:	4b13      	ldr	r3, [pc, #76]	; (800133c <HAL_MspInit+0x58>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	4a12      	ldr	r2, [pc, #72]	; (800133c <HAL_MspInit+0x58>)
 80012f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f8:	6453      	str	r3, [r2, #68]	; 0x44
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <HAL_MspInit+0x58>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	603b      	str	r3, [r7, #0]
 800130a:	4b0c      	ldr	r3, [pc, #48]	; (800133c <HAL_MspInit+0x58>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	4a0b      	ldr	r2, [pc, #44]	; (800133c <HAL_MspInit+0x58>)
 8001310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001314:	6413      	str	r3, [r2, #64]	; 0x40
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <HAL_MspInit+0x58>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131e:	603b      	str	r3, [r7, #0]
 8001320:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	2100      	movs	r1, #0
 8001326:	2005      	movs	r0, #5
 8001328:	f000 fd8f 	bl	8001e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800132c:	2005      	movs	r0, #5
 800132e:	f000 fda8 	bl	8001e82 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800

08001340 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08c      	sub	sp, #48	; 0x30
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 031c 	add.w	r3, r7, #28
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a54      	ldr	r2, [pc, #336]	; (80014b0 <HAL_DCMI_MspInit+0x170>)
 800135e:	4293      	cmp	r3, r2
 8001360:	f040 80a2 	bne.w	80014a8 <HAL_DCMI_MspInit+0x168>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001364:	2300      	movs	r3, #0
 8001366:	61bb      	str	r3, [r7, #24]
 8001368:	4b52      	ldr	r3, [pc, #328]	; (80014b4 <HAL_DCMI_MspInit+0x174>)
 800136a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800136c:	4a51      	ldr	r2, [pc, #324]	; (80014b4 <HAL_DCMI_MspInit+0x174>)
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	6353      	str	r3, [r2, #52]	; 0x34
 8001374:	4b4f      	ldr	r3, [pc, #316]	; (80014b4 <HAL_DCMI_MspInit+0x174>)
 8001376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	61bb      	str	r3, [r7, #24]
 800137e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	4b4b      	ldr	r3, [pc, #300]	; (80014b4 <HAL_DCMI_MspInit+0x174>)
 8001386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001388:	4a4a      	ldr	r2, [pc, #296]	; (80014b4 <HAL_DCMI_MspInit+0x174>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	6313      	str	r3, [r2, #48]	; 0x30
 8001390:	4b48      	ldr	r3, [pc, #288]	; (80014b4 <HAL_DCMI_MspInit+0x174>)
 8001392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	617b      	str	r3, [r7, #20]
 800139a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800139c:	2300      	movs	r3, #0
 800139e:	613b      	str	r3, [r7, #16]
 80013a0:	4b44      	ldr	r3, [pc, #272]	; (80014b4 <HAL_DCMI_MspInit+0x174>)
 80013a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a4:	4a43      	ldr	r2, [pc, #268]	; (80014b4 <HAL_DCMI_MspInit+0x174>)
 80013a6:	f043 0304 	orr.w	r3, r3, #4
 80013aa:	6313      	str	r3, [r2, #48]	; 0x30
 80013ac:	4b41      	ldr	r3, [pc, #260]	; (80014b4 <HAL_DCMI_MspInit+0x174>)
 80013ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	613b      	str	r3, [r7, #16]
 80013b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	4b3d      	ldr	r3, [pc, #244]	; (80014b4 <HAL_DCMI_MspInit+0x174>)
 80013be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c0:	4a3c      	ldr	r2, [pc, #240]	; (80014b4 <HAL_DCMI_MspInit+0x174>)
 80013c2:	f043 0302 	orr.w	r3, r3, #2
 80013c6:	6313      	str	r3, [r2, #48]	; 0x30
 80013c8:	4b3a      	ldr	r3, [pc, #232]	; (80014b4 <HAL_DCMI_MspInit+0x174>)
 80013ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PB8     ------> DCMI_D6
    PB9     ------> DCMI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_9;
 80013d4:	f44f 7314 	mov.w	r3, #592	; 0x250
 80013d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2302      	movs	r3, #2
 80013dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013de:	2302      	movs	r3, #2
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e2:	2303      	movs	r3, #3
 80013e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80013e6:	230d      	movs	r3, #13
 80013e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ea:	f107 031c 	add.w	r3, r7, #28
 80013ee:	4619      	mov	r1, r3
 80013f0:	4831      	ldr	r0, [pc, #196]	; (80014b8 <HAL_DCMI_MspInit+0x178>)
 80013f2:	f002 fd9d 	bl	8003f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 80013f6:	f44f 6338 	mov.w	r3, #2944	; 0xb80
 80013fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fc:	2302      	movs	r3, #2
 80013fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001400:	2302      	movs	r3, #2
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001404:	2303      	movs	r3, #3
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001408:	230d      	movs	r3, #13
 800140a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	4619      	mov	r1, r3
 8001412:	482a      	ldr	r0, [pc, #168]	; (80014bc <HAL_DCMI_MspInit+0x17c>)
 8001414:	f002 fd8c 	bl	8003f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001418:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800141c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001422:	2302      	movs	r3, #2
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001426:	2303      	movs	r3, #3
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800142a:	230d      	movs	r3, #13
 800142c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142e:	f107 031c 	add.w	r3, r7, #28
 8001432:	4619      	mov	r1, r3
 8001434:	4822      	ldr	r0, [pc, #136]	; (80014c0 <HAL_DCMI_MspInit+0x180>)
 8001436:	f002 fd7b 	bl	8003f30 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 800143a:	4b22      	ldr	r3, [pc, #136]	; (80014c4 <HAL_DCMI_MspInit+0x184>)
 800143c:	4a22      	ldr	r2, [pc, #136]	; (80014c8 <HAL_DCMI_MspInit+0x188>)
 800143e:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8001440:	4b20      	ldr	r3, [pc, #128]	; (80014c4 <HAL_DCMI_MspInit+0x184>)
 8001442:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001446:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001448:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <HAL_DCMI_MspInit+0x184>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 800144e:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <HAL_DCMI_MspInit+0x184>)
 8001450:	2200      	movs	r2, #0
 8001452:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_DISABLE;
 8001454:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <HAL_DCMI_MspInit+0x184>)
 8001456:	2200      	movs	r2, #0
 8001458:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800145a:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <HAL_DCMI_MspInit+0x184>)
 800145c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001460:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001462:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <HAL_DCMI_MspInit+0x184>)
 8001464:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001468:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 800146a:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <HAL_DCMI_MspInit+0x184>)
 800146c:	2200      	movs	r2, #0
 800146e:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8001470:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <HAL_DCMI_MspInit+0x184>)
 8001472:	2200      	movs	r2, #0
 8001474:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001476:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <HAL_DCMI_MspInit+0x184>)
 8001478:	2200      	movs	r2, #0
 800147a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 800147c:	4811      	ldr	r0, [pc, #68]	; (80014c4 <HAL_DCMI_MspInit+0x184>)
 800147e:	f000 ffcd 	bl	800241c <HAL_DMA_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <HAL_DCMI_MspInit+0x14c>
    {
      Error_Handler();
 8001488:	f7ff fdfe 	bl	8001088 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a0d      	ldr	r2, [pc, #52]	; (80014c4 <HAL_DCMI_MspInit+0x184>)
 8001490:	639a      	str	r2, [r3, #56]	; 0x38
 8001492:	4a0c      	ldr	r2, [pc, #48]	; (80014c4 <HAL_DCMI_MspInit+0x184>)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8001498:	2200      	movs	r2, #0
 800149a:	2100      	movs	r1, #0
 800149c:	204e      	movs	r0, #78	; 0x4e
 800149e:	f000 fcd4 	bl	8001e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80014a2:	204e      	movs	r0, #78	; 0x4e
 80014a4:	f000 fced 	bl	8001e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80014a8:	bf00      	nop
 80014aa:	3730      	adds	r7, #48	; 0x30
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	50050000 	.word	0x50050000
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40020000 	.word	0x40020000
 80014bc:	40020800 	.word	0x40020800
 80014c0:	40020400 	.word	0x40020400
 80014c4:	200000cc 	.word	0x200000cc
 80014c8:	40026428 	.word	0x40026428

080014cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08a      	sub	sp, #40	; 0x28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a19      	ldr	r2, [pc, #100]	; (8001550 <HAL_I2C_MspInit+0x84>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d12c      	bne.n	8001548 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	4b18      	ldr	r3, [pc, #96]	; (8001554 <HAL_I2C_MspInit+0x88>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a17      	ldr	r2, [pc, #92]	; (8001554 <HAL_I2C_MspInit+0x88>)
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <HAL_I2C_MspInit+0x88>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800150a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800150e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001510:	2312      	movs	r3, #18
 8001512:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001514:	2301      	movs	r3, #1
 8001516:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001518:	2303      	movs	r3, #3
 800151a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800151c:	2304      	movs	r3, #4
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	4619      	mov	r1, r3
 8001526:	480c      	ldr	r0, [pc, #48]	; (8001558 <HAL_I2C_MspInit+0x8c>)
 8001528:	f002 fd02 	bl	8003f30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <HAL_I2C_MspInit+0x88>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	4a07      	ldr	r2, [pc, #28]	; (8001554 <HAL_I2C_MspInit+0x88>)
 8001536:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800153a:	6413      	str	r3, [r2, #64]	; 0x40
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <HAL_I2C_MspInit+0x88>)
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001548:	bf00      	nop
 800154a:	3728      	adds	r7, #40	; 0x28
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40005800 	.word	0x40005800
 8001554:	40023800 	.word	0x40023800
 8001558:	40020400 	.word	0x40020400

0800155c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800156c:	d116      	bne.n	800159c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <HAL_TIM_Base_MspInit+0x80>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	4a19      	ldr	r2, [pc, #100]	; (80015dc <HAL_TIM_Base_MspInit+0x80>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6413      	str	r3, [r2, #64]	; 0x40
 800157e:	4b17      	ldr	r3, [pc, #92]	; (80015dc <HAL_TIM_Base_MspInit+0x80>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	2100      	movs	r1, #0
 800158e:	201c      	movs	r0, #28
 8001590:	f000 fc5b 	bl	8001e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001594:	201c      	movs	r0, #28
 8001596:	f000 fc74 	bl	8001e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800159a:	e01a      	b.n	80015d2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a0f      	ldr	r2, [pc, #60]	; (80015e0 <HAL_TIM_Base_MspInit+0x84>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d115      	bne.n	80015d2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <HAL_TIM_Base_MspInit+0x80>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	4a0b      	ldr	r2, [pc, #44]	; (80015dc <HAL_TIM_Base_MspInit+0x80>)
 80015b0:	f043 0302 	orr.w	r3, r3, #2
 80015b4:	6413      	str	r3, [r2, #64]	; 0x40
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <HAL_TIM_Base_MspInit+0x80>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2100      	movs	r1, #0
 80015c6:	201d      	movs	r0, #29
 80015c8:	f000 fc3f 	bl	8001e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015cc:	201d      	movs	r0, #29
 80015ce:	f000 fc58 	bl	8001e82 <HAL_NVIC_EnableIRQ>
}
 80015d2:	bf00      	nop
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40000400 	.word	0x40000400

080015e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	; 0x28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001604:	d11e      	bne.n	8001644 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	4b22      	ldr	r3, [pc, #136]	; (8001694 <HAL_TIM_MspPostInit+0xb0>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a21      	ldr	r2, [pc, #132]	; (8001694 <HAL_TIM_MspPostInit+0xb0>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b1f      	ldr	r3, [pc, #124]	; (8001694 <HAL_TIM_MspPostInit+0xb0>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM_YAW_Pin;
 8001622:	2301      	movs	r3, #1
 8001624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2300      	movs	r3, #0
 8001630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001632:	2301      	movs	r3, #1
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_YAW_GPIO_Port, &GPIO_InitStruct);
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	4619      	mov	r1, r3
 800163c:	4816      	ldr	r0, [pc, #88]	; (8001698 <HAL_TIM_MspPostInit+0xb4>)
 800163e:	f002 fc77 	bl	8003f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001642:	e022      	b.n	800168a <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a14      	ldr	r2, [pc, #80]	; (800169c <HAL_TIM_MspPostInit+0xb8>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d11d      	bne.n	800168a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	4b10      	ldr	r3, [pc, #64]	; (8001694 <HAL_TIM_MspPostInit+0xb0>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a0f      	ldr	r2, [pc, #60]	; (8001694 <HAL_TIM_MspPostInit+0xb0>)
 8001658:	f043 0304 	orr.w	r3, r3, #4
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <HAL_TIM_MspPostInit+0xb0>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_PITCH_Pin;
 800166a:	2340      	movs	r3, #64	; 0x40
 800166c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	2302      	movs	r3, #2
 8001670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001676:	2300      	movs	r3, #0
 8001678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800167a:	2302      	movs	r3, #2
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_PITCH_GPIO_Port, &GPIO_InitStruct);
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	4619      	mov	r1, r3
 8001684:	4806      	ldr	r0, [pc, #24]	; (80016a0 <HAL_TIM_MspPostInit+0xbc>)
 8001686:	f002 fc53 	bl	8003f30 <HAL_GPIO_Init>
}
 800168a:	bf00      	nop
 800168c:	3728      	adds	r7, #40	; 0x28
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40023800 	.word	0x40023800
 8001698:	40020000 	.word	0x40020000
 800169c:	40000400 	.word	0x40000400
 80016a0:	40020800 	.word	0x40020800

080016a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	; 0x28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a4b      	ldr	r2, [pc, #300]	; (80017f0 <HAL_UART_MspInit+0x14c>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	f040 8090 	bne.w	80017e8 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016c8:	2300      	movs	r3, #0
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	4b49      	ldr	r3, [pc, #292]	; (80017f4 <HAL_UART_MspInit+0x150>)
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d0:	4a48      	ldr	r2, [pc, #288]	; (80017f4 <HAL_UART_MspInit+0x150>)
 80016d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d6:	6413      	str	r3, [r2, #64]	; 0x40
 80016d8:	4b46      	ldr	r3, [pc, #280]	; (80017f4 <HAL_UART_MspInit+0x150>)
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e0:	613b      	str	r3, [r7, #16]
 80016e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	4b42      	ldr	r3, [pc, #264]	; (80017f4 <HAL_UART_MspInit+0x150>)
 80016ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ec:	4a41      	ldr	r2, [pc, #260]	; (80017f4 <HAL_UART_MspInit+0x150>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	6313      	str	r3, [r2, #48]	; 0x30
 80016f4:	4b3f      	ldr	r3, [pc, #252]	; (80017f4 <HAL_UART_MspInit+0x150>)
 80016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001700:	230c      	movs	r3, #12
 8001702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	2302      	movs	r3, #2
 8001706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170c:	2303      	movs	r3, #3
 800170e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001710:	2307      	movs	r3, #7
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	4619      	mov	r1, r3
 800171a:	4837      	ldr	r0, [pc, #220]	; (80017f8 <HAL_UART_MspInit+0x154>)
 800171c:	f002 fc08 	bl	8003f30 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001720:	4b36      	ldr	r3, [pc, #216]	; (80017fc <HAL_UART_MspInit+0x158>)
 8001722:	4a37      	ldr	r2, [pc, #220]	; (8001800 <HAL_UART_MspInit+0x15c>)
 8001724:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001726:	4b35      	ldr	r3, [pc, #212]	; (80017fc <HAL_UART_MspInit+0x158>)
 8001728:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800172c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800172e:	4b33      	ldr	r3, [pc, #204]	; (80017fc <HAL_UART_MspInit+0x158>)
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001734:	4b31      	ldr	r3, [pc, #196]	; (80017fc <HAL_UART_MspInit+0x158>)
 8001736:	2200      	movs	r2, #0
 8001738:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800173a:	4b30      	ldr	r3, [pc, #192]	; (80017fc <HAL_UART_MspInit+0x158>)
 800173c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001740:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001742:	4b2e      	ldr	r3, [pc, #184]	; (80017fc <HAL_UART_MspInit+0x158>)
 8001744:	2200      	movs	r2, #0
 8001746:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001748:	4b2c      	ldr	r3, [pc, #176]	; (80017fc <HAL_UART_MspInit+0x158>)
 800174a:	2200      	movs	r2, #0
 800174c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800174e:	4b2b      	ldr	r3, [pc, #172]	; (80017fc <HAL_UART_MspInit+0x158>)
 8001750:	2200      	movs	r2, #0
 8001752:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001754:	4b29      	ldr	r3, [pc, #164]	; (80017fc <HAL_UART_MspInit+0x158>)
 8001756:	2200      	movs	r2, #0
 8001758:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800175a:	4b28      	ldr	r3, [pc, #160]	; (80017fc <HAL_UART_MspInit+0x158>)
 800175c:	2200      	movs	r2, #0
 800175e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001760:	4826      	ldr	r0, [pc, #152]	; (80017fc <HAL_UART_MspInit+0x158>)
 8001762:	f000 fe5b 	bl	800241c <HAL_DMA_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800176c:	f7ff fc8c 	bl	8001088 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a22      	ldr	r2, [pc, #136]	; (80017fc <HAL_UART_MspInit+0x158>)
 8001774:	639a      	str	r2, [r3, #56]	; 0x38
 8001776:	4a21      	ldr	r2, [pc, #132]	; (80017fc <HAL_UART_MspInit+0x158>)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800177c:	4b21      	ldr	r3, [pc, #132]	; (8001804 <HAL_UART_MspInit+0x160>)
 800177e:	4a22      	ldr	r2, [pc, #136]	; (8001808 <HAL_UART_MspInit+0x164>)
 8001780:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001782:	4b20      	ldr	r3, [pc, #128]	; (8001804 <HAL_UART_MspInit+0x160>)
 8001784:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001788:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800178a:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <HAL_UART_MspInit+0x160>)
 800178c:	2240      	movs	r2, #64	; 0x40
 800178e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001790:	4b1c      	ldr	r3, [pc, #112]	; (8001804 <HAL_UART_MspInit+0x160>)
 8001792:	2200      	movs	r2, #0
 8001794:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001796:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <HAL_UART_MspInit+0x160>)
 8001798:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800179c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800179e:	4b19      	ldr	r3, [pc, #100]	; (8001804 <HAL_UART_MspInit+0x160>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017a4:	4b17      	ldr	r3, [pc, #92]	; (8001804 <HAL_UART_MspInit+0x160>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80017aa:	4b16      	ldr	r3, [pc, #88]	; (8001804 <HAL_UART_MspInit+0x160>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017b0:	4b14      	ldr	r3, [pc, #80]	; (8001804 <HAL_UART_MspInit+0x160>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017b6:	4b13      	ldr	r3, [pc, #76]	; (8001804 <HAL_UART_MspInit+0x160>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80017bc:	4811      	ldr	r0, [pc, #68]	; (8001804 <HAL_UART_MspInit+0x160>)
 80017be:	f000 fe2d 	bl	800241c <HAL_DMA_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80017c8:	f7ff fc5e 	bl	8001088 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a0d      	ldr	r2, [pc, #52]	; (8001804 <HAL_UART_MspInit+0x160>)
 80017d0:	635a      	str	r2, [r3, #52]	; 0x34
 80017d2:	4a0c      	ldr	r2, [pc, #48]	; (8001804 <HAL_UART_MspInit+0x160>)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017d8:	2200      	movs	r2, #0
 80017da:	2100      	movs	r1, #0
 80017dc:	2026      	movs	r0, #38	; 0x26
 80017de:	f000 fb34 	bl	8001e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017e2:	2026      	movs	r0, #38	; 0x26
 80017e4:	f000 fb4d 	bl	8001e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017e8:	bf00      	nop
 80017ea:	3728      	adds	r7, #40	; 0x28
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40004400 	.word	0x40004400
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020000 	.word	0x40020000
 80017fc:	20000254 	.word	0x20000254
 8001800:	40026088 	.word	0x40026088
 8001804:	200002b4 	.word	0x200002b4
 8001808:	400260a0 	.word	0x400260a0

0800180c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001812:	1d3b      	adds	r3, r7, #4
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001820:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <HAL_FSMC_MspInit+0x88>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d131      	bne.n	800188c <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001828:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <HAL_FSMC_MspInit+0x88>)
 800182a:	2201      	movs	r2, #1
 800182c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	603b      	str	r3, [r7, #0]
 8001832:	4b19      	ldr	r3, [pc, #100]	; (8001898 <HAL_FSMC_MspInit+0x8c>)
 8001834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001836:	4a18      	ldr	r2, [pc, #96]	; (8001898 <HAL_FSMC_MspInit+0x8c>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6393      	str	r3, [r2, #56]	; 0x38
 800183e:	4b16      	ldr	r3, [pc, #88]	; (8001898 <HAL_FSMC_MspInit+0x8c>)
 8001840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	603b      	str	r3, [r7, #0]
 8001848:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800184a:	f64f 7380 	movw	r3, #65408	; 0xff80
 800184e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001850:	2302      	movs	r3, #2
 8001852:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001858:	2303      	movs	r3, #3
 800185a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800185c:	230c      	movs	r3, #12
 800185e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001860:	1d3b      	adds	r3, r7, #4
 8001862:	4619      	mov	r1, r3
 8001864:	480d      	ldr	r0, [pc, #52]	; (800189c <HAL_FSMC_MspInit+0x90>)
 8001866:	f002 fb63 	bl	8003f30 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800186a:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 800186e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001870:	2302      	movs	r3, #2
 8001872:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001878:	2303      	movs	r3, #3
 800187a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800187c:	230c      	movs	r3, #12
 800187e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	4619      	mov	r1, r3
 8001884:	4806      	ldr	r0, [pc, #24]	; (80018a0 <HAL_FSMC_MspInit+0x94>)
 8001886:	f002 fb53 	bl	8003f30 <HAL_GPIO_Init>
 800188a:	e000      	b.n	800188e <HAL_FSMC_MspInit+0x82>
    return;
 800188c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000388 	.word	0x20000388
 8001898:	40023800 	.word	0x40023800
 800189c:	40021000 	.word	0x40021000
 80018a0:	40020c00 	.word	0x40020c00

080018a4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80018ac:	f7ff ffae 	bl	800180c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018bc:	e7fe      	b.n	80018bc <NMI_Handler+0x4>

080018be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018c2:	e7fe      	b.n	80018c2 <HardFault_Handler+0x4>

080018c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c8:	e7fe      	b.n	80018c8 <MemManage_Handler+0x4>

080018ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ce:	e7fe      	b.n	80018ce <BusFault_Handler+0x4>

080018d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <UsageFault_Handler+0x4>

080018d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001904:	f000 f982 	bl	8001c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}

0800190c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
	...

0800191c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001920:	4802      	ldr	r0, [pc, #8]	; (800192c <DMA1_Stream5_IRQHandler+0x10>)
 8001922:	f000 ff13 	bl	800274c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20000254 	.word	0x20000254

08001930 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001934:	4802      	ldr	r0, [pc, #8]	; (8001940 <DMA1_Stream6_IRQHandler+0x10>)
 8001936:	f000 ff09 	bl	800274c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	200002b4 	.word	0x200002b4

08001944 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001948:	4802      	ldr	r0, [pc, #8]	; (8001954 <TIM2_IRQHandler+0x10>)
 800194a:	f004 fc85 	bl	8006258 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000180 	.word	0x20000180

08001958 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800195c:	4802      	ldr	r0, [pc, #8]	; (8001968 <TIM3_IRQHandler+0x10>)
 800195e:	f004 fc7b 	bl	8006258 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	200001c8 	.word	0x200001c8

0800196c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001970:	4802      	ldr	r0, [pc, #8]	; (800197c <USART2_IRQHandler+0x10>)
 8001972:	f005 fb87 	bl	8007084 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000210 	.word	0x20000210

08001980 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8001984:	4802      	ldr	r0, [pc, #8]	; (8001990 <DMA2_Stream1_IRQHandler+0x10>)
 8001986:	f000 fee1 	bl	800274c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */


  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	200000cc 	.word	0x200000cc

08001994 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001998:	4802      	ldr	r0, [pc, #8]	; (80019a4 <DCMI_IRQHandler+0x10>)
 800199a:	f000 fb89 	bl	80020b0 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	2000008c 	.word	0x2000008c

080019a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	e00a      	b.n	80019d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019ba:	f3af 8000 	nop.w
 80019be:	4601      	mov	r1, r0
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	1c5a      	adds	r2, r3, #1
 80019c4:	60ba      	str	r2, [r7, #8]
 80019c6:	b2ca      	uxtb	r2, r1
 80019c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	3301      	adds	r3, #1
 80019ce:	617b      	str	r3, [r7, #20]
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	dbf0      	blt.n	80019ba <_read+0x12>
  }

  return len;
 80019d8:	687b      	ldr	r3, [r7, #4]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b086      	sub	sp, #24
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	60f8      	str	r0, [r7, #12]
 80019ea:	60b9      	str	r1, [r7, #8]
 80019ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	e009      	b.n	8001a08 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	1c5a      	adds	r2, r3, #1
 80019f8:	60ba      	str	r2, [r7, #8]
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	3301      	adds	r3, #1
 8001a06:	617b      	str	r3, [r7, #20]
 8001a08:	697a      	ldr	r2, [r7, #20]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	dbf1      	blt.n	80019f4 <_write+0x12>
  }
  return len;
 8001a10:	687b      	ldr	r3, [r7, #4]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <_close>:

int _close(int file)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a42:	605a      	str	r2, [r3, #4]
  return 0;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <_isatty>:

int _isatty(int file)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a5a:	2301      	movs	r3, #1
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a8c:	4a14      	ldr	r2, [pc, #80]	; (8001ae0 <_sbrk+0x5c>)
 8001a8e:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <_sbrk+0x60>)
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a98:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <_sbrk+0x64>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d102      	bne.n	8001aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aa0:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <_sbrk+0x64>)
 8001aa2:	4a12      	ldr	r2, [pc, #72]	; (8001aec <_sbrk+0x68>)
 8001aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aa6:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <_sbrk+0x64>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d207      	bcs.n	8001ac4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ab4:	f006 fc40 	bl	8008338 <__errno>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	220c      	movs	r2, #12
 8001abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001abe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac2:	e009      	b.n	8001ad8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ac4:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <_sbrk+0x64>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aca:	4b07      	ldr	r3, [pc, #28]	; (8001ae8 <_sbrk+0x64>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	4a05      	ldr	r2, [pc, #20]	; (8001ae8 <_sbrk+0x64>)
 8001ad4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20020000 	.word	0x20020000
 8001ae4:	00000400 	.word	0x00000400
 8001ae8:	2000038c 	.word	0x2000038c
 8001aec:	200003a8 	.word	0x200003a8

08001af0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001af4:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <SystemInit+0x20>)
 8001af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001afa:	4a05      	ldr	r2, [pc, #20]	; (8001b10 <SystemInit+0x20>)
 8001afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b18:	480d      	ldr	r0, [pc, #52]	; (8001b50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b1a:	490e      	ldr	r1, [pc, #56]	; (8001b54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b1c:	4a0e      	ldr	r2, [pc, #56]	; (8001b58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b20:	e002      	b.n	8001b28 <LoopCopyDataInit>

08001b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b26:	3304      	adds	r3, #4

08001b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b2c:	d3f9      	bcc.n	8001b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b2e:	4a0b      	ldr	r2, [pc, #44]	; (8001b5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b30:	4c0b      	ldr	r4, [pc, #44]	; (8001b60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b34:	e001      	b.n	8001b3a <LoopFillZerobss>

08001b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b38:	3204      	adds	r2, #4

08001b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b3c:	d3fb      	bcc.n	8001b36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b3e:	f7ff ffd7 	bl	8001af0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b42:	f006 fbff 	bl	8008344 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b46:	f7fe fefd 	bl	8000944 <main>
  bx  lr    
 8001b4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b54:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001b58:	08009428 	.word	0x08009428
  ldr r2, =_sbss
 8001b5c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001b60:	200003a4 	.word	0x200003a4

08001b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b64:	e7fe      	b.n	8001b64 <ADC_IRQHandler>
	...

08001b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <HAL_Init+0x40>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a0d      	ldr	r2, [pc, #52]	; (8001ba8 <HAL_Init+0x40>)
 8001b72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b78:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <HAL_Init+0x40>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <HAL_Init+0x40>)
 8001b7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b84:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <HAL_Init+0x40>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a07      	ldr	r2, [pc, #28]	; (8001ba8 <HAL_Init+0x40>)
 8001b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b90:	2003      	movs	r0, #3
 8001b92:	f000 f94f 	bl	8001e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b96:	200f      	movs	r0, #15
 8001b98:	f000 f808 	bl	8001bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b9c:	f7ff fba2 	bl	80012e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40023c00 	.word	0x40023c00

08001bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <HAL_InitTick+0x54>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_InitTick+0x58>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 f967 	bl	8001e9e <HAL_SYSTICK_Config>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e00e      	b.n	8001bf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b0f      	cmp	r3, #15
 8001bde:	d80a      	bhi.n	8001bf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be0:	2200      	movs	r2, #0
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295
 8001be8:	f000 f92f 	bl	8001e4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bec:	4a06      	ldr	r2, [pc, #24]	; (8001c08 <HAL_InitTick+0x5c>)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e000      	b.n	8001bf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000000 	.word	0x20000000
 8001c04:	20000008 	.word	0x20000008
 8001c08:	20000004 	.word	0x20000004

08001c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_IncTick+0x20>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_IncTick+0x24>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	4a04      	ldr	r2, [pc, #16]	; (8001c30 <HAL_IncTick+0x24>)
 8001c1e:	6013      	str	r3, [r2, #0]
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	20000008 	.word	0x20000008
 8001c30:	20000390 	.word	0x20000390

08001c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return uwTick;
 8001c38:	4b03      	ldr	r3, [pc, #12]	; (8001c48 <HAL_GetTick+0x14>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	20000390 	.word	0x20000390

08001c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c54:	f7ff ffee 	bl	8001c34 <HAL_GetTick>
 8001c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c64:	d005      	beq.n	8001c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c66:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <HAL_Delay+0x44>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4413      	add	r3, r2
 8001c70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c72:	bf00      	nop
 8001c74:	f7ff ffde 	bl	8001c34 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d8f7      	bhi.n	8001c74 <HAL_Delay+0x28>
  {
  }
}
 8001c84:	bf00      	nop
 8001c86:	bf00      	nop
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000008 	.word	0x20000008

08001c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cc6:	4a04      	ldr	r2, [pc, #16]	; (8001cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	60d3      	str	r3, [r2, #12]
}
 8001ccc:	bf00      	nop
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce0:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	0a1b      	lsrs	r3, r3, #8
 8001ce6:	f003 0307 	and.w	r3, r3, #7
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	db0b      	blt.n	8001d22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	f003 021f 	and.w	r2, r3, #31
 8001d10:	4907      	ldr	r1, [pc, #28]	; (8001d30 <__NVIC_EnableIRQ+0x38>)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	095b      	lsrs	r3, r3, #5
 8001d18:	2001      	movs	r0, #1
 8001d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	e000e100 	.word	0xe000e100

08001d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	6039      	str	r1, [r7, #0]
 8001d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	db0a      	blt.n	8001d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	490c      	ldr	r1, [pc, #48]	; (8001d80 <__NVIC_SetPriority+0x4c>)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	0112      	lsls	r2, r2, #4
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	440b      	add	r3, r1
 8001d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d5c:	e00a      	b.n	8001d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	4908      	ldr	r1, [pc, #32]	; (8001d84 <__NVIC_SetPriority+0x50>)
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	3b04      	subs	r3, #4
 8001d6c:	0112      	lsls	r2, r2, #4
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	440b      	add	r3, r1
 8001d72:	761a      	strb	r2, [r3, #24]
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000e100 	.word	0xe000e100
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b089      	sub	sp, #36	; 0x24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f1c3 0307 	rsb	r3, r3, #7
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	bf28      	it	cs
 8001da6:	2304      	movcs	r3, #4
 8001da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3304      	adds	r3, #4
 8001dae:	2b06      	cmp	r3, #6
 8001db0:	d902      	bls.n	8001db8 <NVIC_EncodePriority+0x30>
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3b03      	subs	r3, #3
 8001db6:	e000      	b.n	8001dba <NVIC_EncodePriority+0x32>
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43da      	mvns	r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	401a      	ands	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dda:	43d9      	mvns	r1, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de0:	4313      	orrs	r3, r2
         );
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3724      	adds	r7, #36	; 0x24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e00:	d301      	bcc.n	8001e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e02:	2301      	movs	r3, #1
 8001e04:	e00f      	b.n	8001e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e06:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <SysTick_Config+0x40>)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e0e:	210f      	movs	r1, #15
 8001e10:	f04f 30ff 	mov.w	r0, #4294967295
 8001e14:	f7ff ff8e 	bl	8001d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <SysTick_Config+0x40>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e1e:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <SysTick_Config+0x40>)
 8001e20:	2207      	movs	r2, #7
 8001e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	e000e010 	.word	0xe000e010

08001e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff ff29 	bl	8001c94 <__NVIC_SetPriorityGrouping>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b086      	sub	sp, #24
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4603      	mov	r3, r0
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	607a      	str	r2, [r7, #4]
 8001e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e5c:	f7ff ff3e 	bl	8001cdc <__NVIC_GetPriorityGrouping>
 8001e60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	6978      	ldr	r0, [r7, #20]
 8001e68:	f7ff ff8e 	bl	8001d88 <NVIC_EncodePriority>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff5d 	bl	8001d34 <__NVIC_SetPriority>
}
 8001e7a:	bf00      	nop
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	4603      	mov	r3, r0
 8001e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff31 	bl	8001cf8 <__NVIC_EnableIRQ>
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff ffa2 	bl	8001df0 <SysTick_Config>
 8001eac:	4603      	mov	r3, r0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b088      	sub	sp, #32
 8001ebc:	af02      	add	r7, sp, #8
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
 8001ec4:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d101      	bne.n	8001ed8 <HAL_DCMI_Start_DMA+0x20>
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	e086      	b.n	8001fe6 <HAL_DCMI_Start_DMA+0x12e>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ef6:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0202 	bic.w	r2, r2, #2
 8001f06:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6819      	ldr	r1, [r3, #0]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1c:	4a34      	ldr	r2, [pc, #208]	; (8001ff0 <HAL_DCMI_Start_DMA+0x138>)
 8001f1e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f24:	4a33      	ldr	r2, [pc, #204]	; (8001ff4 <HAL_DCMI_Start_DMA+0x13c>)
 8001f26:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi->XferTransferNumber = 0U;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	631a      	str	r2, [r3, #48]	; 0x30

  if(Length <= 0xFFFFU)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f42:	d20a      	bcs.n	8001f5a <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	3328      	adds	r3, #40	; 0x28
 8001f4e:	4619      	mov	r1, r3
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	f000 fb10 	bl	8002578 <HAL_DMA_Start_IT>
 8001f58:	e038      	b.n	8001fcc <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5e:	4a24      	ldr	r2, [pc, #144]	; (8001ff0 <HAL_DCMI_Start_DMA+0x138>)
 8001f60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2201      	movs	r2, #1
 8001f66:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferSize = Length;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdcmi->pBuffPtr = pData;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	635a      	str	r2, [r3, #52]	; 0x34

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8001f74:	e009      	b.n	8001f8a <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7a:	085a      	lsrs	r2, r3, #1
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	62da      	str	r2, [r3, #44]	; 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f84:	005a      	lsls	r2, r3, #1
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	629a      	str	r2, [r3, #40]	; 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f92:	d2f0      	bcs.n	8001f76 <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f98:	1e9a      	subs	r2, r3, #2
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	4413      	add	r3, r2
 8001fb0:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	3328      	adds	r3, #40	; 0x28
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc2:	9300      	str	r3, [sp, #0]
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	f000 fe2a 	bl	8002c20 <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0201 	orr.w	r2, r2, #1
 8001fda:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	080021e9 	.word	0x080021e9
 8001ff4:	08002313 	.word	0x08002313

08001ff8 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef* hdcmi)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SystemCoreClock / HAL_TIMEOUT_DCMI_STOP;
 8002000:	4b29      	ldr	r3, [pc, #164]	; (80020a8 <HAL_DCMI_Stop+0xb0>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	085b      	lsrs	r3, r3, #1
 8002006:	4a29      	ldr	r2, [pc, #164]	; (80020ac <HAL_DCMI_Stop+0xb4>)
 8002008:	fba2 2303 	umull	r2, r3, r2, r3
 800200c:	089b      	lsrs	r3, r3, #2
 800200e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002010:	2300      	movs	r3, #0
 8002012:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800201a:	2b01      	cmp	r3, #1
 800201c:	d101      	bne.n	8002022 <HAL_DCMI_Stop+0x2a>
 800201e:	2302      	movs	r3, #2
 8002020:	e03e      	b.n	80020a0 <HAL_DCMI_Stop+0xa8>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2202      	movs	r2, #2
 800202e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 0201 	bic.w	r2, r2, #1
 8002040:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	1e5a      	subs	r2, r3, #1
 8002046:	60ba      	str	r2, [r7, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d108      	bne.n	800205e <HAL_DCMI_Stop+0x66>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002050:	f043 0220 	orr.w	r2, r3, #32
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	63da      	str	r2, [r3, #60]	; 0x3c

      status = HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	73fb      	strb	r3, [r7, #15]
      break;
 800205c:	e006      	b.n	800206c <HAL_DCMI_Stop+0x74>
    }
  }
  while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1ea      	bne.n	8002042 <HAL_DCMI_Stop+0x4a>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800207a:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  HAL_DMA_Abort(hdcmi->DMA_Handle);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002080:	4618      	mov	r0, r3
 8002082:	f000 fad1 	bl	8002628 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return status;
 800209e:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	20000000 	.word	0x20000000
 80020ac:	92492493 	.word	0x92492493

080020b0 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d016      	beq.n	80020f8 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2204      	movs	r2, #4
 80020d0:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d6:	f043 0202 	orr.w	r2, r3, #2
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2204      	movs	r2, #4
 80020e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ea:	4a2f      	ldr	r2, [pc, #188]	; (80021a8 <HAL_DCMI_IRQHandler+0xf8>)
 80020ec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 fb08 	bl	8002708 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d016      	beq.n	8002130 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2202      	movs	r2, #2
 8002108:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800210e:	f043 0201 	orr.w	r2, r3, #1
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2204      	movs	r2, #4
 800211a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002122:	4a21      	ldr	r2, [pc, #132]	; (80021a8 <HAL_DCMI_IRQHandler+0xf8>)
 8002124:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212a:	4618      	mov	r0, r3
 800212c:	f000 faec 	bl	8002708 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f003 0310 	and.w	r3, r3, #16
 8002136:	2b00      	cmp	r3, #0
 8002138:	d006      	beq.n	8002148 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2210      	movs	r2, #16
 8002140:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f83c 	bl	80021c0 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d006      	beq.n	8002160 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2208      	movs	r2, #8
 8002158:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f83a 	bl	80021d4 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d019      	beq.n	800219e <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b02      	cmp	r3, #2
 8002176:	d107      	bne.n	8002188 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 021e 	bic.w	r2, r2, #30
 8002186:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0201 	bic.w	r2, r2, #1
 8002196:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff f82b 	bl	80011f4 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 800219e:	bf00      	nop
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	08002313 	.word	0x08002313

080021ac <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f8:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d043      	beq.n	800228a <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800220e:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b00      	cmp	r3, #0
 800221a:	d118      	bne.n	800224e <DCMI_DMAXferCplt+0x66>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d015      	beq.n	800224e <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002234:	00da      	lsls	r2, r3, #3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	4413      	add	r3, r2
 800223a:	2200      	movs	r2, #0
 800223c:	4619      	mov	r1, r3
 800223e:	f001 fe37 	bl	8003eb0 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002246:	1e5a      	subs	r2, r3, #1
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	629a      	str	r2, [r3, #40]	; 0x28
 800224c:	e044      	b.n	80022d8 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d13c      	bne.n	80022d8 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002270:	00da      	lsls	r2, r3, #3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	4413      	add	r3, r2
 8002276:	2201      	movs	r2, #1
 8002278:	4619      	mov	r1, r3
 800227a:	f001 fe19 	bl	8003eb0 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002282:	1e5a      	subs	r2, r3, #1
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	629a      	str	r2, [r3, #40]	; 0x28
 8002288:	e026      	b.n	80022d8 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d006      	beq.n	80022a8 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68ba      	ldr	r2, [r7, #8]
 80022a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	e017      	b.n	80022d8 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d10f      	bne.n	80022d8 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022bc:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c2:	0099      	lsls	r1, r3, #2
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	440a      	add	r2, r1
 80022ce:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	629a      	str	r2, [r3, #40]	; 0x28
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d112      	bne.n	800230a <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68da      	ldr	r2, [r3, #12]
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0201 	orr.w	r2, r2, #1
 80022f2:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d103      	bne.n	800230a <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }
}
 800230a:	bf00      	nop
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b084      	sub	sp, #16
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800231e:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002326:	2b02      	cmp	r3, #2
 8002328:	d003      	beq.n	8002332 <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f7ff ff3a 	bl	80021ac <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8002338:	bf00      	nop
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e05f      	b.n	8002412 <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d109      	bne.n	8002372 <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7fe ffea 	bl	8001340 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7fe ffe7 	bl	8001340 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2202      	movs	r2, #2
 8002376:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6812      	ldr	r2, [r2, #0]
 8002384:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002388:	f023 0308 	bic.w	r3, r3, #8
 800238c:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6819      	ldr	r1, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80023a2:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80023ae:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80023ba:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b10      	cmp	r3, #16
 80023ca:	d112      	bne.n	80023f2 <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	7f1b      	ldrb	r3, [r3, #28]
 80023d0:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	7f5b      	ldrb	r3, [r3, #29]
 80023d6:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80023d8:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	7f9b      	ldrb	r3, [r3, #30]
 80023de:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80023e0:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	7fdb      	ldrb	r3, [r3, #31]
 80023e8:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 80023ee:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80023f0:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68da      	ldr	r2, [r3, #12]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f042 021e 	orr.w	r2, r2, #30
 8002400:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002428:	f7ff fc04 	bl	8001c34 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e099      	b.n	800256c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2202      	movs	r2, #2
 800243c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0201 	bic.w	r2, r2, #1
 8002456:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002458:	e00f      	b.n	800247a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800245a:	f7ff fbeb 	bl	8001c34 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b05      	cmp	r3, #5
 8002466:	d908      	bls.n	800247a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2220      	movs	r2, #32
 800246c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2203      	movs	r2, #3
 8002472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e078      	b.n	800256c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1e8      	bne.n	800245a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	4b38      	ldr	r3, [pc, #224]	; (8002574 <HAL_DMA_Init+0x158>)
 8002494:	4013      	ands	r3, r2
 8002496:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d107      	bne.n	80024e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024dc:	4313      	orrs	r3, r2
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	f023 0307 	bic.w	r3, r3, #7
 80024fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	4313      	orrs	r3, r2
 8002504:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250a:	2b04      	cmp	r3, #4
 800250c:	d117      	bne.n	800253e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	4313      	orrs	r3, r2
 8002516:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00e      	beq.n	800253e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 fb01 	bl	8002b28 <DMA_CheckFifoParam>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d008      	beq.n	800253e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2240      	movs	r2, #64	; 0x40
 8002530:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800253a:	2301      	movs	r3, #1
 800253c:	e016      	b.n	800256c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 fab8 	bl	8002abc <DMA_CalcBaseAndBitshift>
 800254c:	4603      	mov	r3, r0
 800254e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002554:	223f      	movs	r2, #63	; 0x3f
 8002556:	409a      	lsls	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	f010803f 	.word	0xf010803f

08002578 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
 8002584:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002596:	2b01      	cmp	r3, #1
 8002598:	d101      	bne.n	800259e <HAL_DMA_Start_IT+0x26>
 800259a:	2302      	movs	r3, #2
 800259c:	e040      	b.n	8002620 <HAL_DMA_Start_IT+0xa8>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d12f      	bne.n	8002612 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2202      	movs	r2, #2
 80025b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	68b9      	ldr	r1, [r7, #8]
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 fa4a 	bl	8002a60 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d0:	223f      	movs	r2, #63	; 0x3f
 80025d2:	409a      	lsls	r2, r3
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0216 	orr.w	r2, r2, #22
 80025e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d007      	beq.n	8002600 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f042 0208 	orr.w	r2, r2, #8
 80025fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0201 	orr.w	r2, r2, #1
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	e005      	b.n	800261e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800261a:	2302      	movs	r3, #2
 800261c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800261e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002634:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002636:	f7ff fafd 	bl	8001c34 <HAL_GetTick>
 800263a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d008      	beq.n	800265a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2280      	movs	r2, #128	; 0x80
 800264c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e052      	b.n	8002700 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 0216 	bic.w	r2, r2, #22
 8002668:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695a      	ldr	r2, [r3, #20]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002678:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	2b00      	cmp	r3, #0
 8002680:	d103      	bne.n	800268a <HAL_DMA_Abort+0x62>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002686:	2b00      	cmp	r3, #0
 8002688:	d007      	beq.n	800269a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0208 	bic.w	r2, r2, #8
 8002698:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0201 	bic.w	r2, r2, #1
 80026a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026aa:	e013      	b.n	80026d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026ac:	f7ff fac2 	bl	8001c34 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b05      	cmp	r3, #5
 80026b8:	d90c      	bls.n	80026d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2220      	movs	r2, #32
 80026be:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2203      	movs	r2, #3
 80026c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e015      	b.n	8002700 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1e4      	bne.n	80026ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e6:	223f      	movs	r2, #63	; 0x3f
 80026e8:	409a      	lsls	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d004      	beq.n	8002726 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2280      	movs	r2, #128	; 0x80
 8002720:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e00c      	b.n	8002740 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2205      	movs	r2, #5
 800272a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0201 	bic.w	r2, r2, #1
 800273c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002758:	4b8e      	ldr	r3, [pc, #568]	; (8002994 <HAL_DMA_IRQHandler+0x248>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a8e      	ldr	r2, [pc, #568]	; (8002998 <HAL_DMA_IRQHandler+0x24c>)
 800275e:	fba2 2303 	umull	r2, r3, r2, r3
 8002762:	0a9b      	lsrs	r3, r3, #10
 8002764:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002776:	2208      	movs	r2, #8
 8002778:	409a      	lsls	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	4013      	ands	r3, r2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d01a      	beq.n	80027b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b00      	cmp	r3, #0
 800278e:	d013      	beq.n	80027b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0204 	bic.w	r2, r2, #4
 800279e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a4:	2208      	movs	r2, #8
 80027a6:	409a      	lsls	r2, r3
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b0:	f043 0201 	orr.w	r2, r3, #1
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027bc:	2201      	movs	r2, #1
 80027be:	409a      	lsls	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4013      	ands	r3, r2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d012      	beq.n	80027ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00b      	beq.n	80027ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027da:	2201      	movs	r2, #1
 80027dc:	409a      	lsls	r2, r3
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e6:	f043 0202 	orr.w	r2, r3, #2
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f2:	2204      	movs	r2, #4
 80027f4:	409a      	lsls	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	4013      	ands	r3, r2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d012      	beq.n	8002824 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00b      	beq.n	8002824 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002810:	2204      	movs	r2, #4
 8002812:	409a      	lsls	r2, r3
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281c:	f043 0204 	orr.w	r2, r3, #4
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002828:	2210      	movs	r2, #16
 800282a:	409a      	lsls	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4013      	ands	r3, r2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d043      	beq.n	80028bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	2b00      	cmp	r3, #0
 8002840:	d03c      	beq.n	80028bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002846:	2210      	movs	r2, #16
 8002848:	409a      	lsls	r2, r3
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d018      	beq.n	800288e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d108      	bne.n	800287c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	2b00      	cmp	r3, #0
 8002870:	d024      	beq.n	80028bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	4798      	blx	r3
 800287a:	e01f      	b.n	80028bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002880:	2b00      	cmp	r3, #0
 8002882:	d01b      	beq.n	80028bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	4798      	blx	r3
 800288c:	e016      	b.n	80028bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002898:	2b00      	cmp	r3, #0
 800289a:	d107      	bne.n	80028ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 0208 	bic.w	r2, r2, #8
 80028aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c0:	2220      	movs	r2, #32
 80028c2:	409a      	lsls	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4013      	ands	r3, r2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 808f 	beq.w	80029ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0310 	and.w	r3, r3, #16
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 8087 	beq.w	80029ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e2:	2220      	movs	r2, #32
 80028e4:	409a      	lsls	r2, r3
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b05      	cmp	r3, #5
 80028f4:	d136      	bne.n	8002964 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 0216 	bic.w	r2, r2, #22
 8002904:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	695a      	ldr	r2, [r3, #20]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002914:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	2b00      	cmp	r3, #0
 800291c:	d103      	bne.n	8002926 <HAL_DMA_IRQHandler+0x1da>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002922:	2b00      	cmp	r3, #0
 8002924:	d007      	beq.n	8002936 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 0208 	bic.w	r2, r2, #8
 8002934:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293a:	223f      	movs	r2, #63	; 0x3f
 800293c:	409a      	lsls	r2, r3
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002956:	2b00      	cmp	r3, #0
 8002958:	d07e      	beq.n	8002a58 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	4798      	blx	r3
        }
        return;
 8002962:	e079      	b.n	8002a58 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d01d      	beq.n	80029ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10d      	bne.n	800299c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002984:	2b00      	cmp	r3, #0
 8002986:	d031      	beq.n	80029ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	4798      	blx	r3
 8002990:	e02c      	b.n	80029ec <HAL_DMA_IRQHandler+0x2a0>
 8002992:	bf00      	nop
 8002994:	20000000 	.word	0x20000000
 8002998:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d023      	beq.n	80029ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	4798      	blx	r3
 80029ac:	e01e      	b.n	80029ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10f      	bne.n	80029dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0210 	bic.w	r2, r2, #16
 80029ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d032      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d022      	beq.n	8002a46 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2205      	movs	r2, #5
 8002a04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 0201 	bic.w	r2, r2, #1
 8002a16:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d307      	bcc.n	8002a34 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f2      	bne.n	8002a18 <HAL_DMA_IRQHandler+0x2cc>
 8002a32:	e000      	b.n	8002a36 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a34:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d005      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	4798      	blx	r3
 8002a56:	e000      	b.n	8002a5a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a58:	bf00      	nop
    }
  }
}
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
 8002a6c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a7c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	2b40      	cmp	r3, #64	; 0x40
 8002a8c:	d108      	bne.n	8002aa0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a9e:	e007      	b.n	8002ab0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68ba      	ldr	r2, [r7, #8]
 8002aa6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	60da      	str	r2, [r3, #12]
}
 8002ab0:	bf00      	nop
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	3b10      	subs	r3, #16
 8002acc:	4a14      	ldr	r2, [pc, #80]	; (8002b20 <DMA_CalcBaseAndBitshift+0x64>)
 8002ace:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad2:	091b      	lsrs	r3, r3, #4
 8002ad4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ad6:	4a13      	ldr	r2, [pc, #76]	; (8002b24 <DMA_CalcBaseAndBitshift+0x68>)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	4413      	add	r3, r2
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	d909      	bls.n	8002afe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002af2:	f023 0303 	bic.w	r3, r3, #3
 8002af6:	1d1a      	adds	r2, r3, #4
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	659a      	str	r2, [r3, #88]	; 0x58
 8002afc:	e007      	b.n	8002b0e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b06:	f023 0303 	bic.w	r3, r3, #3
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3714      	adds	r7, #20
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	aaaaaaab 	.word	0xaaaaaaab
 8002b24:	08009378 	.word	0x08009378

08002b28 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b30:	2300      	movs	r3, #0
 8002b32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b38:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d11f      	bne.n	8002b82 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	2b03      	cmp	r3, #3
 8002b46:	d856      	bhi.n	8002bf6 <DMA_CheckFifoParam+0xce>
 8002b48:	a201      	add	r2, pc, #4	; (adr r2, 8002b50 <DMA_CheckFifoParam+0x28>)
 8002b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b4e:	bf00      	nop
 8002b50:	08002b61 	.word	0x08002b61
 8002b54:	08002b73 	.word	0x08002b73
 8002b58:	08002b61 	.word	0x08002b61
 8002b5c:	08002bf7 	.word	0x08002bf7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d046      	beq.n	8002bfa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b70:	e043      	b.n	8002bfa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b76:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b7a:	d140      	bne.n	8002bfe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b80:	e03d      	b.n	8002bfe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b8a:	d121      	bne.n	8002bd0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2b03      	cmp	r3, #3
 8002b90:	d837      	bhi.n	8002c02 <DMA_CheckFifoParam+0xda>
 8002b92:	a201      	add	r2, pc, #4	; (adr r2, 8002b98 <DMA_CheckFifoParam+0x70>)
 8002b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b98:	08002ba9 	.word	0x08002ba9
 8002b9c:	08002baf 	.word	0x08002baf
 8002ba0:	08002ba9 	.word	0x08002ba9
 8002ba4:	08002bc1 	.word	0x08002bc1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	73fb      	strb	r3, [r7, #15]
      break;
 8002bac:	e030      	b.n	8002c10 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d025      	beq.n	8002c06 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bbe:	e022      	b.n	8002c06 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bc8:	d11f      	bne.n	8002c0a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002bce:	e01c      	b.n	8002c0a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d903      	bls.n	8002bde <DMA_CheckFifoParam+0xb6>
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2b03      	cmp	r3, #3
 8002bda:	d003      	beq.n	8002be4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002bdc:	e018      	b.n	8002c10 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	73fb      	strb	r3, [r7, #15]
      break;
 8002be2:	e015      	b.n	8002c10 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00e      	beq.n	8002c0e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8002bf4:	e00b      	b.n	8002c0e <DMA_CheckFifoParam+0xe6>
      break;
 8002bf6:	bf00      	nop
 8002bf8:	e00a      	b.n	8002c10 <DMA_CheckFifoParam+0xe8>
      break;
 8002bfa:	bf00      	nop
 8002bfc:	e008      	b.n	8002c10 <DMA_CheckFifoParam+0xe8>
      break;
 8002bfe:	bf00      	nop
 8002c00:	e006      	b.n	8002c10 <DMA_CheckFifoParam+0xe8>
      break;
 8002c02:	bf00      	nop
 8002c04:	e004      	b.n	8002c10 <DMA_CheckFifoParam+0xe8>
      break;
 8002c06:	bf00      	nop
 8002c08:	e002      	b.n	8002c10 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c0a:	bf00      	nop
 8002c0c:	e000      	b.n	8002c10 <DMA_CheckFifoParam+0xe8>
      break;
 8002c0e:	bf00      	nop
    }
  } 
  
  return status; 
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop

08002c20 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
 8002c2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	2b80      	cmp	r3, #128	; 0x80
 8002c38:	d106      	bne.n	8002c48 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	f001 b911 	b.w	8003e6a <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d007      	beq.n	8002c60 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d105      	bne.n	8002c6c <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2240      	movs	r2, #64	; 0x40
 8002c64:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	f001 b8ff 	b.w	8003e6a <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d102      	bne.n	8002c7c <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8002c76:	2302      	movs	r3, #2
 8002c78:	f001 b8f7 	b.w	8003e6a <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	f041 80e5 	bne.w	8003e5c <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2202      	movs	r2, #2
 8002c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002cae:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f001 f910 	bl	8003ee4 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4b8d      	ldr	r3, [pc, #564]	; (8002f00 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d960      	bls.n	8002d92 <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a8b      	ldr	r2, [pc, #556]	; (8002f04 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d057      	beq.n	8002d8a <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a8a      	ldr	r2, [pc, #552]	; (8002f08 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d050      	beq.n	8002d86 <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a88      	ldr	r2, [pc, #544]	; (8002f0c <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d049      	beq.n	8002d82 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a87      	ldr	r2, [pc, #540]	; (8002f10 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d042      	beq.n	8002d7e <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a85      	ldr	r2, [pc, #532]	; (8002f14 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d03a      	beq.n	8002d78 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a84      	ldr	r2, [pc, #528]	; (8002f18 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d032      	beq.n	8002d72 <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a82      	ldr	r2, [pc, #520]	; (8002f1c <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d02a      	beq.n	8002d6c <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a81      	ldr	r2, [pc, #516]	; (8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d022      	beq.n	8002d66 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a7f      	ldr	r2, [pc, #508]	; (8002f24 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d01a      	beq.n	8002d60 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a7e      	ldr	r2, [pc, #504]	; (8002f28 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d012      	beq.n	8002d5a <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a7c      	ldr	r2, [pc, #496]	; (8002f2c <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d00a      	beq.n	8002d54 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a7b      	ldr	r2, [pc, #492]	; (8002f30 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d102      	bne.n	8002d4e <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8002d48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d4c:	e01e      	b.n	8002d8c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002d4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002d52:	e01b      	b.n	8002d8c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002d54:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d58:	e018      	b.n	8002d8c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002d5a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d5e:	e015      	b.n	8002d8c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002d60:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d64:	e012      	b.n	8002d8c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002d66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d6a:	e00f      	b.n	8002d8c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002d6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d70:	e00c      	b.n	8002d8c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002d72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d76:	e009      	b.n	8002d8c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002d78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d7c:	e006      	b.n	8002d8c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002d7e:	2320      	movs	r3, #32
 8002d80:	e004      	b.n	8002d8c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002d82:	2320      	movs	r3, #32
 8002d84:	e002      	b.n	8002d8c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002d86:	2320      	movs	r3, #32
 8002d88:	e000      	b.n	8002d8c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002d8a:	2320      	movs	r3, #32
 8002d8c:	4a69      	ldr	r2, [pc, #420]	; (8002f34 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002d8e:	60d3      	str	r3, [r2, #12]
 8002d90:	e14f      	b.n	8003032 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	461a      	mov	r2, r3
 8002d98:	4b67      	ldr	r3, [pc, #412]	; (8002f38 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d960      	bls.n	8002e60 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a58      	ldr	r2, [pc, #352]	; (8002f04 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d057      	beq.n	8002e58 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a56      	ldr	r2, [pc, #344]	; (8002f08 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d050      	beq.n	8002e54 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a55      	ldr	r2, [pc, #340]	; (8002f0c <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d049      	beq.n	8002e50 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a53      	ldr	r2, [pc, #332]	; (8002f10 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d042      	beq.n	8002e4c <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a52      	ldr	r2, [pc, #328]	; (8002f14 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d03a      	beq.n	8002e46 <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a50      	ldr	r2, [pc, #320]	; (8002f18 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d032      	beq.n	8002e40 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a4f      	ldr	r2, [pc, #316]	; (8002f1c <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d02a      	beq.n	8002e3a <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a4d      	ldr	r2, [pc, #308]	; (8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d022      	beq.n	8002e34 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a4c      	ldr	r2, [pc, #304]	; (8002f24 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d01a      	beq.n	8002e2e <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a4a      	ldr	r2, [pc, #296]	; (8002f28 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d012      	beq.n	8002e28 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a49      	ldr	r2, [pc, #292]	; (8002f2c <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d00a      	beq.n	8002e22 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a47      	ldr	r2, [pc, #284]	; (8002f30 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d102      	bne.n	8002e1c <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8002e16:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e1a:	e01e      	b.n	8002e5a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002e1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e20:	e01b      	b.n	8002e5a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002e22:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e26:	e018      	b.n	8002e5a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002e28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e2c:	e015      	b.n	8002e5a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002e2e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e32:	e012      	b.n	8002e5a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002e34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e38:	e00f      	b.n	8002e5a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002e3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e3e:	e00c      	b.n	8002e5a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002e40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e44:	e009      	b.n	8002e5a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002e46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e4a:	e006      	b.n	8002e5a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002e4c:	2320      	movs	r3, #32
 8002e4e:	e004      	b.n	8002e5a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002e50:	2320      	movs	r3, #32
 8002e52:	e002      	b.n	8002e5a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002e54:	2320      	movs	r3, #32
 8002e56:	e000      	b.n	8002e5a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002e58:	2320      	movs	r3, #32
 8002e5a:	4a36      	ldr	r2, [pc, #216]	; (8002f34 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002e5c:	6093      	str	r3, [r2, #8]
 8002e5e:	e0e8      	b.n	8003032 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	461a      	mov	r2, r3
 8002e66:	4b35      	ldr	r3, [pc, #212]	; (8002f3c <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	f240 8082 	bls.w	8002f72 <HAL_DMAEx_MultiBufferStart_IT+0x352>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a24      	ldr	r2, [pc, #144]	; (8002f04 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d078      	beq.n	8002f6a <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a22      	ldr	r2, [pc, #136]	; (8002f08 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d071      	beq.n	8002f66 <HAL_DMAEx_MultiBufferStart_IT+0x346>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a21      	ldr	r2, [pc, #132]	; (8002f0c <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d06a      	beq.n	8002f62 <HAL_DMAEx_MultiBufferStart_IT+0x342>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a1f      	ldr	r2, [pc, #124]	; (8002f10 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d063      	beq.n	8002f5e <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a1e      	ldr	r2, [pc, #120]	; (8002f14 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d05b      	beq.n	8002f58 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a1c      	ldr	r2, [pc, #112]	; (8002f18 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d053      	beq.n	8002f52 <HAL_DMAEx_MultiBufferStart_IT+0x332>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a1b      	ldr	r2, [pc, #108]	; (8002f1c <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d04b      	beq.n	8002f4c <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a19      	ldr	r2, [pc, #100]	; (8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d043      	beq.n	8002f46 <HAL_DMAEx_MultiBufferStart_IT+0x326>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a18      	ldr	r2, [pc, #96]	; (8002f24 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d03b      	beq.n	8002f40 <HAL_DMAEx_MultiBufferStart_IT+0x320>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a16      	ldr	r2, [pc, #88]	; (8002f28 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d012      	beq.n	8002ef8 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a15      	ldr	r2, [pc, #84]	; (8002f2c <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d00a      	beq.n	8002ef2 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a13      	ldr	r2, [pc, #76]	; (8002f30 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d102      	bne.n	8002eec <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8002ee6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002eea:	e03f      	b.n	8002f6c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002eec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002ef0:	e03c      	b.n	8002f6c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002ef2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ef6:	e039      	b.n	8002f6c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002ef8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002efc:	e036      	b.n	8002f6c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002efe:	bf00      	nop
 8002f00:	40026458 	.word	0x40026458
 8002f04:	40026010 	.word	0x40026010
 8002f08:	40026410 	.word	0x40026410
 8002f0c:	40026070 	.word	0x40026070
 8002f10:	40026470 	.word	0x40026470
 8002f14:	40026028 	.word	0x40026028
 8002f18:	40026428 	.word	0x40026428
 8002f1c:	40026088 	.word	0x40026088
 8002f20:	40026488 	.word	0x40026488
 8002f24:	40026040 	.word	0x40026040
 8002f28:	40026440 	.word	0x40026440
 8002f2c:	400260a0 	.word	0x400260a0
 8002f30:	400264a0 	.word	0x400264a0
 8002f34:	40026400 	.word	0x40026400
 8002f38:	400260b8 	.word	0x400260b8
 8002f3c:	40026058 	.word	0x40026058
 8002f40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f44:	e012      	b.n	8002f6c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002f46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f4a:	e00f      	b.n	8002f6c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002f4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f50:	e00c      	b.n	8002f6c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002f52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f56:	e009      	b.n	8002f6c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002f58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f5c:	e006      	b.n	8002f6c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002f5e:	2320      	movs	r3, #32
 8002f60:	e004      	b.n	8002f6c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002f62:	2320      	movs	r3, #32
 8002f64:	e002      	b.n	8002f6c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002f66:	2320      	movs	r3, #32
 8002f68:	e000      	b.n	8002f6c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002f6a:	2320      	movs	r3, #32
 8002f6c:	4a8c      	ldr	r2, [pc, #560]	; (80031a0 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8002f6e:	60d3      	str	r3, [r2, #12]
 8002f70:	e05f      	b.n	8003032 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a8b      	ldr	r2, [pc, #556]	; (80031a4 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d057      	beq.n	800302c <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a89      	ldr	r2, [pc, #548]	; (80031a8 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d050      	beq.n	8003028 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a88      	ldr	r2, [pc, #544]	; (80031ac <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d049      	beq.n	8003024 <HAL_DMAEx_MultiBufferStart_IT+0x404>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a86      	ldr	r2, [pc, #536]	; (80031b0 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d042      	beq.n	8003020 <HAL_DMAEx_MultiBufferStart_IT+0x400>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a85      	ldr	r2, [pc, #532]	; (80031b4 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d03a      	beq.n	800301a <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a83      	ldr	r2, [pc, #524]	; (80031b8 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d032      	beq.n	8003014 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a82      	ldr	r2, [pc, #520]	; (80031bc <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d02a      	beq.n	800300e <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a80      	ldr	r2, [pc, #512]	; (80031c0 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d022      	beq.n	8003008 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a7f      	ldr	r2, [pc, #508]	; (80031c4 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d01a      	beq.n	8003002 <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a7d      	ldr	r2, [pc, #500]	; (80031c8 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d012      	beq.n	8002ffc <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a7c      	ldr	r2, [pc, #496]	; (80031cc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d00a      	beq.n	8002ff6 <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a7a      	ldr	r2, [pc, #488]	; (80031d0 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d102      	bne.n	8002ff0 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8002fea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002fee:	e01e      	b.n	800302e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002ff0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002ff4:	e01b      	b.n	800302e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002ff6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ffa:	e018      	b.n	800302e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002ffc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003000:	e015      	b.n	800302e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003002:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003006:	e012      	b.n	800302e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003008:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800300c:	e00f      	b.n	800302e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800300e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003012:	e00c      	b.n	800302e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003014:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003018:	e009      	b.n	800302e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800301a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800301e:	e006      	b.n	800302e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003020:	2320      	movs	r3, #32
 8003022:	e004      	b.n	800302e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003024:	2320      	movs	r3, #32
 8003026:	e002      	b.n	800302e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003028:	2320      	movs	r3, #32
 800302a:	e000      	b.n	800302e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800302c:	2320      	movs	r3, #32
 800302e:	4a5c      	ldr	r2, [pc, #368]	; (80031a0 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8003030:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	461a      	mov	r2, r3
 8003038:	4b66      	ldr	r3, [pc, #408]	; (80031d4 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 800303a:	429a      	cmp	r2, r3
 800303c:	d960      	bls.n	8003100 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a58      	ldr	r2, [pc, #352]	; (80031a4 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d057      	beq.n	80030f8 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a56      	ldr	r2, [pc, #344]	; (80031a8 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d050      	beq.n	80030f4 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a55      	ldr	r2, [pc, #340]	; (80031ac <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d049      	beq.n	80030f0 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a53      	ldr	r2, [pc, #332]	; (80031b0 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d042      	beq.n	80030ec <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a52      	ldr	r2, [pc, #328]	; (80031b4 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d03a      	beq.n	80030e6 <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a50      	ldr	r2, [pc, #320]	; (80031b8 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d032      	beq.n	80030e0 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a4f      	ldr	r2, [pc, #316]	; (80031bc <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d02a      	beq.n	80030da <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a4d      	ldr	r2, [pc, #308]	; (80031c0 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d022      	beq.n	80030d4 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a4c      	ldr	r2, [pc, #304]	; (80031c4 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d01a      	beq.n	80030ce <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a4a      	ldr	r2, [pc, #296]	; (80031c8 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d012      	beq.n	80030c8 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a49      	ldr	r2, [pc, #292]	; (80031cc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d00a      	beq.n	80030c2 <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a47      	ldr	r2, [pc, #284]	; (80031d0 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d102      	bne.n	80030bc <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 80030b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030ba:	e01e      	b.n	80030fa <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80030bc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80030c0:	e01b      	b.n	80030fa <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80030c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030c6:	e018      	b.n	80030fa <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80030c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030cc:	e015      	b.n	80030fa <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80030ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030d2:	e012      	b.n	80030fa <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80030d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030d8:	e00f      	b.n	80030fa <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80030da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030de:	e00c      	b.n	80030fa <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80030e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030e4:	e009      	b.n	80030fa <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80030e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030ea:	e006      	b.n	80030fa <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80030ec:	2310      	movs	r3, #16
 80030ee:	e004      	b.n	80030fa <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80030f0:	2310      	movs	r3, #16
 80030f2:	e002      	b.n	80030fa <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80030f4:	2310      	movs	r3, #16
 80030f6:	e000      	b.n	80030fa <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80030f8:	2310      	movs	r3, #16
 80030fa:	4a37      	ldr	r2, [pc, #220]	; (80031d8 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 80030fc:	60d3      	str	r3, [r2, #12]
 80030fe:	e14f      	b.n	80033a0 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	461a      	mov	r2, r3
 8003106:	4b35      	ldr	r3, [pc, #212]	; (80031dc <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8003108:	429a      	cmp	r2, r3
 800310a:	f240 8082 	bls.w	8003212 <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a24      	ldr	r2, [pc, #144]	; (80031a4 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d078      	beq.n	800320a <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a22      	ldr	r2, [pc, #136]	; (80031a8 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d071      	beq.n	8003206 <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a21      	ldr	r2, [pc, #132]	; (80031ac <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d06a      	beq.n	8003202 <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a1f      	ldr	r2, [pc, #124]	; (80031b0 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d063      	beq.n	80031fe <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a1e      	ldr	r2, [pc, #120]	; (80031b4 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d05b      	beq.n	80031f8 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a1c      	ldr	r2, [pc, #112]	; (80031b8 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d053      	beq.n	80031f2 <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a1b      	ldr	r2, [pc, #108]	; (80031bc <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d04b      	beq.n	80031ec <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a19      	ldr	r2, [pc, #100]	; (80031c0 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d043      	beq.n	80031e6 <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a18      	ldr	r2, [pc, #96]	; (80031c4 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d03b      	beq.n	80031e0 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a16      	ldr	r2, [pc, #88]	; (80031c8 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d012      	beq.n	8003198 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a15      	ldr	r2, [pc, #84]	; (80031cc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d00a      	beq.n	8003192 <HAL_DMAEx_MultiBufferStart_IT+0x572>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a13      	ldr	r2, [pc, #76]	; (80031d0 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d102      	bne.n	800318c <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 8003186:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800318a:	e03f      	b.n	800320c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800318c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003190:	e03c      	b.n	800320c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003192:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003196:	e039      	b.n	800320c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003198:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800319c:	e036      	b.n	800320c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800319e:	bf00      	nop
 80031a0:	40026000 	.word	0x40026000
 80031a4:	40026010 	.word	0x40026010
 80031a8:	40026410 	.word	0x40026410
 80031ac:	40026070 	.word	0x40026070
 80031b0:	40026470 	.word	0x40026470
 80031b4:	40026028 	.word	0x40026028
 80031b8:	40026428 	.word	0x40026428
 80031bc:	40026088 	.word	0x40026088
 80031c0:	40026488 	.word	0x40026488
 80031c4:	40026040 	.word	0x40026040
 80031c8:	40026440 	.word	0x40026440
 80031cc:	400260a0 	.word	0x400260a0
 80031d0:	400264a0 	.word	0x400264a0
 80031d4:	40026458 	.word	0x40026458
 80031d8:	40026400 	.word	0x40026400
 80031dc:	400260b8 	.word	0x400260b8
 80031e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80031e4:	e012      	b.n	800320c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80031e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031ea:	e00f      	b.n	800320c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80031ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031f0:	e00c      	b.n	800320c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80031f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031f6:	e009      	b.n	800320c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80031f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031fc:	e006      	b.n	800320c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80031fe:	2310      	movs	r3, #16
 8003200:	e004      	b.n	800320c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003202:	2310      	movs	r3, #16
 8003204:	e002      	b.n	800320c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003206:	2310      	movs	r3, #16
 8003208:	e000      	b.n	800320c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800320a:	2310      	movs	r3, #16
 800320c:	4a8c      	ldr	r2, [pc, #560]	; (8003440 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 800320e:	6093      	str	r3, [r2, #8]
 8003210:	e0c6      	b.n	80033a0 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	4b8a      	ldr	r3, [pc, #552]	; (8003444 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 800321a:	429a      	cmp	r2, r3
 800321c:	d960      	bls.n	80032e0 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a89      	ldr	r2, [pc, #548]	; (8003448 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d057      	beq.n	80032d8 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a87      	ldr	r2, [pc, #540]	; (800344c <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d050      	beq.n	80032d4 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a86      	ldr	r2, [pc, #536]	; (8003450 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d049      	beq.n	80032d0 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a84      	ldr	r2, [pc, #528]	; (8003454 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d042      	beq.n	80032cc <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a83      	ldr	r2, [pc, #524]	; (8003458 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d03a      	beq.n	80032c6 <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a81      	ldr	r2, [pc, #516]	; (800345c <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d032      	beq.n	80032c0 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a80      	ldr	r2, [pc, #512]	; (8003460 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d02a      	beq.n	80032ba <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a7e      	ldr	r2, [pc, #504]	; (8003464 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d022      	beq.n	80032b4 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a7d      	ldr	r2, [pc, #500]	; (8003468 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d01a      	beq.n	80032ae <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a7b      	ldr	r2, [pc, #492]	; (800346c <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d012      	beq.n	80032a8 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a7a      	ldr	r2, [pc, #488]	; (8003470 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d00a      	beq.n	80032a2 <HAL_DMAEx_MultiBufferStart_IT+0x682>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a78      	ldr	r2, [pc, #480]	; (8003474 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d102      	bne.n	800329c <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 8003296:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800329a:	e01e      	b.n	80032da <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800329c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80032a0:	e01b      	b.n	80032da <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80032a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80032a6:	e018      	b.n	80032da <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80032a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80032ac:	e015      	b.n	80032da <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80032ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80032b2:	e012      	b.n	80032da <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80032b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032b8:	e00f      	b.n	80032da <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80032ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032be:	e00c      	b.n	80032da <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80032c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032c4:	e009      	b.n	80032da <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80032c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032ca:	e006      	b.n	80032da <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80032cc:	2310      	movs	r3, #16
 80032ce:	e004      	b.n	80032da <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80032d0:	2310      	movs	r3, #16
 80032d2:	e002      	b.n	80032da <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80032d4:	2310      	movs	r3, #16
 80032d6:	e000      	b.n	80032da <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80032d8:	2310      	movs	r3, #16
 80032da:	4a67      	ldr	r2, [pc, #412]	; (8003478 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80032dc:	60d3      	str	r3, [r2, #12]
 80032de:	e05f      	b.n	80033a0 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a58      	ldr	r2, [pc, #352]	; (8003448 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d057      	beq.n	800339a <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a57      	ldr	r2, [pc, #348]	; (800344c <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d050      	beq.n	8003396 <HAL_DMAEx_MultiBufferStart_IT+0x776>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a55      	ldr	r2, [pc, #340]	; (8003450 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d049      	beq.n	8003392 <HAL_DMAEx_MultiBufferStart_IT+0x772>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a54      	ldr	r2, [pc, #336]	; (8003454 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d042      	beq.n	800338e <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a52      	ldr	r2, [pc, #328]	; (8003458 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d03a      	beq.n	8003388 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a51      	ldr	r2, [pc, #324]	; (800345c <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d032      	beq.n	8003382 <HAL_DMAEx_MultiBufferStart_IT+0x762>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a4f      	ldr	r2, [pc, #316]	; (8003460 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d02a      	beq.n	800337c <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a4e      	ldr	r2, [pc, #312]	; (8003464 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d022      	beq.n	8003376 <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a4c      	ldr	r2, [pc, #304]	; (8003468 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d01a      	beq.n	8003370 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a4b      	ldr	r2, [pc, #300]	; (800346c <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d012      	beq.n	800336a <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a49      	ldr	r2, [pc, #292]	; (8003470 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d00a      	beq.n	8003364 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a48      	ldr	r2, [pc, #288]	; (8003474 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d102      	bne.n	800335e <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8003358:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800335c:	e01e      	b.n	800339c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800335e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003362:	e01b      	b.n	800339c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003364:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003368:	e018      	b.n	800339c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800336a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800336e:	e015      	b.n	800339c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003370:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003374:	e012      	b.n	800339c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003376:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800337a:	e00f      	b.n	800339c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800337c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003380:	e00c      	b.n	800339c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003382:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003386:	e009      	b.n	800339c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800338c:	e006      	b.n	800339c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800338e:	2310      	movs	r3, #16
 8003390:	e004      	b.n	800339c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003392:	2310      	movs	r3, #16
 8003394:	e002      	b.n	800339c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003396:	2310      	movs	r3, #16
 8003398:	e000      	b.n	800339c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800339a:	2310      	movs	r3, #16
 800339c:	4a36      	ldr	r2, [pc, #216]	; (8003478 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 800339e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	461a      	mov	r2, r3
 80033a6:	4b35      	ldr	r3, [pc, #212]	; (800347c <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80033a8:	429a      	cmp	r2, r3
 80033aa:	f240 8082 	bls.w	80034b2 <HAL_DMAEx_MultiBufferStart_IT+0x892>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a25      	ldr	r2, [pc, #148]	; (8003448 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d078      	beq.n	80034aa <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a23      	ldr	r2, [pc, #140]	; (800344c <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d071      	beq.n	80034a6 <HAL_DMAEx_MultiBufferStart_IT+0x886>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a22      	ldr	r2, [pc, #136]	; (8003450 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d06a      	beq.n	80034a2 <HAL_DMAEx_MultiBufferStart_IT+0x882>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a20      	ldr	r2, [pc, #128]	; (8003454 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d063      	beq.n	800349e <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a1f      	ldr	r2, [pc, #124]	; (8003458 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d05b      	beq.n	8003498 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a1d      	ldr	r2, [pc, #116]	; (800345c <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d053      	beq.n	8003492 <HAL_DMAEx_MultiBufferStart_IT+0x872>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a1c      	ldr	r2, [pc, #112]	; (8003460 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d04b      	beq.n	800348c <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a1a      	ldr	r2, [pc, #104]	; (8003464 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d043      	beq.n	8003486 <HAL_DMAEx_MultiBufferStart_IT+0x866>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a19      	ldr	r2, [pc, #100]	; (8003468 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d03b      	beq.n	8003480 <HAL_DMAEx_MultiBufferStart_IT+0x860>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a17      	ldr	r2, [pc, #92]	; (800346c <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d012      	beq.n	8003438 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a16      	ldr	r2, [pc, #88]	; (8003470 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d00a      	beq.n	8003432 <HAL_DMAEx_MultiBufferStart_IT+0x812>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a14      	ldr	r2, [pc, #80]	; (8003474 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d102      	bne.n	800342c <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 8003426:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800342a:	e03f      	b.n	80034ac <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800342c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003430:	e03c      	b.n	80034ac <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003432:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003436:	e039      	b.n	80034ac <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003438:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800343c:	e036      	b.n	80034ac <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800343e:	bf00      	nop
 8003440:	40026400 	.word	0x40026400
 8003444:	40026058 	.word	0x40026058
 8003448:	40026010 	.word	0x40026010
 800344c:	40026410 	.word	0x40026410
 8003450:	40026070 	.word	0x40026070
 8003454:	40026470 	.word	0x40026470
 8003458:	40026028 	.word	0x40026028
 800345c:	40026428 	.word	0x40026428
 8003460:	40026088 	.word	0x40026088
 8003464:	40026488 	.word	0x40026488
 8003468:	40026040 	.word	0x40026040
 800346c:	40026440 	.word	0x40026440
 8003470:	400260a0 	.word	0x400260a0
 8003474:	400264a0 	.word	0x400264a0
 8003478:	40026000 	.word	0x40026000
 800347c:	40026458 	.word	0x40026458
 8003480:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003484:	e012      	b.n	80034ac <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003486:	f44f 7300 	mov.w	r3, #512	; 0x200
 800348a:	e00f      	b.n	80034ac <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800348c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003490:	e00c      	b.n	80034ac <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003492:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003496:	e009      	b.n	80034ac <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003498:	f44f 7300 	mov.w	r3, #512	; 0x200
 800349c:	e006      	b.n	80034ac <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800349e:	2308      	movs	r3, #8
 80034a0:	e004      	b.n	80034ac <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80034a2:	2308      	movs	r3, #8
 80034a4:	e002      	b.n	80034ac <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80034a6:	2308      	movs	r3, #8
 80034a8:	e000      	b.n	80034ac <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80034aa:	2308      	movs	r3, #8
 80034ac:	4a8c      	ldr	r2, [pc, #560]	; (80036e0 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 80034ae:	60d3      	str	r3, [r2, #12]
 80034b0:	e14e      	b.n	8003750 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	461a      	mov	r2, r3
 80034b8:	4b8a      	ldr	r3, [pc, #552]	; (80036e4 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d960      	bls.n	8003580 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a89      	ldr	r2, [pc, #548]	; (80036e8 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d057      	beq.n	8003578 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a87      	ldr	r2, [pc, #540]	; (80036ec <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d050      	beq.n	8003574 <HAL_DMAEx_MultiBufferStart_IT+0x954>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a86      	ldr	r2, [pc, #536]	; (80036f0 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d049      	beq.n	8003570 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a84      	ldr	r2, [pc, #528]	; (80036f4 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d042      	beq.n	800356c <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a83      	ldr	r2, [pc, #524]	; (80036f8 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d03a      	beq.n	8003566 <HAL_DMAEx_MultiBufferStart_IT+0x946>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a81      	ldr	r2, [pc, #516]	; (80036fc <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d032      	beq.n	8003560 <HAL_DMAEx_MultiBufferStart_IT+0x940>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a80      	ldr	r2, [pc, #512]	; (8003700 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d02a      	beq.n	800355a <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a7e      	ldr	r2, [pc, #504]	; (8003704 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d022      	beq.n	8003554 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a7d      	ldr	r2, [pc, #500]	; (8003708 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d01a      	beq.n	800354e <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a7b      	ldr	r2, [pc, #492]	; (800370c <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d012      	beq.n	8003548 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a7a      	ldr	r2, [pc, #488]	; (8003710 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d00a      	beq.n	8003542 <HAL_DMAEx_MultiBufferStart_IT+0x922>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a78      	ldr	r2, [pc, #480]	; (8003714 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d102      	bne.n	800353c <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 8003536:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800353a:	e01e      	b.n	800357a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800353c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003540:	e01b      	b.n	800357a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003542:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003546:	e018      	b.n	800357a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003548:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800354c:	e015      	b.n	800357a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800354e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003552:	e012      	b.n	800357a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003554:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003558:	e00f      	b.n	800357a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800355a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800355e:	e00c      	b.n	800357a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003560:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003564:	e009      	b.n	800357a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003566:	f44f 7300 	mov.w	r3, #512	; 0x200
 800356a:	e006      	b.n	800357a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800356c:	2308      	movs	r3, #8
 800356e:	e004      	b.n	800357a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003570:	2308      	movs	r3, #8
 8003572:	e002      	b.n	800357a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003574:	2308      	movs	r3, #8
 8003576:	e000      	b.n	800357a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003578:	2308      	movs	r3, #8
 800357a:	4a59      	ldr	r2, [pc, #356]	; (80036e0 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 800357c:	6093      	str	r3, [r2, #8]
 800357e:	e0e7      	b.n	8003750 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	461a      	mov	r2, r3
 8003586:	4b64      	ldr	r3, [pc, #400]	; (8003718 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8003588:	429a      	cmp	r2, r3
 800358a:	d960      	bls.n	800364e <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a55      	ldr	r2, [pc, #340]	; (80036e8 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d057      	beq.n	8003646 <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a54      	ldr	r2, [pc, #336]	; (80036ec <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d050      	beq.n	8003642 <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a52      	ldr	r2, [pc, #328]	; (80036f0 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d049      	beq.n	800363e <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a51      	ldr	r2, [pc, #324]	; (80036f4 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d042      	beq.n	800363a <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a4f      	ldr	r2, [pc, #316]	; (80036f8 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d03a      	beq.n	8003634 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a4e      	ldr	r2, [pc, #312]	; (80036fc <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d032      	beq.n	800362e <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a4c      	ldr	r2, [pc, #304]	; (8003700 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d02a      	beq.n	8003628 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a4b      	ldr	r2, [pc, #300]	; (8003704 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d022      	beq.n	8003622 <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a49      	ldr	r2, [pc, #292]	; (8003708 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d01a      	beq.n	800361c <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a48      	ldr	r2, [pc, #288]	; (800370c <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d012      	beq.n	8003616 <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a46      	ldr	r2, [pc, #280]	; (8003710 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d00a      	beq.n	8003610 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a45      	ldr	r2, [pc, #276]	; (8003714 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d102      	bne.n	800360a <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 8003604:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003608:	e01e      	b.n	8003648 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800360a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800360e:	e01b      	b.n	8003648 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003610:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003614:	e018      	b.n	8003648 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003616:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800361a:	e015      	b.n	8003648 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800361c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003620:	e012      	b.n	8003648 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003622:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003626:	e00f      	b.n	8003648 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003628:	f44f 7300 	mov.w	r3, #512	; 0x200
 800362c:	e00c      	b.n	8003648 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800362e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003632:	e009      	b.n	8003648 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003634:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003638:	e006      	b.n	8003648 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800363a:	2308      	movs	r3, #8
 800363c:	e004      	b.n	8003648 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800363e:	2308      	movs	r3, #8
 8003640:	e002      	b.n	8003648 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003642:	2308      	movs	r3, #8
 8003644:	e000      	b.n	8003648 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003646:	2308      	movs	r3, #8
 8003648:	4a34      	ldr	r2, [pc, #208]	; (800371c <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 800364a:	60d3      	str	r3, [r2, #12]
 800364c:	e080      	b.n	8003750 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a25      	ldr	r2, [pc, #148]	; (80036e8 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d078      	beq.n	800374a <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a23      	ldr	r2, [pc, #140]	; (80036ec <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d071      	beq.n	8003746 <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a22      	ldr	r2, [pc, #136]	; (80036f0 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d06a      	beq.n	8003742 <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a20      	ldr	r2, [pc, #128]	; (80036f4 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d063      	beq.n	800373e <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a1f      	ldr	r2, [pc, #124]	; (80036f8 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d05b      	beq.n	8003738 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a1d      	ldr	r2, [pc, #116]	; (80036fc <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d053      	beq.n	8003732 <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a1c      	ldr	r2, [pc, #112]	; (8003700 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d04b      	beq.n	800372c <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a1a      	ldr	r2, [pc, #104]	; (8003704 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d043      	beq.n	8003726 <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a19      	ldr	r2, [pc, #100]	; (8003708 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d03b      	beq.n	8003720 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a17      	ldr	r2, [pc, #92]	; (800370c <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d012      	beq.n	80036d8 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a16      	ldr	r2, [pc, #88]	; (8003710 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d00a      	beq.n	80036d2 <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a14      	ldr	r2, [pc, #80]	; (8003714 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d102      	bne.n	80036cc <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 80036c6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80036ca:	e03f      	b.n	800374c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80036cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036d0:	e03c      	b.n	800374c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80036d2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80036d6:	e039      	b.n	800374c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80036d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80036dc:	e036      	b.n	800374c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80036de:	bf00      	nop
 80036e0:	40026400 	.word	0x40026400
 80036e4:	400260b8 	.word	0x400260b8
 80036e8:	40026010 	.word	0x40026010
 80036ec:	40026410 	.word	0x40026410
 80036f0:	40026070 	.word	0x40026070
 80036f4:	40026470 	.word	0x40026470
 80036f8:	40026028 	.word	0x40026028
 80036fc:	40026428 	.word	0x40026428
 8003700:	40026088 	.word	0x40026088
 8003704:	40026488 	.word	0x40026488
 8003708:	40026040 	.word	0x40026040
 800370c:	40026440 	.word	0x40026440
 8003710:	400260a0 	.word	0x400260a0
 8003714:	400264a0 	.word	0x400264a0
 8003718:	40026058 	.word	0x40026058
 800371c:	40026000 	.word	0x40026000
 8003720:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003724:	e012      	b.n	800374c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003726:	f44f 7300 	mov.w	r3, #512	; 0x200
 800372a:	e00f      	b.n	800374c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800372c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003730:	e00c      	b.n	800374c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003732:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003736:	e009      	b.n	800374c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003738:	f44f 7300 	mov.w	r3, #512	; 0x200
 800373c:	e006      	b.n	800374c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800373e:	2308      	movs	r3, #8
 8003740:	e004      	b.n	800374c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003742:	2308      	movs	r3, #8
 8003744:	e002      	b.n	800374c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003746:	2308      	movs	r3, #8
 8003748:	e000      	b.n	800374c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800374a:	2308      	movs	r3, #8
 800374c:	4a8a      	ldr	r2, [pc, #552]	; (8003978 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 800374e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	461a      	mov	r2, r3
 8003756:	4b89      	ldr	r3, [pc, #548]	; (800397c <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8003758:	429a      	cmp	r2, r3
 800375a:	d960      	bls.n	800381e <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a87      	ldr	r2, [pc, #540]	; (8003980 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d057      	beq.n	8003816 <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a86      	ldr	r2, [pc, #536]	; (8003984 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d050      	beq.n	8003812 <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a84      	ldr	r2, [pc, #528]	; (8003988 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d049      	beq.n	800380e <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a83      	ldr	r2, [pc, #524]	; (800398c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d042      	beq.n	800380a <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a81      	ldr	r2, [pc, #516]	; (8003990 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d03a      	beq.n	8003804 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a80      	ldr	r2, [pc, #512]	; (8003994 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d032      	beq.n	80037fe <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a7e      	ldr	r2, [pc, #504]	; (8003998 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d02a      	beq.n	80037f8 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a7d      	ldr	r2, [pc, #500]	; (800399c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d022      	beq.n	80037f2 <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a7b      	ldr	r2, [pc, #492]	; (80039a0 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d01a      	beq.n	80037ec <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a7a      	ldr	r2, [pc, #488]	; (80039a4 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d012      	beq.n	80037e6 <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a78      	ldr	r2, [pc, #480]	; (80039a8 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d00a      	beq.n	80037e0 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a77      	ldr	r2, [pc, #476]	; (80039ac <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d102      	bne.n	80037da <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 80037d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037d8:	e01e      	b.n	8003818 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80037da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037de:	e01b      	b.n	8003818 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80037e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037e4:	e018      	b.n	8003818 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80037e6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037ea:	e015      	b.n	8003818 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80037ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037f0:	e012      	b.n	8003818 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80037f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037f6:	e00f      	b.n	8003818 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80037f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037fc:	e00c      	b.n	8003818 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80037fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003802:	e009      	b.n	8003818 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003804:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003808:	e006      	b.n	8003818 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800380a:	2304      	movs	r3, #4
 800380c:	e004      	b.n	8003818 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800380e:	2304      	movs	r3, #4
 8003810:	e002      	b.n	8003818 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003812:	2304      	movs	r3, #4
 8003814:	e000      	b.n	8003818 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003816:	2304      	movs	r3, #4
 8003818:	4a65      	ldr	r2, [pc, #404]	; (80039b0 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 800381a:	60d3      	str	r3, [r2, #12]
 800381c:	e150      	b.n	8003ac0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	461a      	mov	r2, r3
 8003824:	4b63      	ldr	r3, [pc, #396]	; (80039b4 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8003826:	429a      	cmp	r2, r3
 8003828:	d960      	bls.n	80038ec <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a54      	ldr	r2, [pc, #336]	; (8003980 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d057      	beq.n	80038e4 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a52      	ldr	r2, [pc, #328]	; (8003984 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d050      	beq.n	80038e0 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a51      	ldr	r2, [pc, #324]	; (8003988 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d049      	beq.n	80038dc <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a4f      	ldr	r2, [pc, #316]	; (800398c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d042      	beq.n	80038d8 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a4e      	ldr	r2, [pc, #312]	; (8003990 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d03a      	beq.n	80038d2 <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a4c      	ldr	r2, [pc, #304]	; (8003994 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d032      	beq.n	80038cc <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a4b      	ldr	r2, [pc, #300]	; (8003998 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d02a      	beq.n	80038c6 <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a49      	ldr	r2, [pc, #292]	; (800399c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d022      	beq.n	80038c0 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a48      	ldr	r2, [pc, #288]	; (80039a0 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d01a      	beq.n	80038ba <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a46      	ldr	r2, [pc, #280]	; (80039a4 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d012      	beq.n	80038b4 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a45      	ldr	r2, [pc, #276]	; (80039a8 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d00a      	beq.n	80038ae <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a43      	ldr	r2, [pc, #268]	; (80039ac <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d102      	bne.n	80038a8 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 80038a2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038a6:	e01e      	b.n	80038e6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80038a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038ac:	e01b      	b.n	80038e6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80038ae:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038b2:	e018      	b.n	80038e6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80038b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038b8:	e015      	b.n	80038e6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80038ba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038be:	e012      	b.n	80038e6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80038c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038c4:	e00f      	b.n	80038e6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80038c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038ca:	e00c      	b.n	80038e6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80038cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038d0:	e009      	b.n	80038e6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80038d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038d6:	e006      	b.n	80038e6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80038d8:	2304      	movs	r3, #4
 80038da:	e004      	b.n	80038e6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80038dc:	2304      	movs	r3, #4
 80038de:	e002      	b.n	80038e6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80038e0:	2304      	movs	r3, #4
 80038e2:	e000      	b.n	80038e6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80038e4:	2304      	movs	r3, #4
 80038e6:	4a32      	ldr	r2, [pc, #200]	; (80039b0 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 80038e8:	6093      	str	r3, [r2, #8]
 80038ea:	e0e9      	b.n	8003ac0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	461a      	mov	r2, r3
 80038f2:	4b31      	ldr	r3, [pc, #196]	; (80039b8 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 80038f4:	429a      	cmp	r2, r3
 80038f6:	f240 8083 	bls.w	8003a00 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a20      	ldr	r2, [pc, #128]	; (8003980 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d079      	beq.n	80039f8 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a1e      	ldr	r2, [pc, #120]	; (8003984 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d072      	beq.n	80039f4 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a1d      	ldr	r2, [pc, #116]	; (8003988 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d06b      	beq.n	80039f0 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a1b      	ldr	r2, [pc, #108]	; (800398c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d064      	beq.n	80039ec <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a1a      	ldr	r2, [pc, #104]	; (8003990 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d05c      	beq.n	80039e6 <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a18      	ldr	r2, [pc, #96]	; (8003994 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d054      	beq.n	80039e0 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a17      	ldr	r2, [pc, #92]	; (8003998 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d04c      	beq.n	80039da <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a15      	ldr	r2, [pc, #84]	; (800399c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d044      	beq.n	80039d4 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a14      	ldr	r2, [pc, #80]	; (80039a0 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d03c      	beq.n	80039ce <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a12      	ldr	r2, [pc, #72]	; (80039a4 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d034      	beq.n	80039c8 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a11      	ldr	r2, [pc, #68]	; (80039a8 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d02c      	beq.n	80039c2 <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a0f      	ldr	r2, [pc, #60]	; (80039ac <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d124      	bne.n	80039bc <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 8003972:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003976:	e040      	b.n	80039fa <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003978:	40026000 	.word	0x40026000
 800397c:	40026458 	.word	0x40026458
 8003980:	40026010 	.word	0x40026010
 8003984:	40026410 	.word	0x40026410
 8003988:	40026070 	.word	0x40026070
 800398c:	40026470 	.word	0x40026470
 8003990:	40026028 	.word	0x40026028
 8003994:	40026428 	.word	0x40026428
 8003998:	40026088 	.word	0x40026088
 800399c:	40026488 	.word	0x40026488
 80039a0:	40026040 	.word	0x40026040
 80039a4:	40026440 	.word	0x40026440
 80039a8:	400260a0 	.word	0x400260a0
 80039ac:	400264a0 	.word	0x400264a0
 80039b0:	40026400 	.word	0x40026400
 80039b4:	400260b8 	.word	0x400260b8
 80039b8:	40026058 	.word	0x40026058
 80039bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039c0:	e01b      	b.n	80039fa <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80039c2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80039c6:	e018      	b.n	80039fa <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80039c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80039cc:	e015      	b.n	80039fa <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80039ce:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80039d2:	e012      	b.n	80039fa <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80039d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039d8:	e00f      	b.n	80039fa <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80039da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039de:	e00c      	b.n	80039fa <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80039e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039e4:	e009      	b.n	80039fa <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80039e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039ea:	e006      	b.n	80039fa <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80039ec:	2304      	movs	r3, #4
 80039ee:	e004      	b.n	80039fa <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80039f0:	2304      	movs	r3, #4
 80039f2:	e002      	b.n	80039fa <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80039f4:	2304      	movs	r3, #4
 80039f6:	e000      	b.n	80039fa <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80039f8:	2304      	movs	r3, #4
 80039fa:	4a8b      	ldr	r2, [pc, #556]	; (8003c28 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 80039fc:	60d3      	str	r3, [r2, #12]
 80039fe:	e05f      	b.n	8003ac0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a89      	ldr	r2, [pc, #548]	; (8003c2c <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d057      	beq.n	8003aba <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a88      	ldr	r2, [pc, #544]	; (8003c30 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d050      	beq.n	8003ab6 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a86      	ldr	r2, [pc, #536]	; (8003c34 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d049      	beq.n	8003ab2 <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a85      	ldr	r2, [pc, #532]	; (8003c38 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d042      	beq.n	8003aae <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a83      	ldr	r2, [pc, #524]	; (8003c3c <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d03a      	beq.n	8003aa8 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a82      	ldr	r2, [pc, #520]	; (8003c40 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d032      	beq.n	8003aa2 <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a80      	ldr	r2, [pc, #512]	; (8003c44 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d02a      	beq.n	8003a9c <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a7f      	ldr	r2, [pc, #508]	; (8003c48 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d022      	beq.n	8003a96 <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a7d      	ldr	r2, [pc, #500]	; (8003c4c <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d01a      	beq.n	8003a90 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a7c      	ldr	r2, [pc, #496]	; (8003c50 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d012      	beq.n	8003a8a <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a7a      	ldr	r2, [pc, #488]	; (8003c54 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d00a      	beq.n	8003a84 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a79      	ldr	r2, [pc, #484]	; (8003c58 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d102      	bne.n	8003a7e <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 8003a78:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a7c:	e01e      	b.n	8003abc <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003a7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a82:	e01b      	b.n	8003abc <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003a84:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a88:	e018      	b.n	8003abc <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003a8a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a8e:	e015      	b.n	8003abc <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003a90:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a94:	e012      	b.n	8003abc <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003a96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a9a:	e00f      	b.n	8003abc <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003a9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003aa0:	e00c      	b.n	8003abc <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003aa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003aa6:	e009      	b.n	8003abc <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003aa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003aac:	e006      	b.n	8003abc <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003aae:	2304      	movs	r3, #4
 8003ab0:	e004      	b.n	8003abc <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003ab2:	2304      	movs	r3, #4
 8003ab4:	e002      	b.n	8003abc <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003ab6:	2304      	movs	r3, #4
 8003ab8:	e000      	b.n	8003abc <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003aba:	2304      	movs	r3, #4
 8003abc:	4a5a      	ldr	r2, [pc, #360]	; (8003c28 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8003abe:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	4b65      	ldr	r3, [pc, #404]	; (8003c5c <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d95c      	bls.n	8003b86 <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a56      	ldr	r2, [pc, #344]	; (8003c2c <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d053      	beq.n	8003b7e <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a55      	ldr	r2, [pc, #340]	; (8003c30 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d04c      	beq.n	8003b7a <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a53      	ldr	r2, [pc, #332]	; (8003c34 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d045      	beq.n	8003b76 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a52      	ldr	r2, [pc, #328]	; (8003c38 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d03e      	beq.n	8003b72 <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a50      	ldr	r2, [pc, #320]	; (8003c3c <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d037      	beq.n	8003b6e <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a4f      	ldr	r2, [pc, #316]	; (8003c40 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d030      	beq.n	8003b6a <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a4d      	ldr	r2, [pc, #308]	; (8003c44 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d029      	beq.n	8003b66 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a4c      	ldr	r2, [pc, #304]	; (8003c48 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d022      	beq.n	8003b62 <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a4a      	ldr	r2, [pc, #296]	; (8003c4c <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d01a      	beq.n	8003b5c <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a49      	ldr	r2, [pc, #292]	; (8003c50 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d012      	beq.n	8003b56 <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a47      	ldr	r2, [pc, #284]	; (8003c54 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d00a      	beq.n	8003b50 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a46      	ldr	r2, [pc, #280]	; (8003c58 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d102      	bne.n	8003b4a <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8003b44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b48:	e01a      	b.n	8003b80 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003b4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b4e:	e017      	b.n	8003b80 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003b50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b54:	e014      	b.n	8003b80 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003b56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b5a:	e011      	b.n	8003b80 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003b5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b60:	e00e      	b.n	8003b80 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003b62:	2340      	movs	r3, #64	; 0x40
 8003b64:	e00c      	b.n	8003b80 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003b66:	2340      	movs	r3, #64	; 0x40
 8003b68:	e00a      	b.n	8003b80 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003b6a:	2340      	movs	r3, #64	; 0x40
 8003b6c:	e008      	b.n	8003b80 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003b6e:	2340      	movs	r3, #64	; 0x40
 8003b70:	e006      	b.n	8003b80 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003b72:	2301      	movs	r3, #1
 8003b74:	e004      	b.n	8003b80 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003b76:	2301      	movs	r3, #1
 8003b78:	e002      	b.n	8003b80 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003b7e:	2301      	movs	r3, #1
 8003b80:	4a37      	ldr	r2, [pc, #220]	; (8003c60 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003b82:	60d3      	str	r3, [r2, #12]
 8003b84:	e141      	b.n	8003e0a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	4b35      	ldr	r3, [pc, #212]	; (8003c64 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d97c      	bls.n	8003c8c <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a25      	ldr	r2, [pc, #148]	; (8003c2c <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d073      	beq.n	8003c84 <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a23      	ldr	r2, [pc, #140]	; (8003c30 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d06c      	beq.n	8003c80 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a22      	ldr	r2, [pc, #136]	; (8003c34 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d065      	beq.n	8003c7c <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a20      	ldr	r2, [pc, #128]	; (8003c38 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d05e      	beq.n	8003c78 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a1f      	ldr	r2, [pc, #124]	; (8003c3c <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d057      	beq.n	8003c74 <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a1d      	ldr	r2, [pc, #116]	; (8003c40 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d050      	beq.n	8003c70 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a1c      	ldr	r2, [pc, #112]	; (8003c44 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d049      	beq.n	8003c6c <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a1a      	ldr	r2, [pc, #104]	; (8003c48 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d042      	beq.n	8003c68 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a19      	ldr	r2, [pc, #100]	; (8003c4c <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d01a      	beq.n	8003c22 <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a17      	ldr	r2, [pc, #92]	; (8003c50 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d012      	beq.n	8003c1c <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a16      	ldr	r2, [pc, #88]	; (8003c54 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d00a      	beq.n	8003c16 <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a14      	ldr	r2, [pc, #80]	; (8003c58 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d102      	bne.n	8003c10 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 8003c0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c0e:	e03a      	b.n	8003c86 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003c10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c14:	e037      	b.n	8003c86 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003c16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c1a:	e034      	b.n	8003c86 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003c1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c20:	e031      	b.n	8003c86 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003c22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c26:	e02e      	b.n	8003c86 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003c28:	40026000 	.word	0x40026000
 8003c2c:	40026010 	.word	0x40026010
 8003c30:	40026410 	.word	0x40026410
 8003c34:	40026070 	.word	0x40026070
 8003c38:	40026470 	.word	0x40026470
 8003c3c:	40026028 	.word	0x40026028
 8003c40:	40026428 	.word	0x40026428
 8003c44:	40026088 	.word	0x40026088
 8003c48:	40026488 	.word	0x40026488
 8003c4c:	40026040 	.word	0x40026040
 8003c50:	40026440 	.word	0x40026440
 8003c54:	400260a0 	.word	0x400260a0
 8003c58:	400264a0 	.word	0x400264a0
 8003c5c:	40026458 	.word	0x40026458
 8003c60:	40026400 	.word	0x40026400
 8003c64:	400260b8 	.word	0x400260b8
 8003c68:	2340      	movs	r3, #64	; 0x40
 8003c6a:	e00c      	b.n	8003c86 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003c6c:	2340      	movs	r3, #64	; 0x40
 8003c6e:	e00a      	b.n	8003c86 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003c70:	2340      	movs	r3, #64	; 0x40
 8003c72:	e008      	b.n	8003c86 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003c74:	2340      	movs	r3, #64	; 0x40
 8003c76:	e006      	b.n	8003c86 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e004      	b.n	8003c86 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e002      	b.n	8003c86 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003c80:	2301      	movs	r3, #1
 8003c82:	e000      	b.n	8003c86 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003c84:	2301      	movs	r3, #1
 8003c86:	4a7b      	ldr	r2, [pc, #492]	; (8003e74 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8003c88:	6093      	str	r3, [r2, #8]
 8003c8a:	e0be      	b.n	8003e0a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	461a      	mov	r2, r3
 8003c92:	4b79      	ldr	r3, [pc, #484]	; (8003e78 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d95c      	bls.n	8003d52 <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a77      	ldr	r2, [pc, #476]	; (8003e7c <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d053      	beq.n	8003d4a <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a76      	ldr	r2, [pc, #472]	; (8003e80 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d04c      	beq.n	8003d46 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a74      	ldr	r2, [pc, #464]	; (8003e84 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d045      	beq.n	8003d42 <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a73      	ldr	r2, [pc, #460]	; (8003e88 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d03e      	beq.n	8003d3e <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a71      	ldr	r2, [pc, #452]	; (8003e8c <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d037      	beq.n	8003d3a <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a70      	ldr	r2, [pc, #448]	; (8003e90 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d030      	beq.n	8003d36 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a6e      	ldr	r2, [pc, #440]	; (8003e94 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d029      	beq.n	8003d32 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a6d      	ldr	r2, [pc, #436]	; (8003e98 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d022      	beq.n	8003d2e <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a6b      	ldr	r2, [pc, #428]	; (8003e9c <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d01a      	beq.n	8003d28 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a6a      	ldr	r2, [pc, #424]	; (8003ea0 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d012      	beq.n	8003d22 <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a68      	ldr	r2, [pc, #416]	; (8003ea4 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d00a      	beq.n	8003d1c <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a67      	ldr	r2, [pc, #412]	; (8003ea8 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d102      	bne.n	8003d16 <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 8003d10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d14:	e01a      	b.n	8003d4c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003d16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d1a:	e017      	b.n	8003d4c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003d1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d20:	e014      	b.n	8003d4c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003d22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d26:	e011      	b.n	8003d4c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003d28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d2c:	e00e      	b.n	8003d4c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003d2e:	2340      	movs	r3, #64	; 0x40
 8003d30:	e00c      	b.n	8003d4c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003d32:	2340      	movs	r3, #64	; 0x40
 8003d34:	e00a      	b.n	8003d4c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003d36:	2340      	movs	r3, #64	; 0x40
 8003d38:	e008      	b.n	8003d4c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003d3a:	2340      	movs	r3, #64	; 0x40
 8003d3c:	e006      	b.n	8003d4c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e004      	b.n	8003d4c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003d42:	2301      	movs	r3, #1
 8003d44:	e002      	b.n	8003d4c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003d46:	2301      	movs	r3, #1
 8003d48:	e000      	b.n	8003d4c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	4a57      	ldr	r2, [pc, #348]	; (8003eac <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003d4e:	60d3      	str	r3, [r2, #12]
 8003d50:	e05b      	b.n	8003e0a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a49      	ldr	r2, [pc, #292]	; (8003e7c <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d053      	beq.n	8003e04 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a47      	ldr	r2, [pc, #284]	; (8003e80 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d04c      	beq.n	8003e00 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a46      	ldr	r2, [pc, #280]	; (8003e84 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d045      	beq.n	8003dfc <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a44      	ldr	r2, [pc, #272]	; (8003e88 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d03e      	beq.n	8003df8 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a43      	ldr	r2, [pc, #268]	; (8003e8c <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d037      	beq.n	8003df4 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a41      	ldr	r2, [pc, #260]	; (8003e90 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d030      	beq.n	8003df0 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a40      	ldr	r2, [pc, #256]	; (8003e94 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d029      	beq.n	8003dec <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a3e      	ldr	r2, [pc, #248]	; (8003e98 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d022      	beq.n	8003de8 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a3d      	ldr	r2, [pc, #244]	; (8003e9c <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d01a      	beq.n	8003de2 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a3b      	ldr	r2, [pc, #236]	; (8003ea0 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d012      	beq.n	8003ddc <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a3a      	ldr	r2, [pc, #232]	; (8003ea4 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d00a      	beq.n	8003dd6 <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a38      	ldr	r2, [pc, #224]	; (8003ea8 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d102      	bne.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 8003dca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003dce:	e01a      	b.n	8003e06 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003dd0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003dd4:	e017      	b.n	8003e06 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003dd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003dda:	e014      	b.n	8003e06 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003ddc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003de0:	e011      	b.n	8003e06 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003de2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003de6:	e00e      	b.n	8003e06 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003de8:	2340      	movs	r3, #64	; 0x40
 8003dea:	e00c      	b.n	8003e06 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003dec:	2340      	movs	r3, #64	; 0x40
 8003dee:	e00a      	b.n	8003e06 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003df0:	2340      	movs	r3, #64	; 0x40
 8003df2:	e008      	b.n	8003e06 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003df4:	2340      	movs	r3, #64	; 0x40
 8003df6:	e006      	b.n	8003e06 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e004      	b.n	8003e06 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e002      	b.n	8003e06 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003e00:	2301      	movs	r3, #1
 8003e02:	e000      	b.n	8003e06 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003e04:	2301      	movs	r3, #1
 8003e06:	4a29      	ldr	r2, [pc, #164]	; (8003eac <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003e08:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f042 0216 	orr.w	r2, r2, #22
 8003e18:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	695a      	ldr	r2, [r3, #20]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e28:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d103      	bne.n	8003e3a <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d007      	beq.n	8003e4a <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f042 0208 	orr.w	r2, r2, #8
 8003e48:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f042 0201 	orr.w	r2, r2, #1
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	e005      	b.n	8003e68 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e64:	2302      	movs	r3, #2
 8003e66:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8003e68:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3718      	adds	r7, #24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	40026400 	.word	0x40026400
 8003e78:	40026058 	.word	0x40026058
 8003e7c:	40026010 	.word	0x40026010
 8003e80:	40026410 	.word	0x40026410
 8003e84:	40026070 	.word	0x40026070
 8003e88:	40026470 	.word	0x40026470
 8003e8c:	40026028 	.word	0x40026028
 8003e90:	40026428 	.word	0x40026428
 8003e94:	40026088 	.word	0x40026088
 8003e98:	40026488 	.word	0x40026488
 8003e9c:	40026040 	.word	0x40026040
 8003ea0:	40026440 	.word	0x40026440
 8003ea4:	400260a0 	.word	0x400260a0
 8003ea8:	400264a0 	.word	0x400264a0
 8003eac:	40026000 	.word	0x40026000

08003eb0 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8003ebe:	79fb      	ldrb	r3, [r7, #7]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d104      	bne.n	8003ece <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	60da      	str	r2, [r3, #12]
 8003ecc:	e003      	b.n	8003ed6 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
 8003ef0:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	2b40      	cmp	r3, #64	; 0x40
 8003f00:	d108      	bne.n	8003f14 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f12:	e007      	b.n	8003f24 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	60da      	str	r2, [r3, #12]
}
 8003f24:	bf00      	nop
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b089      	sub	sp, #36	; 0x24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f42:	2300      	movs	r3, #0
 8003f44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f46:	2300      	movs	r3, #0
 8003f48:	61fb      	str	r3, [r7, #28]
 8003f4a:	e16b      	b.n	8004224 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	f040 815a 	bne.w	800421e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f003 0303 	and.w	r3, r3, #3
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d005      	beq.n	8003f82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d130      	bne.n	8003fe4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	2203      	movs	r2, #3
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	43db      	mvns	r3, r3
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	4013      	ands	r3, r2
 8003f98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fb8:	2201      	movs	r2, #1
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	091b      	lsrs	r3, r3, #4
 8003fce:	f003 0201 	and.w	r2, r3, #1
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f003 0303 	and.w	r3, r3, #3
 8003fec:	2b03      	cmp	r3, #3
 8003fee:	d017      	beq.n	8004020 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	2203      	movs	r2, #3
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	43db      	mvns	r3, r3
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	4013      	ands	r3, r2
 8004006:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	fa02 f303 	lsl.w	r3, r2, r3
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	4313      	orrs	r3, r2
 8004018:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f003 0303 	and.w	r3, r3, #3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d123      	bne.n	8004074 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	08da      	lsrs	r2, r3, #3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3208      	adds	r2, #8
 8004034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004038:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	f003 0307 	and.w	r3, r3, #7
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	220f      	movs	r2, #15
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	43db      	mvns	r3, r3
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	4013      	ands	r3, r2
 800404e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	f003 0307 	and.w	r3, r3, #7
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	4313      	orrs	r3, r2
 8004064:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	08da      	lsrs	r2, r3, #3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3208      	adds	r2, #8
 800406e:	69b9      	ldr	r1, [r7, #24]
 8004070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	2203      	movs	r2, #3
 8004080:	fa02 f303 	lsl.w	r3, r2, r3
 8004084:	43db      	mvns	r3, r3
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	4013      	ands	r3, r2
 800408a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f003 0203 	and.w	r2, r3, #3
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	4313      	orrs	r3, r2
 80040a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 80b4 	beq.w	800421e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]
 80040ba:	4b60      	ldr	r3, [pc, #384]	; (800423c <HAL_GPIO_Init+0x30c>)
 80040bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040be:	4a5f      	ldr	r2, [pc, #380]	; (800423c <HAL_GPIO_Init+0x30c>)
 80040c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040c4:	6453      	str	r3, [r2, #68]	; 0x44
 80040c6:	4b5d      	ldr	r3, [pc, #372]	; (800423c <HAL_GPIO_Init+0x30c>)
 80040c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040d2:	4a5b      	ldr	r2, [pc, #364]	; (8004240 <HAL_GPIO_Init+0x310>)
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	089b      	lsrs	r3, r3, #2
 80040d8:	3302      	adds	r3, #2
 80040da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	f003 0303 	and.w	r3, r3, #3
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	220f      	movs	r2, #15
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	43db      	mvns	r3, r3
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	4013      	ands	r3, r2
 80040f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a52      	ldr	r2, [pc, #328]	; (8004244 <HAL_GPIO_Init+0x314>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d02b      	beq.n	8004156 <HAL_GPIO_Init+0x226>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a51      	ldr	r2, [pc, #324]	; (8004248 <HAL_GPIO_Init+0x318>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d025      	beq.n	8004152 <HAL_GPIO_Init+0x222>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a50      	ldr	r2, [pc, #320]	; (800424c <HAL_GPIO_Init+0x31c>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d01f      	beq.n	800414e <HAL_GPIO_Init+0x21e>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a4f      	ldr	r2, [pc, #316]	; (8004250 <HAL_GPIO_Init+0x320>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d019      	beq.n	800414a <HAL_GPIO_Init+0x21a>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a4e      	ldr	r2, [pc, #312]	; (8004254 <HAL_GPIO_Init+0x324>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d013      	beq.n	8004146 <HAL_GPIO_Init+0x216>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a4d      	ldr	r2, [pc, #308]	; (8004258 <HAL_GPIO_Init+0x328>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d00d      	beq.n	8004142 <HAL_GPIO_Init+0x212>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a4c      	ldr	r2, [pc, #304]	; (800425c <HAL_GPIO_Init+0x32c>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d007      	beq.n	800413e <HAL_GPIO_Init+0x20e>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a4b      	ldr	r2, [pc, #300]	; (8004260 <HAL_GPIO_Init+0x330>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d101      	bne.n	800413a <HAL_GPIO_Init+0x20a>
 8004136:	2307      	movs	r3, #7
 8004138:	e00e      	b.n	8004158 <HAL_GPIO_Init+0x228>
 800413a:	2308      	movs	r3, #8
 800413c:	e00c      	b.n	8004158 <HAL_GPIO_Init+0x228>
 800413e:	2306      	movs	r3, #6
 8004140:	e00a      	b.n	8004158 <HAL_GPIO_Init+0x228>
 8004142:	2305      	movs	r3, #5
 8004144:	e008      	b.n	8004158 <HAL_GPIO_Init+0x228>
 8004146:	2304      	movs	r3, #4
 8004148:	e006      	b.n	8004158 <HAL_GPIO_Init+0x228>
 800414a:	2303      	movs	r3, #3
 800414c:	e004      	b.n	8004158 <HAL_GPIO_Init+0x228>
 800414e:	2302      	movs	r3, #2
 8004150:	e002      	b.n	8004158 <HAL_GPIO_Init+0x228>
 8004152:	2301      	movs	r3, #1
 8004154:	e000      	b.n	8004158 <HAL_GPIO_Init+0x228>
 8004156:	2300      	movs	r3, #0
 8004158:	69fa      	ldr	r2, [r7, #28]
 800415a:	f002 0203 	and.w	r2, r2, #3
 800415e:	0092      	lsls	r2, r2, #2
 8004160:	4093      	lsls	r3, r2
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	4313      	orrs	r3, r2
 8004166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004168:	4935      	ldr	r1, [pc, #212]	; (8004240 <HAL_GPIO_Init+0x310>)
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	089b      	lsrs	r3, r3, #2
 800416e:	3302      	adds	r3, #2
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004176:	4b3b      	ldr	r3, [pc, #236]	; (8004264 <HAL_GPIO_Init+0x334>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	43db      	mvns	r3, r3
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	4013      	ands	r3, r2
 8004184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800419a:	4a32      	ldr	r2, [pc, #200]	; (8004264 <HAL_GPIO_Init+0x334>)
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041a0:	4b30      	ldr	r3, [pc, #192]	; (8004264 <HAL_GPIO_Init+0x334>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	43db      	mvns	r3, r3
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	4013      	ands	r3, r2
 80041ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041c4:	4a27      	ldr	r2, [pc, #156]	; (8004264 <HAL_GPIO_Init+0x334>)
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041ca:	4b26      	ldr	r3, [pc, #152]	; (8004264 <HAL_GPIO_Init+0x334>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	43db      	mvns	r3, r3
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	4013      	ands	r3, r2
 80041d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041ee:	4a1d      	ldr	r2, [pc, #116]	; (8004264 <HAL_GPIO_Init+0x334>)
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041f4:	4b1b      	ldr	r3, [pc, #108]	; (8004264 <HAL_GPIO_Init+0x334>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	43db      	mvns	r3, r3
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	4013      	ands	r3, r2
 8004202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	4313      	orrs	r3, r2
 8004216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004218:	4a12      	ldr	r2, [pc, #72]	; (8004264 <HAL_GPIO_Init+0x334>)
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	3301      	adds	r3, #1
 8004222:	61fb      	str	r3, [r7, #28]
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	2b0f      	cmp	r3, #15
 8004228:	f67f ae90 	bls.w	8003f4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800422c:	bf00      	nop
 800422e:	bf00      	nop
 8004230:	3724      	adds	r7, #36	; 0x24
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	40023800 	.word	0x40023800
 8004240:	40013800 	.word	0x40013800
 8004244:	40020000 	.word	0x40020000
 8004248:	40020400 	.word	0x40020400
 800424c:	40020800 	.word	0x40020800
 8004250:	40020c00 	.word	0x40020c00
 8004254:	40021000 	.word	0x40021000
 8004258:	40021400 	.word	0x40021400
 800425c:	40021800 	.word	0x40021800
 8004260:	40021c00 	.word	0x40021c00
 8004264:	40013c00 	.word	0x40013c00

08004268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	460b      	mov	r3, r1
 8004272:	807b      	strh	r3, [r7, #2]
 8004274:	4613      	mov	r3, r2
 8004276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004278:	787b      	ldrb	r3, [r7, #1]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800427e:	887a      	ldrh	r2, [r7, #2]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004284:	e003      	b.n	800428e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004286:	887b      	ldrh	r3, [r7, #2]
 8004288:	041a      	lsls	r2, r3, #16
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	619a      	str	r2, [r3, #24]
}
 800428e:	bf00      	nop
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
	...

0800429c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e12b      	b.n	8004506 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d106      	bne.n	80042c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7fd f902 	bl	80014cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2224      	movs	r2, #36	; 0x24
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0201 	bic.w	r2, r2, #1
 80042de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004300:	f001 fdca 	bl	8005e98 <HAL_RCC_GetPCLK1Freq>
 8004304:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	4a81      	ldr	r2, [pc, #516]	; (8004510 <HAL_I2C_Init+0x274>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d807      	bhi.n	8004320 <HAL_I2C_Init+0x84>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4a80      	ldr	r2, [pc, #512]	; (8004514 <HAL_I2C_Init+0x278>)
 8004314:	4293      	cmp	r3, r2
 8004316:	bf94      	ite	ls
 8004318:	2301      	movls	r3, #1
 800431a:	2300      	movhi	r3, #0
 800431c:	b2db      	uxtb	r3, r3
 800431e:	e006      	b.n	800432e <HAL_I2C_Init+0x92>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4a7d      	ldr	r2, [pc, #500]	; (8004518 <HAL_I2C_Init+0x27c>)
 8004324:	4293      	cmp	r3, r2
 8004326:	bf94      	ite	ls
 8004328:	2301      	movls	r3, #1
 800432a:	2300      	movhi	r3, #0
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e0e7      	b.n	8004506 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	4a78      	ldr	r2, [pc, #480]	; (800451c <HAL_I2C_Init+0x280>)
 800433a:	fba2 2303 	umull	r2, r3, r2, r3
 800433e:	0c9b      	lsrs	r3, r3, #18
 8004340:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	430a      	orrs	r2, r1
 8004354:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	4a6a      	ldr	r2, [pc, #424]	; (8004510 <HAL_I2C_Init+0x274>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d802      	bhi.n	8004370 <HAL_I2C_Init+0xd4>
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	3301      	adds	r3, #1
 800436e:	e009      	b.n	8004384 <HAL_I2C_Init+0xe8>
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004376:	fb02 f303 	mul.w	r3, r2, r3
 800437a:	4a69      	ldr	r2, [pc, #420]	; (8004520 <HAL_I2C_Init+0x284>)
 800437c:	fba2 2303 	umull	r2, r3, r2, r3
 8004380:	099b      	lsrs	r3, r3, #6
 8004382:	3301      	adds	r3, #1
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6812      	ldr	r2, [r2, #0]
 8004388:	430b      	orrs	r3, r1
 800438a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004396:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	495c      	ldr	r1, [pc, #368]	; (8004510 <HAL_I2C_Init+0x274>)
 80043a0:	428b      	cmp	r3, r1
 80043a2:	d819      	bhi.n	80043d8 <HAL_I2C_Init+0x13c>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	1e59      	subs	r1, r3, #1
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80043b2:	1c59      	adds	r1, r3, #1
 80043b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80043b8:	400b      	ands	r3, r1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00a      	beq.n	80043d4 <HAL_I2C_Init+0x138>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	1e59      	subs	r1, r3, #1
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80043cc:	3301      	adds	r3, #1
 80043ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043d2:	e051      	b.n	8004478 <HAL_I2C_Init+0x1dc>
 80043d4:	2304      	movs	r3, #4
 80043d6:	e04f      	b.n	8004478 <HAL_I2C_Init+0x1dc>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d111      	bne.n	8004404 <HAL_I2C_Init+0x168>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	1e58      	subs	r0, r3, #1
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6859      	ldr	r1, [r3, #4]
 80043e8:	460b      	mov	r3, r1
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	440b      	add	r3, r1
 80043ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80043f2:	3301      	adds	r3, #1
 80043f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	bf0c      	ite	eq
 80043fc:	2301      	moveq	r3, #1
 80043fe:	2300      	movne	r3, #0
 8004400:	b2db      	uxtb	r3, r3
 8004402:	e012      	b.n	800442a <HAL_I2C_Init+0x18e>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	1e58      	subs	r0, r3, #1
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6859      	ldr	r1, [r3, #4]
 800440c:	460b      	mov	r3, r1
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	440b      	add	r3, r1
 8004412:	0099      	lsls	r1, r3, #2
 8004414:	440b      	add	r3, r1
 8004416:	fbb0 f3f3 	udiv	r3, r0, r3
 800441a:	3301      	adds	r3, #1
 800441c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004420:	2b00      	cmp	r3, #0
 8004422:	bf0c      	ite	eq
 8004424:	2301      	moveq	r3, #1
 8004426:	2300      	movne	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <HAL_I2C_Init+0x196>
 800442e:	2301      	movs	r3, #1
 8004430:	e022      	b.n	8004478 <HAL_I2C_Init+0x1dc>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10e      	bne.n	8004458 <HAL_I2C_Init+0x1bc>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	1e58      	subs	r0, r3, #1
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6859      	ldr	r1, [r3, #4]
 8004442:	460b      	mov	r3, r1
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	440b      	add	r3, r1
 8004448:	fbb0 f3f3 	udiv	r3, r0, r3
 800444c:	3301      	adds	r3, #1
 800444e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004456:	e00f      	b.n	8004478 <HAL_I2C_Init+0x1dc>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	1e58      	subs	r0, r3, #1
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6859      	ldr	r1, [r3, #4]
 8004460:	460b      	mov	r3, r1
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	440b      	add	r3, r1
 8004466:	0099      	lsls	r1, r3, #2
 8004468:	440b      	add	r3, r1
 800446a:	fbb0 f3f3 	udiv	r3, r0, r3
 800446e:	3301      	adds	r3, #1
 8004470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004474:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004478:	6879      	ldr	r1, [r7, #4]
 800447a:	6809      	ldr	r1, [r1, #0]
 800447c:	4313      	orrs	r3, r2
 800447e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69da      	ldr	r2, [r3, #28]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	430a      	orrs	r2, r1
 800449a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80044a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	6911      	ldr	r1, [r2, #16]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	68d2      	ldr	r2, [r2, #12]
 80044b2:	4311      	orrs	r1, r2
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	6812      	ldr	r2, [r2, #0]
 80044b8:	430b      	orrs	r3, r1
 80044ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	695a      	ldr	r2, [r3, #20]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	431a      	orrs	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f042 0201 	orr.w	r2, r2, #1
 80044e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2220      	movs	r2, #32
 80044f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	000186a0 	.word	0x000186a0
 8004514:	001e847f 	.word	0x001e847f
 8004518:	003d08ff 	.word	0x003d08ff
 800451c:	431bde83 	.word	0x431bde83
 8004520:	10624dd3 	.word	0x10624dd3

08004524 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b088      	sub	sp, #32
 8004528:	af02      	add	r7, sp, #8
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	607a      	str	r2, [r7, #4]
 800452e:	461a      	mov	r2, r3
 8004530:	460b      	mov	r3, r1
 8004532:	817b      	strh	r3, [r7, #10]
 8004534:	4613      	mov	r3, r2
 8004536:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004538:	f7fd fb7c 	bl	8001c34 <HAL_GetTick>
 800453c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b20      	cmp	r3, #32
 8004548:	f040 80e0 	bne.w	800470c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	9300      	str	r3, [sp, #0]
 8004550:	2319      	movs	r3, #25
 8004552:	2201      	movs	r2, #1
 8004554:	4970      	ldr	r1, [pc, #448]	; (8004718 <HAL_I2C_Master_Transmit+0x1f4>)
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 fde8 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004562:	2302      	movs	r3, #2
 8004564:	e0d3      	b.n	800470e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800456c:	2b01      	cmp	r3, #1
 800456e:	d101      	bne.n	8004574 <HAL_I2C_Master_Transmit+0x50>
 8004570:	2302      	movs	r3, #2
 8004572:	e0cc      	b.n	800470e <HAL_I2C_Master_Transmit+0x1ea>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b01      	cmp	r3, #1
 8004588:	d007      	beq.n	800459a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f042 0201 	orr.w	r2, r2, #1
 8004598:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2221      	movs	r2, #33	; 0x21
 80045ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2210      	movs	r2, #16
 80045b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	893a      	ldrh	r2, [r7, #8]
 80045ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	4a50      	ldr	r2, [pc, #320]	; (800471c <HAL_I2C_Master_Transmit+0x1f8>)
 80045da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80045dc:	8979      	ldrh	r1, [r7, #10]
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	6a3a      	ldr	r2, [r7, #32]
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 fbbc 	bl	8004d60 <I2C_MasterRequestWrite>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e08d      	b.n	800470e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045f2:	2300      	movs	r3, #0
 80045f4:	613b      	str	r3, [r7, #16]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	613b      	str	r3, [r7, #16]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	613b      	str	r3, [r7, #16]
 8004606:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004608:	e066      	b.n	80046d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	6a39      	ldr	r1, [r7, #32]
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 fe62 	bl	80052d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00d      	beq.n	8004636 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	2b04      	cmp	r3, #4
 8004620:	d107      	bne.n	8004632 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004630:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e06b      	b.n	800470e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	781a      	ldrb	r2, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004646:	1c5a      	adds	r2, r3, #1
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004650:	b29b      	uxth	r3, r3
 8004652:	3b01      	subs	r3, #1
 8004654:	b29a      	uxth	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800465e:	3b01      	subs	r3, #1
 8004660:	b29a      	uxth	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b04      	cmp	r3, #4
 8004672:	d11b      	bne.n	80046ac <HAL_I2C_Master_Transmit+0x188>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004678:	2b00      	cmp	r3, #0
 800467a:	d017      	beq.n	80046ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	781a      	ldrb	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	1c5a      	adds	r2, r3, #1
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004696:	b29b      	uxth	r3, r3
 8004698:	3b01      	subs	r3, #1
 800469a:	b29a      	uxth	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a4:	3b01      	subs	r3, #1
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	6a39      	ldr	r1, [r7, #32]
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 fe52 	bl	800535a <I2C_WaitOnBTFFlagUntilTimeout>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00d      	beq.n	80046d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c0:	2b04      	cmp	r3, #4
 80046c2:	d107      	bne.n	80046d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e01a      	b.n	800470e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d194      	bne.n	800460a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2220      	movs	r2, #32
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004708:	2300      	movs	r3, #0
 800470a:	e000      	b.n	800470e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800470c:	2302      	movs	r3, #2
  }
}
 800470e:	4618      	mov	r0, r3
 8004710:	3718      	adds	r7, #24
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	00100002 	.word	0x00100002
 800471c:	ffff0000 	.word	0xffff0000

08004720 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b08c      	sub	sp, #48	; 0x30
 8004724:	af02      	add	r7, sp, #8
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	607a      	str	r2, [r7, #4]
 800472a:	461a      	mov	r2, r3
 800472c:	460b      	mov	r3, r1
 800472e:	817b      	strh	r3, [r7, #10]
 8004730:	4613      	mov	r3, r2
 8004732:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004734:	f7fd fa7e 	bl	8001c34 <HAL_GetTick>
 8004738:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b20      	cmp	r3, #32
 8004744:	f040 820b 	bne.w	8004b5e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	9300      	str	r3, [sp, #0]
 800474c:	2319      	movs	r3, #25
 800474e:	2201      	movs	r2, #1
 8004750:	497c      	ldr	r1, [pc, #496]	; (8004944 <HAL_I2C_Master_Receive+0x224>)
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f000 fcea 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800475e:	2302      	movs	r3, #2
 8004760:	e1fe      	b.n	8004b60 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004768:	2b01      	cmp	r3, #1
 800476a:	d101      	bne.n	8004770 <HAL_I2C_Master_Receive+0x50>
 800476c:	2302      	movs	r3, #2
 800476e:	e1f7      	b.n	8004b60 <HAL_I2C_Master_Receive+0x440>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b01      	cmp	r3, #1
 8004784:	d007      	beq.n	8004796 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f042 0201 	orr.w	r2, r2, #1
 8004794:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2222      	movs	r2, #34	; 0x22
 80047aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2210      	movs	r2, #16
 80047b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	893a      	ldrh	r2, [r7, #8]
 80047c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	4a5c      	ldr	r2, [pc, #368]	; (8004948 <HAL_I2C_Master_Receive+0x228>)
 80047d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80047d8:	8979      	ldrh	r1, [r7, #10]
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 fb40 	bl	8004e64 <I2C_MasterRequestRead>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e1b8      	b.n	8004b60 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d113      	bne.n	800481e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047f6:	2300      	movs	r3, #0
 80047f8:	623b      	str	r3, [r7, #32]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	623b      	str	r3, [r7, #32]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	623b      	str	r3, [r7, #32]
 800480a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	e18c      	b.n	8004b38 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004822:	2b01      	cmp	r3, #1
 8004824:	d11b      	bne.n	800485e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004834:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004836:	2300      	movs	r3, #0
 8004838:	61fb      	str	r3, [r7, #28]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	61fb      	str	r3, [r7, #28]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	61fb      	str	r3, [r7, #28]
 800484a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	e16c      	b.n	8004b38 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004862:	2b02      	cmp	r3, #2
 8004864:	d11b      	bne.n	800489e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004874:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004884:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004886:	2300      	movs	r3, #0
 8004888:	61bb      	str	r3, [r7, #24]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	61bb      	str	r3, [r7, #24]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	61bb      	str	r3, [r7, #24]
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	e14c      	b.n	8004b38 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ae:	2300      	movs	r3, #0
 80048b0:	617b      	str	r3, [r7, #20]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	695b      	ldr	r3, [r3, #20]
 80048b8:	617b      	str	r3, [r7, #20]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	617b      	str	r3, [r7, #20]
 80048c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80048c4:	e138      	b.n	8004b38 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ca:	2b03      	cmp	r3, #3
 80048cc:	f200 80f1 	bhi.w	8004ab2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d123      	bne.n	8004920 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 fd7d 	bl	80053dc <I2C_WaitOnRXNEFlagUntilTimeout>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e139      	b.n	8004b60 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	691a      	ldr	r2, [r3, #16]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f6:	b2d2      	uxtb	r2, r2
 80048f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fe:	1c5a      	adds	r2, r3, #1
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004908:	3b01      	subs	r3, #1
 800490a:	b29a      	uxth	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004914:	b29b      	uxth	r3, r3
 8004916:	3b01      	subs	r3, #1
 8004918:	b29a      	uxth	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800491e:	e10b      	b.n	8004b38 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004924:	2b02      	cmp	r3, #2
 8004926:	d14e      	bne.n	80049c6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492e:	2200      	movs	r2, #0
 8004930:	4906      	ldr	r1, [pc, #24]	; (800494c <HAL_I2C_Master_Receive+0x22c>)
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f000 fbfa 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d008      	beq.n	8004950 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e10e      	b.n	8004b60 <HAL_I2C_Master_Receive+0x440>
 8004942:	bf00      	nop
 8004944:	00100002 	.word	0x00100002
 8004948:	ffff0000 	.word	0xffff0000
 800494c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800495e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	691a      	ldr	r2, [r3, #16]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	b2d2      	uxtb	r2, r2
 800496c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	1c5a      	adds	r2, r3, #1
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800497c:	3b01      	subs	r3, #1
 800497e:	b29a      	uxth	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004988:	b29b      	uxth	r3, r3
 800498a:	3b01      	subs	r3, #1
 800498c:	b29a      	uxth	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	691a      	ldr	r2, [r3, #16]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	b2d2      	uxtb	r2, r2
 800499e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a4:	1c5a      	adds	r2, r3, #1
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ae:	3b01      	subs	r3, #1
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29a      	uxth	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049c4:	e0b8      	b.n	8004b38 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049cc:	2200      	movs	r2, #0
 80049ce:	4966      	ldr	r1, [pc, #408]	; (8004b68 <HAL_I2C_Master_Receive+0x448>)
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f000 fbab 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d001      	beq.n	80049e0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e0bf      	b.n	8004b60 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	691a      	ldr	r2, [r3, #16]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	b2d2      	uxtb	r2, r2
 80049fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a02:	1c5a      	adds	r2, r3, #1
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a28:	2200      	movs	r2, #0
 8004a2a:	494f      	ldr	r1, [pc, #316]	; (8004b68 <HAL_I2C_Master_Receive+0x448>)
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f000 fb7d 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d001      	beq.n	8004a3c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e091      	b.n	8004b60 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	691a      	ldr	r2, [r3, #16]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	b2d2      	uxtb	r2, r2
 8004a58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5e:	1c5a      	adds	r2, r3, #1
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	3b01      	subs	r3, #1
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	691a      	ldr	r2, [r3, #16]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	b2d2      	uxtb	r2, r2
 8004a8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a90:	1c5a      	adds	r2, r3, #1
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ab0:	e042      	b.n	8004b38 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f000 fc90 	bl	80053dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e04c      	b.n	8004b60 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	691a      	ldr	r2, [r3, #16]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad0:	b2d2      	uxtb	r2, r2
 8004ad2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	1c5a      	adds	r2, r3, #1
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	3b01      	subs	r3, #1
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	f003 0304 	and.w	r3, r3, #4
 8004b02:	2b04      	cmp	r3, #4
 8004b04:	d118      	bne.n	8004b38 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	691a      	ldr	r2, [r3, #16]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b10:	b2d2      	uxtb	r2, r2
 8004b12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	1c5a      	adds	r2, r3, #1
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b22:	3b01      	subs	r3, #1
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	3b01      	subs	r3, #1
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f47f aec2 	bne.w	80048c6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2220      	movs	r2, #32
 8004b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	e000      	b.n	8004b60 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004b5e:	2302      	movs	r3, #2
  }
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3728      	adds	r7, #40	; 0x28
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	00010004 	.word	0x00010004

08004b6c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b088      	sub	sp, #32
 8004b70:	af02      	add	r7, sp, #8
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	4608      	mov	r0, r1
 8004b76:	4611      	mov	r1, r2
 8004b78:	461a      	mov	r2, r3
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	817b      	strh	r3, [r7, #10]
 8004b7e:	460b      	mov	r3, r1
 8004b80:	813b      	strh	r3, [r7, #8]
 8004b82:	4613      	mov	r3, r2
 8004b84:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b86:	f7fd f855 	bl	8001c34 <HAL_GetTick>
 8004b8a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	2b20      	cmp	r3, #32
 8004b96:	f040 80d9 	bne.w	8004d4c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	2319      	movs	r3, #25
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	496d      	ldr	r1, [pc, #436]	; (8004d58 <HAL_I2C_Mem_Write+0x1ec>)
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f000 fac1 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d001      	beq.n	8004bb4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	e0cc      	b.n	8004d4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d101      	bne.n	8004bc2 <HAL_I2C_Mem_Write+0x56>
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	e0c5      	b.n	8004d4e <HAL_I2C_Mem_Write+0x1e2>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d007      	beq.n	8004be8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f042 0201 	orr.w	r2, r2, #1
 8004be6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bf6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2221      	movs	r2, #33	; 0x21
 8004bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2240      	movs	r2, #64	; 0x40
 8004c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6a3a      	ldr	r2, [r7, #32]
 8004c12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004c18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4a4d      	ldr	r2, [pc, #308]	; (8004d5c <HAL_I2C_Mem_Write+0x1f0>)
 8004c28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c2a:	88f8      	ldrh	r0, [r7, #6]
 8004c2c:	893a      	ldrh	r2, [r7, #8]
 8004c2e:	8979      	ldrh	r1, [r7, #10]
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	9301      	str	r3, [sp, #4]
 8004c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c36:	9300      	str	r3, [sp, #0]
 8004c38:	4603      	mov	r3, r0
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 f9e0 	bl	8005000 <I2C_RequestMemoryWrite>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d052      	beq.n	8004cec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e081      	b.n	8004d4e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f000 fb42 	bl	80052d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00d      	beq.n	8004c76 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5e:	2b04      	cmp	r3, #4
 8004c60:	d107      	bne.n	8004c72 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e06b      	b.n	8004d4e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7a:	781a      	ldrb	r2, [r3, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c86:	1c5a      	adds	r2, r3, #1
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c90:	3b01      	subs	r3, #1
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b04      	cmp	r3, #4
 8004cb2:	d11b      	bne.n	8004cec <HAL_I2C_Mem_Write+0x180>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d017      	beq.n	8004cec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	781a      	ldrb	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	1c5a      	adds	r2, r3, #1
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1aa      	bne.n	8004c4a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 fb2e 	bl	800535a <I2C_WaitOnBTFFlagUntilTimeout>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00d      	beq.n	8004d20 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d08:	2b04      	cmp	r3, #4
 8004d0a:	d107      	bne.n	8004d1c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d1a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e016      	b.n	8004d4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2220      	movs	r2, #32
 8004d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	e000      	b.n	8004d4e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004d4c:	2302      	movs	r3, #2
  }
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3718      	adds	r7, #24
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	00100002 	.word	0x00100002
 8004d5c:	ffff0000 	.word	0xffff0000

08004d60 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b088      	sub	sp, #32
 8004d64:	af02      	add	r7, sp, #8
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	607a      	str	r2, [r7, #4]
 8004d6a:	603b      	str	r3, [r7, #0]
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d74:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d006      	beq.n	8004d8a <I2C_MasterRequestWrite+0x2a>
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d003      	beq.n	8004d8a <I2C_MasterRequestWrite+0x2a>
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d88:	d108      	bne.n	8004d9c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d98:	601a      	str	r2, [r3, #0]
 8004d9a:	e00b      	b.n	8004db4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da0:	2b12      	cmp	r3, #18
 8004da2:	d107      	bne.n	8004db4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004db2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 f9b3 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00d      	beq.n	8004de8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dda:	d103      	bne.n	8004de4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004de2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e035      	b.n	8004e54 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004df0:	d108      	bne.n	8004e04 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004df2:	897b      	ldrh	r3, [r7, #10]
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	461a      	mov	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e00:	611a      	str	r2, [r3, #16]
 8004e02:	e01b      	b.n	8004e3c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004e04:	897b      	ldrh	r3, [r7, #10]
 8004e06:	11db      	asrs	r3, r3, #7
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	f003 0306 	and.w	r3, r3, #6
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	f063 030f 	orn	r3, r3, #15
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	490e      	ldr	r1, [pc, #56]	; (8004e5c <I2C_MasterRequestWrite+0xfc>)
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f000 f9d9 	bl	80051da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e010      	b.n	8004e54 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004e32:	897b      	ldrh	r3, [r7, #10]
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	4907      	ldr	r1, [pc, #28]	; (8004e60 <I2C_MasterRequestWrite+0x100>)
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f000 f9c9 	bl	80051da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e000      	b.n	8004e54 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3718      	adds	r7, #24
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	00010008 	.word	0x00010008
 8004e60:	00010002 	.word	0x00010002

08004e64 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b088      	sub	sp, #32
 8004e68:	af02      	add	r7, sp, #8
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	607a      	str	r2, [r7, #4]
 8004e6e:	603b      	str	r3, [r7, #0]
 8004e70:	460b      	mov	r3, r1
 8004e72:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e78:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e88:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2b08      	cmp	r3, #8
 8004e8e:	d006      	beq.n	8004e9e <I2C_MasterRequestRead+0x3a>
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d003      	beq.n	8004e9e <I2C_MasterRequestRead+0x3a>
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e9c:	d108      	bne.n	8004eb0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eac:	601a      	str	r2, [r3, #0]
 8004eae:	e00b      	b.n	8004ec8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb4:	2b11      	cmp	r3, #17
 8004eb6:	d107      	bne.n	8004ec8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ec6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f000 f929 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00d      	beq.n	8004efc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eee:	d103      	bne.n	8004ef8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ef6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e079      	b.n	8004ff0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f04:	d108      	bne.n	8004f18 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004f06:	897b      	ldrh	r3, [r7, #10]
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	f043 0301 	orr.w	r3, r3, #1
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	611a      	str	r2, [r3, #16]
 8004f16:	e05f      	b.n	8004fd8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004f18:	897b      	ldrh	r3, [r7, #10]
 8004f1a:	11db      	asrs	r3, r3, #7
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	f003 0306 	and.w	r3, r3, #6
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	f063 030f 	orn	r3, r3, #15
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	4930      	ldr	r1, [pc, #192]	; (8004ff8 <I2C_MasterRequestRead+0x194>)
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f000 f94f 	bl	80051da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d001      	beq.n	8004f46 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e054      	b.n	8004ff0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004f46:	897b      	ldrh	r3, [r7, #10]
 8004f48:	b2da      	uxtb	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	4929      	ldr	r1, [pc, #164]	; (8004ffc <I2C_MasterRequestRead+0x198>)
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f000 f93f 	bl	80051da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e044      	b.n	8004ff0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f66:	2300      	movs	r3, #0
 8004f68:	613b      	str	r3, [r7, #16]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	613b      	str	r3, [r7, #16]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	613b      	str	r3, [r7, #16]
 8004f7a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f8a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	9300      	str	r3, [sp, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f000 f8c7 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00d      	beq.n	8004fc0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fb2:	d103      	bne.n	8004fbc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fba:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e017      	b.n	8004ff0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004fc0:	897b      	ldrh	r3, [r7, #10]
 8004fc2:	11db      	asrs	r3, r3, #7
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	f003 0306 	and.w	r3, r3, #6
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	f063 030e 	orn	r3, r3, #14
 8004fd0:	b2da      	uxtb	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	4907      	ldr	r1, [pc, #28]	; (8004ffc <I2C_MasterRequestRead+0x198>)
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f000 f8fb 	bl	80051da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d001      	beq.n	8004fee <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e000      	b.n	8004ff0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3718      	adds	r7, #24
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	00010008 	.word	0x00010008
 8004ffc:	00010002 	.word	0x00010002

08005000 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b088      	sub	sp, #32
 8005004:	af02      	add	r7, sp, #8
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	4608      	mov	r0, r1
 800500a:	4611      	mov	r1, r2
 800500c:	461a      	mov	r2, r3
 800500e:	4603      	mov	r3, r0
 8005010:	817b      	strh	r3, [r7, #10]
 8005012:	460b      	mov	r3, r1
 8005014:	813b      	strh	r3, [r7, #8]
 8005016:	4613      	mov	r3, r2
 8005018:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005028:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800502a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	6a3b      	ldr	r3, [r7, #32]
 8005030:	2200      	movs	r2, #0
 8005032:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f000 f878 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00d      	beq.n	800505e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800504c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005050:	d103      	bne.n	800505a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005058:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e05f      	b.n	800511e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800505e:	897b      	ldrh	r3, [r7, #10]
 8005060:	b2db      	uxtb	r3, r3
 8005062:	461a      	mov	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800506c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800506e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005070:	6a3a      	ldr	r2, [r7, #32]
 8005072:	492d      	ldr	r1, [pc, #180]	; (8005128 <I2C_RequestMemoryWrite+0x128>)
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f000 f8b0 	bl	80051da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d001      	beq.n	8005084 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e04c      	b.n	800511e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005084:	2300      	movs	r3, #0
 8005086:	617b      	str	r3, [r7, #20]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	617b      	str	r3, [r7, #20]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	617b      	str	r3, [r7, #20]
 8005098:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800509a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800509c:	6a39      	ldr	r1, [r7, #32]
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f000 f91a 	bl	80052d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00d      	beq.n	80050c6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ae:	2b04      	cmp	r3, #4
 80050b0:	d107      	bne.n	80050c2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e02b      	b.n	800511e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050c6:	88fb      	ldrh	r3, [r7, #6]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d105      	bne.n	80050d8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050cc:	893b      	ldrh	r3, [r7, #8]
 80050ce:	b2da      	uxtb	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	611a      	str	r2, [r3, #16]
 80050d6:	e021      	b.n	800511c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80050d8:	893b      	ldrh	r3, [r7, #8]
 80050da:	0a1b      	lsrs	r3, r3, #8
 80050dc:	b29b      	uxth	r3, r3
 80050de:	b2da      	uxtb	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e8:	6a39      	ldr	r1, [r7, #32]
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f000 f8f4 	bl	80052d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00d      	beq.n	8005112 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	2b04      	cmp	r3, #4
 80050fc:	d107      	bne.n	800510e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800510c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e005      	b.n	800511e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005112:	893b      	ldrh	r3, [r7, #8]
 8005114:	b2da      	uxtb	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3718      	adds	r7, #24
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	00010002 	.word	0x00010002

0800512c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	603b      	str	r3, [r7, #0]
 8005138:	4613      	mov	r3, r2
 800513a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800513c:	e025      	b.n	800518a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005144:	d021      	beq.n	800518a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005146:	f7fc fd75 	bl	8001c34 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	429a      	cmp	r2, r3
 8005154:	d302      	bcc.n	800515c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d116      	bne.n	800518a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2220      	movs	r2, #32
 8005166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	f043 0220 	orr.w	r2, r3, #32
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e023      	b.n	80051d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	0c1b      	lsrs	r3, r3, #16
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b01      	cmp	r3, #1
 8005192:	d10d      	bne.n	80051b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	43da      	mvns	r2, r3
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	4013      	ands	r3, r2
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	bf0c      	ite	eq
 80051a6:	2301      	moveq	r3, #1
 80051a8:	2300      	movne	r3, #0
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	461a      	mov	r2, r3
 80051ae:	e00c      	b.n	80051ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	43da      	mvns	r2, r3
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	4013      	ands	r3, r2
 80051bc:	b29b      	uxth	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	bf0c      	ite	eq
 80051c2:	2301      	moveq	r3, #1
 80051c4:	2300      	movne	r3, #0
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	461a      	mov	r2, r3
 80051ca:	79fb      	ldrb	r3, [r7, #7]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d0b6      	beq.n	800513e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b084      	sub	sp, #16
 80051de:	af00      	add	r7, sp, #0
 80051e0:	60f8      	str	r0, [r7, #12]
 80051e2:	60b9      	str	r1, [r7, #8]
 80051e4:	607a      	str	r2, [r7, #4]
 80051e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051e8:	e051      	b.n	800528e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051f8:	d123      	bne.n	8005242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005208:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005212:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2220      	movs	r2, #32
 800521e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	f043 0204 	orr.w	r2, r3, #4
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e046      	b.n	80052d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005248:	d021      	beq.n	800528e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800524a:	f7fc fcf3 	bl	8001c34 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	429a      	cmp	r2, r3
 8005258:	d302      	bcc.n	8005260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d116      	bne.n	800528e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2220      	movs	r2, #32
 800526a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	f043 0220 	orr.w	r2, r3, #32
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e020      	b.n	80052d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	0c1b      	lsrs	r3, r3, #16
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b01      	cmp	r3, #1
 8005296:	d10c      	bne.n	80052b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	43da      	mvns	r2, r3
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	4013      	ands	r3, r2
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	bf14      	ite	ne
 80052aa:	2301      	movne	r3, #1
 80052ac:	2300      	moveq	r3, #0
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	e00b      	b.n	80052ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	43da      	mvns	r2, r3
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	4013      	ands	r3, r2
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	bf14      	ite	ne
 80052c4:	2301      	movne	r3, #1
 80052c6:	2300      	moveq	r3, #0
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d18d      	bne.n	80051ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052e4:	e02d      	b.n	8005342 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f000 f8ce 	bl	8005488 <I2C_IsAcknowledgeFailed>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e02d      	b.n	8005352 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fc:	d021      	beq.n	8005342 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052fe:	f7fc fc99 	bl	8001c34 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	429a      	cmp	r2, r3
 800530c:	d302      	bcc.n	8005314 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d116      	bne.n	8005342 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2220      	movs	r2, #32
 800531e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532e:	f043 0220 	orr.w	r2, r3, #32
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e007      	b.n	8005352 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534c:	2b80      	cmp	r3, #128	; 0x80
 800534e:	d1ca      	bne.n	80052e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b084      	sub	sp, #16
 800535e:	af00      	add	r7, sp, #0
 8005360:	60f8      	str	r0, [r7, #12]
 8005362:	60b9      	str	r1, [r7, #8]
 8005364:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005366:	e02d      	b.n	80053c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f000 f88d 	bl	8005488 <I2C_IsAcknowledgeFailed>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e02d      	b.n	80053d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537e:	d021      	beq.n	80053c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005380:	f7fc fc58 	bl	8001c34 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	429a      	cmp	r2, r3
 800538e:	d302      	bcc.n	8005396 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d116      	bne.n	80053c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2220      	movs	r2, #32
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b0:	f043 0220 	orr.w	r2, r3, #32
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e007      	b.n	80053d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	f003 0304 	and.w	r3, r3, #4
 80053ce:	2b04      	cmp	r3, #4
 80053d0:	d1ca      	bne.n	8005368 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053e8:	e042      	b.n	8005470 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	695b      	ldr	r3, [r3, #20]
 80053f0:	f003 0310 	and.w	r3, r3, #16
 80053f4:	2b10      	cmp	r3, #16
 80053f6:	d119      	bne.n	800542c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f06f 0210 	mvn.w	r2, #16
 8005400:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2220      	movs	r2, #32
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e029      	b.n	8005480 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800542c:	f7fc fc02 	bl	8001c34 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	429a      	cmp	r2, r3
 800543a:	d302      	bcc.n	8005442 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d116      	bne.n	8005470 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2220      	movs	r2, #32
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545c:	f043 0220 	orr.w	r2, r3, #32
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e007      	b.n	8005480 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547a:	2b40      	cmp	r3, #64	; 0x40
 800547c:	d1b5      	bne.n	80053ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800549a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800549e:	d11b      	bne.n	80054d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2220      	movs	r2, #32
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c4:	f043 0204 	orr.w	r2, r3, #4
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e000      	b.n	80054da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
	...

080054e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e267      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b00      	cmp	r3, #0
 8005504:	d075      	beq.n	80055f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005506:	4b88      	ldr	r3, [pc, #544]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f003 030c 	and.w	r3, r3, #12
 800550e:	2b04      	cmp	r3, #4
 8005510:	d00c      	beq.n	800552c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005512:	4b85      	ldr	r3, [pc, #532]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800551a:	2b08      	cmp	r3, #8
 800551c:	d112      	bne.n	8005544 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800551e:	4b82      	ldr	r3, [pc, #520]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005526:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800552a:	d10b      	bne.n	8005544 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800552c:	4b7e      	ldr	r3, [pc, #504]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d05b      	beq.n	80055f0 <HAL_RCC_OscConfig+0x108>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d157      	bne.n	80055f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e242      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800554c:	d106      	bne.n	800555c <HAL_RCC_OscConfig+0x74>
 800554e:	4b76      	ldr	r3, [pc, #472]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a75      	ldr	r2, [pc, #468]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005558:	6013      	str	r3, [r2, #0]
 800555a:	e01d      	b.n	8005598 <HAL_RCC_OscConfig+0xb0>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005564:	d10c      	bne.n	8005580 <HAL_RCC_OscConfig+0x98>
 8005566:	4b70      	ldr	r3, [pc, #448]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a6f      	ldr	r2, [pc, #444]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 800556c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005570:	6013      	str	r3, [r2, #0]
 8005572:	4b6d      	ldr	r3, [pc, #436]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a6c      	ldr	r2, [pc, #432]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800557c:	6013      	str	r3, [r2, #0]
 800557e:	e00b      	b.n	8005598 <HAL_RCC_OscConfig+0xb0>
 8005580:	4b69      	ldr	r3, [pc, #420]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a68      	ldr	r2, [pc, #416]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800558a:	6013      	str	r3, [r2, #0]
 800558c:	4b66      	ldr	r3, [pc, #408]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a65      	ldr	r2, [pc, #404]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005596:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d013      	beq.n	80055c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055a0:	f7fc fb48 	bl	8001c34 <HAL_GetTick>
 80055a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055a6:	e008      	b.n	80055ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055a8:	f7fc fb44 	bl	8001c34 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b64      	cmp	r3, #100	; 0x64
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e207      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ba:	4b5b      	ldr	r3, [pc, #364]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d0f0      	beq.n	80055a8 <HAL_RCC_OscConfig+0xc0>
 80055c6:	e014      	b.n	80055f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055c8:	f7fc fb34 	bl	8001c34 <HAL_GetTick>
 80055cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055ce:	e008      	b.n	80055e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055d0:	f7fc fb30 	bl	8001c34 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b64      	cmp	r3, #100	; 0x64
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e1f3      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055e2:	4b51      	ldr	r3, [pc, #324]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1f0      	bne.n	80055d0 <HAL_RCC_OscConfig+0xe8>
 80055ee:	e000      	b.n	80055f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0302 	and.w	r3, r3, #2
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d063      	beq.n	80056c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055fe:	4b4a      	ldr	r3, [pc, #296]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f003 030c 	and.w	r3, r3, #12
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00b      	beq.n	8005622 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800560a:	4b47      	ldr	r3, [pc, #284]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005612:	2b08      	cmp	r3, #8
 8005614:	d11c      	bne.n	8005650 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005616:	4b44      	ldr	r3, [pc, #272]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d116      	bne.n	8005650 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005622:	4b41      	ldr	r3, [pc, #260]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0302 	and.w	r3, r3, #2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d005      	beq.n	800563a <HAL_RCC_OscConfig+0x152>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d001      	beq.n	800563a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e1c7      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800563a:	4b3b      	ldr	r3, [pc, #236]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	00db      	lsls	r3, r3, #3
 8005648:	4937      	ldr	r1, [pc, #220]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 800564a:	4313      	orrs	r3, r2
 800564c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800564e:	e03a      	b.n	80056c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d020      	beq.n	800569a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005658:	4b34      	ldr	r3, [pc, #208]	; (800572c <HAL_RCC_OscConfig+0x244>)
 800565a:	2201      	movs	r2, #1
 800565c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800565e:	f7fc fae9 	bl	8001c34 <HAL_GetTick>
 8005662:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005664:	e008      	b.n	8005678 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005666:	f7fc fae5 	bl	8001c34 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	2b02      	cmp	r3, #2
 8005672:	d901      	bls.n	8005678 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e1a8      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005678:	4b2b      	ldr	r3, [pc, #172]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	2b00      	cmp	r3, #0
 8005682:	d0f0      	beq.n	8005666 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005684:	4b28      	ldr	r3, [pc, #160]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	4925      	ldr	r1, [pc, #148]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005694:	4313      	orrs	r3, r2
 8005696:	600b      	str	r3, [r1, #0]
 8005698:	e015      	b.n	80056c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800569a:	4b24      	ldr	r3, [pc, #144]	; (800572c <HAL_RCC_OscConfig+0x244>)
 800569c:	2200      	movs	r2, #0
 800569e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a0:	f7fc fac8 	bl	8001c34 <HAL_GetTick>
 80056a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056a6:	e008      	b.n	80056ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056a8:	f7fc fac4 	bl	8001c34 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e187      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056ba:	4b1b      	ldr	r3, [pc, #108]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1f0      	bne.n	80056a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0308 	and.w	r3, r3, #8
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d036      	beq.n	8005740 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d016      	beq.n	8005708 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056da:	4b15      	ldr	r3, [pc, #84]	; (8005730 <HAL_RCC_OscConfig+0x248>)
 80056dc:	2201      	movs	r2, #1
 80056de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e0:	f7fc faa8 	bl	8001c34 <HAL_GetTick>
 80056e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056e6:	e008      	b.n	80056fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056e8:	f7fc faa4 	bl	8001c34 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d901      	bls.n	80056fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e167      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056fa:	4b0b      	ldr	r3, [pc, #44]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 80056fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056fe:	f003 0302 	and.w	r3, r3, #2
 8005702:	2b00      	cmp	r3, #0
 8005704:	d0f0      	beq.n	80056e8 <HAL_RCC_OscConfig+0x200>
 8005706:	e01b      	b.n	8005740 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005708:	4b09      	ldr	r3, [pc, #36]	; (8005730 <HAL_RCC_OscConfig+0x248>)
 800570a:	2200      	movs	r2, #0
 800570c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800570e:	f7fc fa91 	bl	8001c34 <HAL_GetTick>
 8005712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005714:	e00e      	b.n	8005734 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005716:	f7fc fa8d 	bl	8001c34 <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	2b02      	cmp	r3, #2
 8005722:	d907      	bls.n	8005734 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e150      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
 8005728:	40023800 	.word	0x40023800
 800572c:	42470000 	.word	0x42470000
 8005730:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005734:	4b88      	ldr	r3, [pc, #544]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005738:	f003 0302 	and.w	r3, r3, #2
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1ea      	bne.n	8005716 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0304 	and.w	r3, r3, #4
 8005748:	2b00      	cmp	r3, #0
 800574a:	f000 8097 	beq.w	800587c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800574e:	2300      	movs	r3, #0
 8005750:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005752:	4b81      	ldr	r3, [pc, #516]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10f      	bne.n	800577e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800575e:	2300      	movs	r3, #0
 8005760:	60bb      	str	r3, [r7, #8]
 8005762:	4b7d      	ldr	r3, [pc, #500]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005766:	4a7c      	ldr	r2, [pc, #496]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800576c:	6413      	str	r3, [r2, #64]	; 0x40
 800576e:	4b7a      	ldr	r3, [pc, #488]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005776:	60bb      	str	r3, [r7, #8]
 8005778:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800577a:	2301      	movs	r3, #1
 800577c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800577e:	4b77      	ldr	r3, [pc, #476]	; (800595c <HAL_RCC_OscConfig+0x474>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005786:	2b00      	cmp	r3, #0
 8005788:	d118      	bne.n	80057bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800578a:	4b74      	ldr	r3, [pc, #464]	; (800595c <HAL_RCC_OscConfig+0x474>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a73      	ldr	r2, [pc, #460]	; (800595c <HAL_RCC_OscConfig+0x474>)
 8005790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005794:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005796:	f7fc fa4d 	bl	8001c34 <HAL_GetTick>
 800579a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800579c:	e008      	b.n	80057b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800579e:	f7fc fa49 	bl	8001c34 <HAL_GetTick>
 80057a2:	4602      	mov	r2, r0
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d901      	bls.n	80057b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e10c      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057b0:	4b6a      	ldr	r3, [pc, #424]	; (800595c <HAL_RCC_OscConfig+0x474>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d0f0      	beq.n	800579e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d106      	bne.n	80057d2 <HAL_RCC_OscConfig+0x2ea>
 80057c4:	4b64      	ldr	r3, [pc, #400]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 80057c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c8:	4a63      	ldr	r2, [pc, #396]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 80057ca:	f043 0301 	orr.w	r3, r3, #1
 80057ce:	6713      	str	r3, [r2, #112]	; 0x70
 80057d0:	e01c      	b.n	800580c <HAL_RCC_OscConfig+0x324>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	2b05      	cmp	r3, #5
 80057d8:	d10c      	bne.n	80057f4 <HAL_RCC_OscConfig+0x30c>
 80057da:	4b5f      	ldr	r3, [pc, #380]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 80057dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057de:	4a5e      	ldr	r2, [pc, #376]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 80057e0:	f043 0304 	orr.w	r3, r3, #4
 80057e4:	6713      	str	r3, [r2, #112]	; 0x70
 80057e6:	4b5c      	ldr	r3, [pc, #368]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 80057e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ea:	4a5b      	ldr	r2, [pc, #364]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 80057ec:	f043 0301 	orr.w	r3, r3, #1
 80057f0:	6713      	str	r3, [r2, #112]	; 0x70
 80057f2:	e00b      	b.n	800580c <HAL_RCC_OscConfig+0x324>
 80057f4:	4b58      	ldr	r3, [pc, #352]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 80057f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f8:	4a57      	ldr	r2, [pc, #348]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 80057fa:	f023 0301 	bic.w	r3, r3, #1
 80057fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005800:	4b55      	ldr	r3, [pc, #340]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005804:	4a54      	ldr	r2, [pc, #336]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005806:	f023 0304 	bic.w	r3, r3, #4
 800580a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d015      	beq.n	8005840 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005814:	f7fc fa0e 	bl	8001c34 <HAL_GetTick>
 8005818:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800581a:	e00a      	b.n	8005832 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800581c:	f7fc fa0a 	bl	8001c34 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	f241 3288 	movw	r2, #5000	; 0x1388
 800582a:	4293      	cmp	r3, r2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e0cb      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005832:	4b49      	ldr	r3, [pc, #292]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d0ee      	beq.n	800581c <HAL_RCC_OscConfig+0x334>
 800583e:	e014      	b.n	800586a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005840:	f7fc f9f8 	bl	8001c34 <HAL_GetTick>
 8005844:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005846:	e00a      	b.n	800585e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005848:	f7fc f9f4 	bl	8001c34 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	f241 3288 	movw	r2, #5000	; 0x1388
 8005856:	4293      	cmp	r3, r2
 8005858:	d901      	bls.n	800585e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e0b5      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800585e:	4b3e      	ldr	r3, [pc, #248]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1ee      	bne.n	8005848 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800586a:	7dfb      	ldrb	r3, [r7, #23]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d105      	bne.n	800587c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005870:	4b39      	ldr	r3, [pc, #228]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005874:	4a38      	ldr	r2, [pc, #224]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005876:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800587a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 80a1 	beq.w	80059c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005886:	4b34      	ldr	r3, [pc, #208]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f003 030c 	and.w	r3, r3, #12
 800588e:	2b08      	cmp	r3, #8
 8005890:	d05c      	beq.n	800594c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	2b02      	cmp	r3, #2
 8005898:	d141      	bne.n	800591e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800589a:	4b31      	ldr	r3, [pc, #196]	; (8005960 <HAL_RCC_OscConfig+0x478>)
 800589c:	2200      	movs	r2, #0
 800589e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058a0:	f7fc f9c8 	bl	8001c34 <HAL_GetTick>
 80058a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058a6:	e008      	b.n	80058ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058a8:	f7fc f9c4 	bl	8001c34 <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d901      	bls.n	80058ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e087      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ba:	4b27      	ldr	r3, [pc, #156]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1f0      	bne.n	80058a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	69da      	ldr	r2, [r3, #28]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a1b      	ldr	r3, [r3, #32]
 80058ce:	431a      	orrs	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d4:	019b      	lsls	r3, r3, #6
 80058d6:	431a      	orrs	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058dc:	085b      	lsrs	r3, r3, #1
 80058de:	3b01      	subs	r3, #1
 80058e0:	041b      	lsls	r3, r3, #16
 80058e2:	431a      	orrs	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e8:	061b      	lsls	r3, r3, #24
 80058ea:	491b      	ldr	r1, [pc, #108]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058f0:	4b1b      	ldr	r3, [pc, #108]	; (8005960 <HAL_RCC_OscConfig+0x478>)
 80058f2:	2201      	movs	r2, #1
 80058f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058f6:	f7fc f99d 	bl	8001c34 <HAL_GetTick>
 80058fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058fc:	e008      	b.n	8005910 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058fe:	f7fc f999 	bl	8001c34 <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	2b02      	cmp	r3, #2
 800590a:	d901      	bls.n	8005910 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e05c      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005910:	4b11      	ldr	r3, [pc, #68]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d0f0      	beq.n	80058fe <HAL_RCC_OscConfig+0x416>
 800591c:	e054      	b.n	80059c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800591e:	4b10      	ldr	r3, [pc, #64]	; (8005960 <HAL_RCC_OscConfig+0x478>)
 8005920:	2200      	movs	r2, #0
 8005922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005924:	f7fc f986 	bl	8001c34 <HAL_GetTick>
 8005928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800592a:	e008      	b.n	800593e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800592c:	f7fc f982 	bl	8001c34 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	2b02      	cmp	r3, #2
 8005938:	d901      	bls.n	800593e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e045      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800593e:	4b06      	ldr	r3, [pc, #24]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1f0      	bne.n	800592c <HAL_RCC_OscConfig+0x444>
 800594a:	e03d      	b.n	80059c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d107      	bne.n	8005964 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e038      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
 8005958:	40023800 	.word	0x40023800
 800595c:	40007000 	.word	0x40007000
 8005960:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005964:	4b1b      	ldr	r3, [pc, #108]	; (80059d4 <HAL_RCC_OscConfig+0x4ec>)
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d028      	beq.n	80059c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800597c:	429a      	cmp	r2, r3
 800597e:	d121      	bne.n	80059c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800598a:	429a      	cmp	r2, r3
 800598c:	d11a      	bne.n	80059c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005994:	4013      	ands	r3, r2
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800599a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800599c:	4293      	cmp	r3, r2
 800599e:	d111      	bne.n	80059c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059aa:	085b      	lsrs	r3, r3, #1
 80059ac:	3b01      	subs	r3, #1
 80059ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d107      	bne.n	80059c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d001      	beq.n	80059c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e000      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3718      	adds	r7, #24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	40023800 	.word	0x40023800

080059d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e0cc      	b.n	8005b86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059ec:	4b68      	ldr	r3, [pc, #416]	; (8005b90 <HAL_RCC_ClockConfig+0x1b8>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0307 	and.w	r3, r3, #7
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d90c      	bls.n	8005a14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059fa:	4b65      	ldr	r3, [pc, #404]	; (8005b90 <HAL_RCC_ClockConfig+0x1b8>)
 80059fc:	683a      	ldr	r2, [r7, #0]
 80059fe:	b2d2      	uxtb	r2, r2
 8005a00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a02:	4b63      	ldr	r3, [pc, #396]	; (8005b90 <HAL_RCC_ClockConfig+0x1b8>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0307 	and.w	r3, r3, #7
 8005a0a:	683a      	ldr	r2, [r7, #0]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d001      	beq.n	8005a14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e0b8      	b.n	8005b86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0302 	and.w	r3, r3, #2
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d020      	beq.n	8005a62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d005      	beq.n	8005a38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a2c:	4b59      	ldr	r3, [pc, #356]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	4a58      	ldr	r2, [pc, #352]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005a32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0308 	and.w	r3, r3, #8
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d005      	beq.n	8005a50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a44:	4b53      	ldr	r3, [pc, #332]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	4a52      	ldr	r2, [pc, #328]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a50:	4b50      	ldr	r3, [pc, #320]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	494d      	ldr	r1, [pc, #308]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d044      	beq.n	8005af8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d107      	bne.n	8005a86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a76:	4b47      	ldr	r3, [pc, #284]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d119      	bne.n	8005ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e07f      	b.n	8005b86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d003      	beq.n	8005a96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a92:	2b03      	cmp	r3, #3
 8005a94:	d107      	bne.n	8005aa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a96:	4b3f      	ldr	r3, [pc, #252]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d109      	bne.n	8005ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e06f      	b.n	8005b86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aa6:	4b3b      	ldr	r3, [pc, #236]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e067      	b.n	8005b86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ab6:	4b37      	ldr	r3, [pc, #220]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f023 0203 	bic.w	r2, r3, #3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	4934      	ldr	r1, [pc, #208]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ac8:	f7fc f8b4 	bl	8001c34 <HAL_GetTick>
 8005acc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ace:	e00a      	b.n	8005ae6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ad0:	f7fc f8b0 	bl	8001c34 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d901      	bls.n	8005ae6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e04f      	b.n	8005b86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ae6:	4b2b      	ldr	r3, [pc, #172]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f003 020c 	and.w	r2, r3, #12
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d1eb      	bne.n	8005ad0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005af8:	4b25      	ldr	r3, [pc, #148]	; (8005b90 <HAL_RCC_ClockConfig+0x1b8>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0307 	and.w	r3, r3, #7
 8005b00:	683a      	ldr	r2, [r7, #0]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d20c      	bcs.n	8005b20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b06:	4b22      	ldr	r3, [pc, #136]	; (8005b90 <HAL_RCC_ClockConfig+0x1b8>)
 8005b08:	683a      	ldr	r2, [r7, #0]
 8005b0a:	b2d2      	uxtb	r2, r2
 8005b0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b0e:	4b20      	ldr	r3, [pc, #128]	; (8005b90 <HAL_RCC_ClockConfig+0x1b8>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0307 	and.w	r3, r3, #7
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d001      	beq.n	8005b20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e032      	b.n	8005b86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0304 	and.w	r3, r3, #4
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d008      	beq.n	8005b3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b2c:	4b19      	ldr	r3, [pc, #100]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	4916      	ldr	r1, [pc, #88]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0308 	and.w	r3, r3, #8
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d009      	beq.n	8005b5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b4a:	4b12      	ldr	r3, [pc, #72]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	00db      	lsls	r3, r3, #3
 8005b58:	490e      	ldr	r1, [pc, #56]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b5e:	f000 f889 	bl	8005c74 <HAL_RCC_GetSysClockFreq>
 8005b62:	4602      	mov	r2, r0
 8005b64:	4b0b      	ldr	r3, [pc, #44]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	091b      	lsrs	r3, r3, #4
 8005b6a:	f003 030f 	and.w	r3, r3, #15
 8005b6e:	490a      	ldr	r1, [pc, #40]	; (8005b98 <HAL_RCC_ClockConfig+0x1c0>)
 8005b70:	5ccb      	ldrb	r3, [r1, r3]
 8005b72:	fa22 f303 	lsr.w	r3, r2, r3
 8005b76:	4a09      	ldr	r2, [pc, #36]	; (8005b9c <HAL_RCC_ClockConfig+0x1c4>)
 8005b78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b7a:	4b09      	ldr	r3, [pc, #36]	; (8005ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7fc f814 	bl	8001bac <HAL_InitTick>

  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	40023c00 	.word	0x40023c00
 8005b94:	40023800 	.word	0x40023800
 8005b98:	08009360 	.word	0x08009360
 8005b9c:	20000000 	.word	0x20000000
 8005ba0:	20000004 	.word	0x20000004

08005ba4 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b08c      	sub	sp, #48	; 0x30
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d129      	bne.n	8005c0a <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	61bb      	str	r3, [r7, #24]
 8005bba:	4b2b      	ldr	r3, [pc, #172]	; (8005c68 <HAL_RCC_MCOConfig+0xc4>)
 8005bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bbe:	4a2a      	ldr	r2, [pc, #168]	; (8005c68 <HAL_RCC_MCOConfig+0xc4>)
 8005bc0:	f043 0301 	orr.w	r3, r3, #1
 8005bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8005bc6:	4b28      	ldr	r3, [pc, #160]	; (8005c68 <HAL_RCC_MCOConfig+0xc4>)
 8005bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	61bb      	str	r3, [r7, #24]
 8005bd0:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005bd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bd8:	2302      	movs	r3, #2
 8005bda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005be0:	2300      	movs	r3, #0
 8005be2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005be4:	2300      	movs	r3, #0
 8005be6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005be8:	f107 031c 	add.w	r3, r7, #28
 8005bec:	4619      	mov	r1, r3
 8005bee:	481f      	ldr	r0, [pc, #124]	; (8005c6c <HAL_RCC_MCOConfig+0xc8>)
 8005bf0:	f7fe f99e 	bl	8003f30 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005bf4:	4b1c      	ldr	r3, [pc, #112]	; (8005c68 <HAL_RCC_MCOConfig+0xc4>)
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8005bfc:	68b9      	ldr	r1, [r7, #8]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	430b      	orrs	r3, r1
 8005c02:	4919      	ldr	r1, [pc, #100]	; (8005c68 <HAL_RCC_MCOConfig+0xc4>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8005c08:	e029      	b.n	8005c5e <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	617b      	str	r3, [r7, #20]
 8005c0e:	4b16      	ldr	r3, [pc, #88]	; (8005c68 <HAL_RCC_MCOConfig+0xc4>)
 8005c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c12:	4a15      	ldr	r2, [pc, #84]	; (8005c68 <HAL_RCC_MCOConfig+0xc4>)
 8005c14:	f043 0304 	orr.w	r3, r3, #4
 8005c18:	6313      	str	r3, [r2, #48]	; 0x30
 8005c1a:	4b13      	ldr	r3, [pc, #76]	; (8005c68 <HAL_RCC_MCOConfig+0xc4>)
 8005c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1e:	f003 0304 	and.w	r3, r3, #4
 8005c22:	617b      	str	r3, [r7, #20]
 8005c24:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005c26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c30:	2303      	movs	r3, #3
 8005c32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c34:	2300      	movs	r3, #0
 8005c36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005c3c:	f107 031c 	add.w	r3, r7, #28
 8005c40:	4619      	mov	r1, r3
 8005c42:	480b      	ldr	r0, [pc, #44]	; (8005c70 <HAL_RCC_MCOConfig+0xcc>)
 8005c44:	f7fe f974 	bl	8003f30 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8005c48:	4b07      	ldr	r3, [pc, #28]	; (8005c68 <HAL_RCC_MCOConfig+0xc4>)
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	00d9      	lsls	r1, r3, #3
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	430b      	orrs	r3, r1
 8005c58:	4903      	ldr	r1, [pc, #12]	; (8005c68 <HAL_RCC_MCOConfig+0xc4>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	608b      	str	r3, [r1, #8]
}
 8005c5e:	bf00      	nop
 8005c60:	3730      	adds	r7, #48	; 0x30
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	40023800 	.word	0x40023800
 8005c6c:	40020000 	.word	0x40020000
 8005c70:	40020800 	.word	0x40020800

08005c74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c78:	b094      	sub	sp, #80	; 0x50
 8005c7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	647b      	str	r3, [r7, #68]	; 0x44
 8005c80:	2300      	movs	r3, #0
 8005c82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c84:	2300      	movs	r3, #0
 8005c86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c8c:	4b79      	ldr	r3, [pc, #484]	; (8005e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	f003 030c 	and.w	r3, r3, #12
 8005c94:	2b08      	cmp	r3, #8
 8005c96:	d00d      	beq.n	8005cb4 <HAL_RCC_GetSysClockFreq+0x40>
 8005c98:	2b08      	cmp	r3, #8
 8005c9a:	f200 80e1 	bhi.w	8005e60 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d002      	beq.n	8005ca8 <HAL_RCC_GetSysClockFreq+0x34>
 8005ca2:	2b04      	cmp	r3, #4
 8005ca4:	d003      	beq.n	8005cae <HAL_RCC_GetSysClockFreq+0x3a>
 8005ca6:	e0db      	b.n	8005e60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ca8:	4b73      	ldr	r3, [pc, #460]	; (8005e78 <HAL_RCC_GetSysClockFreq+0x204>)
 8005caa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005cac:	e0db      	b.n	8005e66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005cae:	4b73      	ldr	r3, [pc, #460]	; (8005e7c <HAL_RCC_GetSysClockFreq+0x208>)
 8005cb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005cb2:	e0d8      	b.n	8005e66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005cb4:	4b6f      	ldr	r3, [pc, #444]	; (8005e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cbc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005cbe:	4b6d      	ldr	r3, [pc, #436]	; (8005e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d063      	beq.n	8005d92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cca:	4b6a      	ldr	r3, [pc, #424]	; (8005e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	099b      	lsrs	r3, r3, #6
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cd4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cdc:	633b      	str	r3, [r7, #48]	; 0x30
 8005cde:	2300      	movs	r3, #0
 8005ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ce2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005ce6:	4622      	mov	r2, r4
 8005ce8:	462b      	mov	r3, r5
 8005cea:	f04f 0000 	mov.w	r0, #0
 8005cee:	f04f 0100 	mov.w	r1, #0
 8005cf2:	0159      	lsls	r1, r3, #5
 8005cf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cf8:	0150      	lsls	r0, r2, #5
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	4621      	mov	r1, r4
 8005d00:	1a51      	subs	r1, r2, r1
 8005d02:	6139      	str	r1, [r7, #16]
 8005d04:	4629      	mov	r1, r5
 8005d06:	eb63 0301 	sbc.w	r3, r3, r1
 8005d0a:	617b      	str	r3, [r7, #20]
 8005d0c:	f04f 0200 	mov.w	r2, #0
 8005d10:	f04f 0300 	mov.w	r3, #0
 8005d14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d18:	4659      	mov	r1, fp
 8005d1a:	018b      	lsls	r3, r1, #6
 8005d1c:	4651      	mov	r1, sl
 8005d1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d22:	4651      	mov	r1, sl
 8005d24:	018a      	lsls	r2, r1, #6
 8005d26:	4651      	mov	r1, sl
 8005d28:	ebb2 0801 	subs.w	r8, r2, r1
 8005d2c:	4659      	mov	r1, fp
 8005d2e:	eb63 0901 	sbc.w	r9, r3, r1
 8005d32:	f04f 0200 	mov.w	r2, #0
 8005d36:	f04f 0300 	mov.w	r3, #0
 8005d3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d46:	4690      	mov	r8, r2
 8005d48:	4699      	mov	r9, r3
 8005d4a:	4623      	mov	r3, r4
 8005d4c:	eb18 0303 	adds.w	r3, r8, r3
 8005d50:	60bb      	str	r3, [r7, #8]
 8005d52:	462b      	mov	r3, r5
 8005d54:	eb49 0303 	adc.w	r3, r9, r3
 8005d58:	60fb      	str	r3, [r7, #12]
 8005d5a:	f04f 0200 	mov.w	r2, #0
 8005d5e:	f04f 0300 	mov.w	r3, #0
 8005d62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005d66:	4629      	mov	r1, r5
 8005d68:	024b      	lsls	r3, r1, #9
 8005d6a:	4621      	mov	r1, r4
 8005d6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005d70:	4621      	mov	r1, r4
 8005d72:	024a      	lsls	r2, r1, #9
 8005d74:	4610      	mov	r0, r2
 8005d76:	4619      	mov	r1, r3
 8005d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d84:	f7fa fa74 	bl	8000270 <__aeabi_uldivmod>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d90:	e058      	b.n	8005e44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d92:	4b38      	ldr	r3, [pc, #224]	; (8005e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	099b      	lsrs	r3, r3, #6
 8005d98:	2200      	movs	r2, #0
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	4611      	mov	r1, r2
 8005d9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005da2:	623b      	str	r3, [r7, #32]
 8005da4:	2300      	movs	r3, #0
 8005da6:	627b      	str	r3, [r7, #36]	; 0x24
 8005da8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005dac:	4642      	mov	r2, r8
 8005dae:	464b      	mov	r3, r9
 8005db0:	f04f 0000 	mov.w	r0, #0
 8005db4:	f04f 0100 	mov.w	r1, #0
 8005db8:	0159      	lsls	r1, r3, #5
 8005dba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005dbe:	0150      	lsls	r0, r2, #5
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	4641      	mov	r1, r8
 8005dc6:	ebb2 0a01 	subs.w	sl, r2, r1
 8005dca:	4649      	mov	r1, r9
 8005dcc:	eb63 0b01 	sbc.w	fp, r3, r1
 8005dd0:	f04f 0200 	mov.w	r2, #0
 8005dd4:	f04f 0300 	mov.w	r3, #0
 8005dd8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ddc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005de0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005de4:	ebb2 040a 	subs.w	r4, r2, sl
 8005de8:	eb63 050b 	sbc.w	r5, r3, fp
 8005dec:	f04f 0200 	mov.w	r2, #0
 8005df0:	f04f 0300 	mov.w	r3, #0
 8005df4:	00eb      	lsls	r3, r5, #3
 8005df6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005dfa:	00e2      	lsls	r2, r4, #3
 8005dfc:	4614      	mov	r4, r2
 8005dfe:	461d      	mov	r5, r3
 8005e00:	4643      	mov	r3, r8
 8005e02:	18e3      	adds	r3, r4, r3
 8005e04:	603b      	str	r3, [r7, #0]
 8005e06:	464b      	mov	r3, r9
 8005e08:	eb45 0303 	adc.w	r3, r5, r3
 8005e0c:	607b      	str	r3, [r7, #4]
 8005e0e:	f04f 0200 	mov.w	r2, #0
 8005e12:	f04f 0300 	mov.w	r3, #0
 8005e16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e1a:	4629      	mov	r1, r5
 8005e1c:	028b      	lsls	r3, r1, #10
 8005e1e:	4621      	mov	r1, r4
 8005e20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e24:	4621      	mov	r1, r4
 8005e26:	028a      	lsls	r2, r1, #10
 8005e28:	4610      	mov	r0, r2
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e2e:	2200      	movs	r2, #0
 8005e30:	61bb      	str	r3, [r7, #24]
 8005e32:	61fa      	str	r2, [r7, #28]
 8005e34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e38:	f7fa fa1a 	bl	8000270 <__aeabi_uldivmod>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	460b      	mov	r3, r1
 8005e40:	4613      	mov	r3, r2
 8005e42:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005e44:	4b0b      	ldr	r3, [pc, #44]	; (8005e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	0c1b      	lsrs	r3, r3, #16
 8005e4a:	f003 0303 	and.w	r3, r3, #3
 8005e4e:	3301      	adds	r3, #1
 8005e50:	005b      	lsls	r3, r3, #1
 8005e52:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005e54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e5e:	e002      	b.n	8005e66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e60:	4b05      	ldr	r3, [pc, #20]	; (8005e78 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3750      	adds	r7, #80	; 0x50
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e72:	bf00      	nop
 8005e74:	40023800 	.word	0x40023800
 8005e78:	00f42400 	.word	0x00f42400
 8005e7c:	007a1200 	.word	0x007a1200

08005e80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e80:	b480      	push	{r7}
 8005e82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e84:	4b03      	ldr	r3, [pc, #12]	; (8005e94 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e86:	681b      	ldr	r3, [r3, #0]
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	20000000 	.word	0x20000000

08005e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e9c:	f7ff fff0 	bl	8005e80 <HAL_RCC_GetHCLKFreq>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	4b05      	ldr	r3, [pc, #20]	; (8005eb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	0a9b      	lsrs	r3, r3, #10
 8005ea8:	f003 0307 	and.w	r3, r3, #7
 8005eac:	4903      	ldr	r1, [pc, #12]	; (8005ebc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005eae:	5ccb      	ldrb	r3, [r1, r3]
 8005eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	40023800 	.word	0x40023800
 8005ebc:	08009370 	.word	0x08009370

08005ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005ec4:	f7ff ffdc 	bl	8005e80 <HAL_RCC_GetHCLKFreq>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	4b05      	ldr	r3, [pc, #20]	; (8005ee0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	0b5b      	lsrs	r3, r3, #13
 8005ed0:	f003 0307 	and.w	r3, r3, #7
 8005ed4:	4903      	ldr	r1, [pc, #12]	; (8005ee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ed6:	5ccb      	ldrb	r3, [r1, r3]
 8005ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	40023800 	.word	0x40023800
 8005ee4:	08009370 	.word	0x08009370

08005ee8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e038      	b.n	8005f70 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d106      	bne.n	8005f18 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f7fb fcc6 	bl	80018a4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	3308      	adds	r3, #8
 8005f20:	4619      	mov	r1, r3
 8005f22:	4610      	mov	r0, r2
 8005f24:	f002 f930 	bl	8008188 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6818      	ldr	r0, [r3, #0]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	461a      	mov	r2, r3
 8005f32:	68b9      	ldr	r1, [r7, #8]
 8005f34:	f002 f992 	bl	800825c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6858      	ldr	r0, [r3, #4]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	689a      	ldr	r2, [r3, #8]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f44:	6879      	ldr	r1, [r7, #4]
 8005f46:	f002 f9bf 	bl	80082c8 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	6892      	ldr	r2, [r2, #8]
 8005f52:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	6892      	ldr	r2, [r2, #8]
 8005f5e:	f041 0101 	orr.w	r1, r1, #1
 8005f62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e041      	b.n	800600e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d106      	bne.n	8005fa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7fb fadc 	bl	800155c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	3304      	adds	r3, #4
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	4610      	mov	r0, r2
 8005fb8:	f000 fc12 	bl	80067e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3708      	adds	r7, #8
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006016:	b580      	push	{r7, lr}
 8006018:	b082      	sub	sp, #8
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d101      	bne.n	8006028 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e041      	b.n	80060ac <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800602e:	b2db      	uxtb	r3, r3
 8006030:	2b00      	cmp	r3, #0
 8006032:	d106      	bne.n	8006042 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 f839 	bl	80060b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2202      	movs	r2, #2
 8006046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	3304      	adds	r3, #4
 8006052:	4619      	mov	r1, r3
 8006054:	4610      	mov	r0, r2
 8006056:	f000 fbc3 	bl	80067e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3708      	adds	r7, #8
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d109      	bne.n	80060ec <HAL_TIM_PWM_Start+0x24>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	bf14      	ite	ne
 80060e4:	2301      	movne	r3, #1
 80060e6:	2300      	moveq	r3, #0
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	e022      	b.n	8006132 <HAL_TIM_PWM_Start+0x6a>
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	2b04      	cmp	r3, #4
 80060f0:	d109      	bne.n	8006106 <HAL_TIM_PWM_Start+0x3e>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	bf14      	ite	ne
 80060fe:	2301      	movne	r3, #1
 8006100:	2300      	moveq	r3, #0
 8006102:	b2db      	uxtb	r3, r3
 8006104:	e015      	b.n	8006132 <HAL_TIM_PWM_Start+0x6a>
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	2b08      	cmp	r3, #8
 800610a:	d109      	bne.n	8006120 <HAL_TIM_PWM_Start+0x58>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b01      	cmp	r3, #1
 8006116:	bf14      	ite	ne
 8006118:	2301      	movne	r3, #1
 800611a:	2300      	moveq	r3, #0
 800611c:	b2db      	uxtb	r3, r3
 800611e:	e008      	b.n	8006132 <HAL_TIM_PWM_Start+0x6a>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006126:	b2db      	uxtb	r3, r3
 8006128:	2b01      	cmp	r3, #1
 800612a:	bf14      	ite	ne
 800612c:	2301      	movne	r3, #1
 800612e:	2300      	moveq	r3, #0
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d001      	beq.n	800613a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e07c      	b.n	8006234 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d104      	bne.n	800614a <HAL_TIM_PWM_Start+0x82>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2202      	movs	r2, #2
 8006144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006148:	e013      	b.n	8006172 <HAL_TIM_PWM_Start+0xaa>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b04      	cmp	r3, #4
 800614e:	d104      	bne.n	800615a <HAL_TIM_PWM_Start+0x92>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2202      	movs	r2, #2
 8006154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006158:	e00b      	b.n	8006172 <HAL_TIM_PWM_Start+0xaa>
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	2b08      	cmp	r3, #8
 800615e:	d104      	bne.n	800616a <HAL_TIM_PWM_Start+0xa2>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2202      	movs	r2, #2
 8006164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006168:	e003      	b.n	8006172 <HAL_TIM_PWM_Start+0xaa>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2202      	movs	r2, #2
 800616e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2201      	movs	r2, #1
 8006178:	6839      	ldr	r1, [r7, #0]
 800617a:	4618      	mov	r0, r3
 800617c:	f000 fe1a 	bl	8006db4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a2d      	ldr	r2, [pc, #180]	; (800623c <HAL_TIM_PWM_Start+0x174>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d004      	beq.n	8006194 <HAL_TIM_PWM_Start+0xcc>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a2c      	ldr	r2, [pc, #176]	; (8006240 <HAL_TIM_PWM_Start+0x178>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d101      	bne.n	8006198 <HAL_TIM_PWM_Start+0xd0>
 8006194:	2301      	movs	r3, #1
 8006196:	e000      	b.n	800619a <HAL_TIM_PWM_Start+0xd2>
 8006198:	2300      	movs	r3, #0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d007      	beq.n	80061ae <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a22      	ldr	r2, [pc, #136]	; (800623c <HAL_TIM_PWM_Start+0x174>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d022      	beq.n	80061fe <HAL_TIM_PWM_Start+0x136>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061c0:	d01d      	beq.n	80061fe <HAL_TIM_PWM_Start+0x136>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a1f      	ldr	r2, [pc, #124]	; (8006244 <HAL_TIM_PWM_Start+0x17c>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d018      	beq.n	80061fe <HAL_TIM_PWM_Start+0x136>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a1d      	ldr	r2, [pc, #116]	; (8006248 <HAL_TIM_PWM_Start+0x180>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d013      	beq.n	80061fe <HAL_TIM_PWM_Start+0x136>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a1c      	ldr	r2, [pc, #112]	; (800624c <HAL_TIM_PWM_Start+0x184>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d00e      	beq.n	80061fe <HAL_TIM_PWM_Start+0x136>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a16      	ldr	r2, [pc, #88]	; (8006240 <HAL_TIM_PWM_Start+0x178>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d009      	beq.n	80061fe <HAL_TIM_PWM_Start+0x136>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a18      	ldr	r2, [pc, #96]	; (8006250 <HAL_TIM_PWM_Start+0x188>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d004      	beq.n	80061fe <HAL_TIM_PWM_Start+0x136>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a16      	ldr	r2, [pc, #88]	; (8006254 <HAL_TIM_PWM_Start+0x18c>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d111      	bne.n	8006222 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	f003 0307 	and.w	r3, r3, #7
 8006208:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2b06      	cmp	r3, #6
 800620e:	d010      	beq.n	8006232 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f042 0201 	orr.w	r2, r2, #1
 800621e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006220:	e007      	b.n	8006232 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f042 0201 	orr.w	r2, r2, #1
 8006230:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	40010000 	.word	0x40010000
 8006240:	40010400 	.word	0x40010400
 8006244:	40000400 	.word	0x40000400
 8006248:	40000800 	.word	0x40000800
 800624c:	40000c00 	.word	0x40000c00
 8006250:	40014000 	.word	0x40014000
 8006254:	40001800 	.word	0x40001800

08006258 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	f003 0302 	and.w	r3, r3, #2
 800626a:	2b02      	cmp	r3, #2
 800626c:	d122      	bne.n	80062b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	f003 0302 	and.w	r3, r3, #2
 8006278:	2b02      	cmp	r3, #2
 800627a:	d11b      	bne.n	80062b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f06f 0202 	mvn.w	r2, #2
 8006284:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	f003 0303 	and.w	r3, r3, #3
 8006296:	2b00      	cmp	r3, #0
 8006298:	d003      	beq.n	80062a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fa81 	bl	80067a2 <HAL_TIM_IC_CaptureCallback>
 80062a0:	e005      	b.n	80062ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 fa73 	bl	800678e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 fa84 	bl	80067b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	f003 0304 	and.w	r3, r3, #4
 80062be:	2b04      	cmp	r3, #4
 80062c0:	d122      	bne.n	8006308 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	f003 0304 	and.w	r3, r3, #4
 80062cc:	2b04      	cmp	r3, #4
 80062ce:	d11b      	bne.n	8006308 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f06f 0204 	mvn.w	r2, #4
 80062d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2202      	movs	r2, #2
 80062de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fa57 	bl	80067a2 <HAL_TIM_IC_CaptureCallback>
 80062f4:	e005      	b.n	8006302 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 fa49 	bl	800678e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 fa5a 	bl	80067b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	f003 0308 	and.w	r3, r3, #8
 8006312:	2b08      	cmp	r3, #8
 8006314:	d122      	bne.n	800635c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	f003 0308 	and.w	r3, r3, #8
 8006320:	2b08      	cmp	r3, #8
 8006322:	d11b      	bne.n	800635c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f06f 0208 	mvn.w	r2, #8
 800632c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2204      	movs	r2, #4
 8006332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	f003 0303 	and.w	r3, r3, #3
 800633e:	2b00      	cmp	r3, #0
 8006340:	d003      	beq.n	800634a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 fa2d 	bl	80067a2 <HAL_TIM_IC_CaptureCallback>
 8006348:	e005      	b.n	8006356 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fa1f 	bl	800678e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 fa30 	bl	80067b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	f003 0310 	and.w	r3, r3, #16
 8006366:	2b10      	cmp	r3, #16
 8006368:	d122      	bne.n	80063b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	f003 0310 	and.w	r3, r3, #16
 8006374:	2b10      	cmp	r3, #16
 8006376:	d11b      	bne.n	80063b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f06f 0210 	mvn.w	r2, #16
 8006380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2208      	movs	r2, #8
 8006386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	69db      	ldr	r3, [r3, #28]
 800638e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006392:	2b00      	cmp	r3, #0
 8006394:	d003      	beq.n	800639e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 fa03 	bl	80067a2 <HAL_TIM_IC_CaptureCallback>
 800639c:	e005      	b.n	80063aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f9f5 	bl	800678e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 fa06 	bl	80067b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d10e      	bne.n	80063dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	f003 0301 	and.w	r3, r3, #1
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d107      	bne.n	80063dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f06f 0201 	mvn.w	r2, #1
 80063d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f9cf 	bl	800677a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e6:	2b80      	cmp	r3, #128	; 0x80
 80063e8:	d10e      	bne.n	8006408 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063f4:	2b80      	cmp	r3, #128	; 0x80
 80063f6:	d107      	bne.n	8006408 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fd82 	bl	8006f0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006412:	2b40      	cmp	r3, #64	; 0x40
 8006414:	d10e      	bne.n	8006434 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006420:	2b40      	cmp	r3, #64	; 0x40
 8006422:	d107      	bne.n	8006434 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800642c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f9cb 	bl	80067ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	f003 0320 	and.w	r3, r3, #32
 800643e:	2b20      	cmp	r3, #32
 8006440:	d10e      	bne.n	8006460 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	f003 0320 	and.w	r3, r3, #32
 800644c:	2b20      	cmp	r3, #32
 800644e:	d107      	bne.n	8006460 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f06f 0220 	mvn.w	r2, #32
 8006458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 fd4c 	bl	8006ef8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006460:	bf00      	nop
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b086      	sub	sp, #24
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006474:	2300      	movs	r3, #0
 8006476:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800647e:	2b01      	cmp	r3, #1
 8006480:	d101      	bne.n	8006486 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006482:	2302      	movs	r3, #2
 8006484:	e0ae      	b.n	80065e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2b0c      	cmp	r3, #12
 8006492:	f200 809f 	bhi.w	80065d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006496:	a201      	add	r2, pc, #4	; (adr r2, 800649c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649c:	080064d1 	.word	0x080064d1
 80064a0:	080065d5 	.word	0x080065d5
 80064a4:	080065d5 	.word	0x080065d5
 80064a8:	080065d5 	.word	0x080065d5
 80064ac:	08006511 	.word	0x08006511
 80064b0:	080065d5 	.word	0x080065d5
 80064b4:	080065d5 	.word	0x080065d5
 80064b8:	080065d5 	.word	0x080065d5
 80064bc:	08006553 	.word	0x08006553
 80064c0:	080065d5 	.word	0x080065d5
 80064c4:	080065d5 	.word	0x080065d5
 80064c8:	080065d5 	.word	0x080065d5
 80064cc:	08006593 	.word	0x08006593
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68b9      	ldr	r1, [r7, #8]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 fa22 	bl	8006920 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	699a      	ldr	r2, [r3, #24]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f042 0208 	orr.w	r2, r2, #8
 80064ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	699a      	ldr	r2, [r3, #24]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f022 0204 	bic.w	r2, r2, #4
 80064fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6999      	ldr	r1, [r3, #24]
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	691a      	ldr	r2, [r3, #16]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	430a      	orrs	r2, r1
 800650c:	619a      	str	r2, [r3, #24]
      break;
 800650e:	e064      	b.n	80065da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68b9      	ldr	r1, [r7, #8]
 8006516:	4618      	mov	r0, r3
 8006518:	f000 fa72 	bl	8006a00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	699a      	ldr	r2, [r3, #24]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800652a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	699a      	ldr	r2, [r3, #24]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800653a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6999      	ldr	r1, [r3, #24]
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	021a      	lsls	r2, r3, #8
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	430a      	orrs	r2, r1
 800654e:	619a      	str	r2, [r3, #24]
      break;
 8006550:	e043      	b.n	80065da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68b9      	ldr	r1, [r7, #8]
 8006558:	4618      	mov	r0, r3
 800655a:	f000 fac7 	bl	8006aec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	69da      	ldr	r2, [r3, #28]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f042 0208 	orr.w	r2, r2, #8
 800656c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	69da      	ldr	r2, [r3, #28]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f022 0204 	bic.w	r2, r2, #4
 800657c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	69d9      	ldr	r1, [r3, #28]
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	691a      	ldr	r2, [r3, #16]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	430a      	orrs	r2, r1
 800658e:	61da      	str	r2, [r3, #28]
      break;
 8006590:	e023      	b.n	80065da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68b9      	ldr	r1, [r7, #8]
 8006598:	4618      	mov	r0, r3
 800659a:	f000 fb1b 	bl	8006bd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	69da      	ldr	r2, [r3, #28]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	69da      	ldr	r2, [r3, #28]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	69d9      	ldr	r1, [r3, #28]
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	021a      	lsls	r2, r3, #8
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	430a      	orrs	r2, r1
 80065d0:	61da      	str	r2, [r3, #28]
      break;
 80065d2:	e002      	b.n	80065da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	75fb      	strb	r3, [r7, #23]
      break;
 80065d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3718      	adds	r7, #24
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065f6:	2300      	movs	r3, #0
 80065f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006600:	2b01      	cmp	r3, #1
 8006602:	d101      	bne.n	8006608 <HAL_TIM_ConfigClockSource+0x1c>
 8006604:	2302      	movs	r3, #2
 8006606:	e0b4      	b.n	8006772 <HAL_TIM_ConfigClockSource+0x186>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2202      	movs	r2, #2
 8006614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006626:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800662e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006640:	d03e      	beq.n	80066c0 <HAL_TIM_ConfigClockSource+0xd4>
 8006642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006646:	f200 8087 	bhi.w	8006758 <HAL_TIM_ConfigClockSource+0x16c>
 800664a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800664e:	f000 8086 	beq.w	800675e <HAL_TIM_ConfigClockSource+0x172>
 8006652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006656:	d87f      	bhi.n	8006758 <HAL_TIM_ConfigClockSource+0x16c>
 8006658:	2b70      	cmp	r3, #112	; 0x70
 800665a:	d01a      	beq.n	8006692 <HAL_TIM_ConfigClockSource+0xa6>
 800665c:	2b70      	cmp	r3, #112	; 0x70
 800665e:	d87b      	bhi.n	8006758 <HAL_TIM_ConfigClockSource+0x16c>
 8006660:	2b60      	cmp	r3, #96	; 0x60
 8006662:	d050      	beq.n	8006706 <HAL_TIM_ConfigClockSource+0x11a>
 8006664:	2b60      	cmp	r3, #96	; 0x60
 8006666:	d877      	bhi.n	8006758 <HAL_TIM_ConfigClockSource+0x16c>
 8006668:	2b50      	cmp	r3, #80	; 0x50
 800666a:	d03c      	beq.n	80066e6 <HAL_TIM_ConfigClockSource+0xfa>
 800666c:	2b50      	cmp	r3, #80	; 0x50
 800666e:	d873      	bhi.n	8006758 <HAL_TIM_ConfigClockSource+0x16c>
 8006670:	2b40      	cmp	r3, #64	; 0x40
 8006672:	d058      	beq.n	8006726 <HAL_TIM_ConfigClockSource+0x13a>
 8006674:	2b40      	cmp	r3, #64	; 0x40
 8006676:	d86f      	bhi.n	8006758 <HAL_TIM_ConfigClockSource+0x16c>
 8006678:	2b30      	cmp	r3, #48	; 0x30
 800667a:	d064      	beq.n	8006746 <HAL_TIM_ConfigClockSource+0x15a>
 800667c:	2b30      	cmp	r3, #48	; 0x30
 800667e:	d86b      	bhi.n	8006758 <HAL_TIM_ConfigClockSource+0x16c>
 8006680:	2b20      	cmp	r3, #32
 8006682:	d060      	beq.n	8006746 <HAL_TIM_ConfigClockSource+0x15a>
 8006684:	2b20      	cmp	r3, #32
 8006686:	d867      	bhi.n	8006758 <HAL_TIM_ConfigClockSource+0x16c>
 8006688:	2b00      	cmp	r3, #0
 800668a:	d05c      	beq.n	8006746 <HAL_TIM_ConfigClockSource+0x15a>
 800668c:	2b10      	cmp	r3, #16
 800668e:	d05a      	beq.n	8006746 <HAL_TIM_ConfigClockSource+0x15a>
 8006690:	e062      	b.n	8006758 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6818      	ldr	r0, [r3, #0]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	6899      	ldr	r1, [r3, #8]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	685a      	ldr	r2, [r3, #4]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	f000 fb67 	bl	8006d74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68ba      	ldr	r2, [r7, #8]
 80066bc:	609a      	str	r2, [r3, #8]
      break;
 80066be:	e04f      	b.n	8006760 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6818      	ldr	r0, [r3, #0]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	6899      	ldr	r1, [r3, #8]
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	f000 fb50 	bl	8006d74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	689a      	ldr	r2, [r3, #8]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066e2:	609a      	str	r2, [r3, #8]
      break;
 80066e4:	e03c      	b.n	8006760 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6818      	ldr	r0, [r3, #0]
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	6859      	ldr	r1, [r3, #4]
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	461a      	mov	r2, r3
 80066f4:	f000 fac4 	bl	8006c80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2150      	movs	r1, #80	; 0x50
 80066fe:	4618      	mov	r0, r3
 8006700:	f000 fb1d 	bl	8006d3e <TIM_ITRx_SetConfig>
      break;
 8006704:	e02c      	b.n	8006760 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6818      	ldr	r0, [r3, #0]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	6859      	ldr	r1, [r3, #4]
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	461a      	mov	r2, r3
 8006714:	f000 fae3 	bl	8006cde <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2160      	movs	r1, #96	; 0x60
 800671e:	4618      	mov	r0, r3
 8006720:	f000 fb0d 	bl	8006d3e <TIM_ITRx_SetConfig>
      break;
 8006724:	e01c      	b.n	8006760 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6818      	ldr	r0, [r3, #0]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	6859      	ldr	r1, [r3, #4]
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	461a      	mov	r2, r3
 8006734:	f000 faa4 	bl	8006c80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2140      	movs	r1, #64	; 0x40
 800673e:	4618      	mov	r0, r3
 8006740:	f000 fafd 	bl	8006d3e <TIM_ITRx_SetConfig>
      break;
 8006744:	e00c      	b.n	8006760 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4619      	mov	r1, r3
 8006750:	4610      	mov	r0, r2
 8006752:	f000 faf4 	bl	8006d3e <TIM_ITRx_SetConfig>
      break;
 8006756:	e003      	b.n	8006760 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	73fb      	strb	r3, [r7, #15]
      break;
 800675c:	e000      	b.n	8006760 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800675e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006770:	7bfb      	ldrb	r3, [r7, #15]
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800677a:	b480      	push	{r7}
 800677c:	b083      	sub	sp, #12
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006782:	bf00      	nop
 8006784:	370c      	adds	r7, #12
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr

0800678e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800678e:	b480      	push	{r7}
 8006790:	b083      	sub	sp, #12
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006796:	bf00      	nop
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b083      	sub	sp, #12
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067aa:	bf00      	nop
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067b6:	b480      	push	{r7}
 80067b8:	b083      	sub	sp, #12
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067be:	bf00      	nop
 80067c0:	370c      	adds	r7, #12
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b083      	sub	sp, #12
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067d2:	bf00      	nop
 80067d4:	370c      	adds	r7, #12
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr
	...

080067e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a40      	ldr	r2, [pc, #256]	; (80068f4 <TIM_Base_SetConfig+0x114>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d013      	beq.n	8006820 <TIM_Base_SetConfig+0x40>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067fe:	d00f      	beq.n	8006820 <TIM_Base_SetConfig+0x40>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a3d      	ldr	r2, [pc, #244]	; (80068f8 <TIM_Base_SetConfig+0x118>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d00b      	beq.n	8006820 <TIM_Base_SetConfig+0x40>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a3c      	ldr	r2, [pc, #240]	; (80068fc <TIM_Base_SetConfig+0x11c>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d007      	beq.n	8006820 <TIM_Base_SetConfig+0x40>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a3b      	ldr	r2, [pc, #236]	; (8006900 <TIM_Base_SetConfig+0x120>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d003      	beq.n	8006820 <TIM_Base_SetConfig+0x40>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a3a      	ldr	r2, [pc, #232]	; (8006904 <TIM_Base_SetConfig+0x124>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d108      	bne.n	8006832 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006826:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	4313      	orrs	r3, r2
 8006830:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a2f      	ldr	r2, [pc, #188]	; (80068f4 <TIM_Base_SetConfig+0x114>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d02b      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006840:	d027      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a2c      	ldr	r2, [pc, #176]	; (80068f8 <TIM_Base_SetConfig+0x118>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d023      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a2b      	ldr	r2, [pc, #172]	; (80068fc <TIM_Base_SetConfig+0x11c>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d01f      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a2a      	ldr	r2, [pc, #168]	; (8006900 <TIM_Base_SetConfig+0x120>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d01b      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a29      	ldr	r2, [pc, #164]	; (8006904 <TIM_Base_SetConfig+0x124>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d017      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a28      	ldr	r2, [pc, #160]	; (8006908 <TIM_Base_SetConfig+0x128>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d013      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a27      	ldr	r2, [pc, #156]	; (800690c <TIM_Base_SetConfig+0x12c>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d00f      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a26      	ldr	r2, [pc, #152]	; (8006910 <TIM_Base_SetConfig+0x130>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d00b      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4a25      	ldr	r2, [pc, #148]	; (8006914 <TIM_Base_SetConfig+0x134>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d007      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a24      	ldr	r2, [pc, #144]	; (8006918 <TIM_Base_SetConfig+0x138>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d003      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a23      	ldr	r2, [pc, #140]	; (800691c <TIM_Base_SetConfig+0x13c>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d108      	bne.n	80068a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006898:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	689a      	ldr	r2, [r3, #8]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a0a      	ldr	r2, [pc, #40]	; (80068f4 <TIM_Base_SetConfig+0x114>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d003      	beq.n	80068d8 <TIM_Base_SetConfig+0xf8>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a0c      	ldr	r2, [pc, #48]	; (8006904 <TIM_Base_SetConfig+0x124>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d103      	bne.n	80068e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	691a      	ldr	r2, [r3, #16]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	615a      	str	r2, [r3, #20]
}
 80068e6:	bf00      	nop
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	40010000 	.word	0x40010000
 80068f8:	40000400 	.word	0x40000400
 80068fc:	40000800 	.word	0x40000800
 8006900:	40000c00 	.word	0x40000c00
 8006904:	40010400 	.word	0x40010400
 8006908:	40014000 	.word	0x40014000
 800690c:	40014400 	.word	0x40014400
 8006910:	40014800 	.word	0x40014800
 8006914:	40001800 	.word	0x40001800
 8006918:	40001c00 	.word	0x40001c00
 800691c:	40002000 	.word	0x40002000

08006920 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006920:	b480      	push	{r7}
 8006922:	b087      	sub	sp, #28
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	f023 0201 	bic.w	r2, r3, #1
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800694e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f023 0303 	bic.w	r3, r3, #3
 8006956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	4313      	orrs	r3, r2
 8006960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f023 0302 	bic.w	r3, r3, #2
 8006968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	4313      	orrs	r3, r2
 8006972:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a20      	ldr	r2, [pc, #128]	; (80069f8 <TIM_OC1_SetConfig+0xd8>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d003      	beq.n	8006984 <TIM_OC1_SetConfig+0x64>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a1f      	ldr	r2, [pc, #124]	; (80069fc <TIM_OC1_SetConfig+0xdc>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d10c      	bne.n	800699e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	f023 0308 	bic.w	r3, r3, #8
 800698a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	4313      	orrs	r3, r2
 8006994:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f023 0304 	bic.w	r3, r3, #4
 800699c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a15      	ldr	r2, [pc, #84]	; (80069f8 <TIM_OC1_SetConfig+0xd8>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d003      	beq.n	80069ae <TIM_OC1_SetConfig+0x8e>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a14      	ldr	r2, [pc, #80]	; (80069fc <TIM_OC1_SetConfig+0xdc>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d111      	bne.n	80069d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	693a      	ldr	r2, [r7, #16]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	685a      	ldr	r2, [r3, #4]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	621a      	str	r2, [r3, #32]
}
 80069ec:	bf00      	nop
 80069ee:	371c      	adds	r7, #28
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr
 80069f8:	40010000 	.word	0x40010000
 80069fc:	40010400 	.word	0x40010400

08006a00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b087      	sub	sp, #28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	f023 0210 	bic.w	r2, r3, #16
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	021b      	lsls	r3, r3, #8
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	f023 0320 	bic.w	r3, r3, #32
 8006a4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	011b      	lsls	r3, r3, #4
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a22      	ldr	r2, [pc, #136]	; (8006ae4 <TIM_OC2_SetConfig+0xe4>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d003      	beq.n	8006a68 <TIM_OC2_SetConfig+0x68>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a21      	ldr	r2, [pc, #132]	; (8006ae8 <TIM_OC2_SetConfig+0xe8>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d10d      	bne.n	8006a84 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	011b      	lsls	r3, r3, #4
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a17      	ldr	r2, [pc, #92]	; (8006ae4 <TIM_OC2_SetConfig+0xe4>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d003      	beq.n	8006a94 <TIM_OC2_SetConfig+0x94>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a16      	ldr	r2, [pc, #88]	; (8006ae8 <TIM_OC2_SetConfig+0xe8>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d113      	bne.n	8006abc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	695b      	ldr	r3, [r3, #20]
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	693a      	ldr	r2, [r7, #16]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	685a      	ldr	r2, [r3, #4]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	697a      	ldr	r2, [r7, #20]
 8006ad4:	621a      	str	r2, [r3, #32]
}
 8006ad6:	bf00      	nop
 8006ad8:	371c      	adds	r7, #28
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	40010000 	.word	0x40010000
 8006ae8:	40010400 	.word	0x40010400

08006aec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b087      	sub	sp, #28
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a1b      	ldr	r3, [r3, #32]
 8006b06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	69db      	ldr	r3, [r3, #28]
 8006b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f023 0303 	bic.w	r3, r3, #3
 8006b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	021b      	lsls	r3, r3, #8
 8006b3c:	697a      	ldr	r2, [r7, #20]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a21      	ldr	r2, [pc, #132]	; (8006bcc <TIM_OC3_SetConfig+0xe0>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d003      	beq.n	8006b52 <TIM_OC3_SetConfig+0x66>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a20      	ldr	r2, [pc, #128]	; (8006bd0 <TIM_OC3_SetConfig+0xe4>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d10d      	bne.n	8006b6e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	021b      	lsls	r3, r3, #8
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a16      	ldr	r2, [pc, #88]	; (8006bcc <TIM_OC3_SetConfig+0xe0>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d003      	beq.n	8006b7e <TIM_OC3_SetConfig+0x92>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a15      	ldr	r2, [pc, #84]	; (8006bd0 <TIM_OC3_SetConfig+0xe4>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d113      	bne.n	8006ba6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	011b      	lsls	r3, r3, #4
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	699b      	ldr	r3, [r3, #24]
 8006b9e:	011b      	lsls	r3, r3, #4
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	685a      	ldr	r2, [r3, #4]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	697a      	ldr	r2, [r7, #20]
 8006bbe:	621a      	str	r2, [r3, #32]
}
 8006bc0:	bf00      	nop
 8006bc2:	371c      	adds	r7, #28
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr
 8006bcc:	40010000 	.word	0x40010000
 8006bd0:	40010400 	.word	0x40010400

08006bd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b087      	sub	sp, #28
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a1b      	ldr	r3, [r3, #32]
 8006be2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a1b      	ldr	r3, [r3, #32]
 8006bee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	69db      	ldr	r3, [r3, #28]
 8006bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	021b      	lsls	r3, r3, #8
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	031b      	lsls	r3, r3, #12
 8006c26:	693a      	ldr	r2, [r7, #16]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a12      	ldr	r2, [pc, #72]	; (8006c78 <TIM_OC4_SetConfig+0xa4>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d003      	beq.n	8006c3c <TIM_OC4_SetConfig+0x68>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a11      	ldr	r2, [pc, #68]	; (8006c7c <TIM_OC4_SetConfig+0xa8>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d109      	bne.n	8006c50 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	695b      	ldr	r3, [r3, #20]
 8006c48:	019b      	lsls	r3, r3, #6
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	685a      	ldr	r2, [r3, #4]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	621a      	str	r2, [r3, #32]
}
 8006c6a:	bf00      	nop
 8006c6c:	371c      	adds	r7, #28
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	40010000 	.word	0x40010000
 8006c7c:	40010400 	.word	0x40010400

08006c80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b087      	sub	sp, #28
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6a1b      	ldr	r3, [r3, #32]
 8006c90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	f023 0201 	bic.w	r2, r3, #1
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006caa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	011b      	lsls	r3, r3, #4
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	f023 030a 	bic.w	r3, r3, #10
 8006cbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cbe:	697a      	ldr	r2, [r7, #20]
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	621a      	str	r2, [r3, #32]
}
 8006cd2:	bf00      	nop
 8006cd4:	371c      	adds	r7, #28
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cde:	b480      	push	{r7}
 8006ce0:	b087      	sub	sp, #28
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	60f8      	str	r0, [r7, #12]
 8006ce6:	60b9      	str	r1, [r7, #8]
 8006ce8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	f023 0210 	bic.w	r2, r3, #16
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	699b      	ldr	r3, [r3, #24]
 8006cfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6a1b      	ldr	r3, [r3, #32]
 8006d00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	031b      	lsls	r3, r3, #12
 8006d0e:	697a      	ldr	r2, [r7, #20]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	011b      	lsls	r3, r3, #4
 8006d20:	693a      	ldr	r2, [r7, #16]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	697a      	ldr	r2, [r7, #20]
 8006d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	621a      	str	r2, [r3, #32]
}
 8006d32:	bf00      	nop
 8006d34:	371c      	adds	r7, #28
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b085      	sub	sp, #20
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
 8006d46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	f043 0307 	orr.w	r3, r3, #7
 8006d60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	609a      	str	r2, [r3, #8]
}
 8006d68:	bf00      	nop
 8006d6a:	3714      	adds	r7, #20
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b087      	sub	sp, #28
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	607a      	str	r2, [r7, #4]
 8006d80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	021a      	lsls	r2, r3, #8
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	431a      	orrs	r2, r3
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	697a      	ldr	r2, [r7, #20]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	697a      	ldr	r2, [r7, #20]
 8006da6:	609a      	str	r2, [r3, #8]
}
 8006da8:	bf00      	nop
 8006daa:	371c      	adds	r7, #28
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b087      	sub	sp, #28
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	f003 031f 	and.w	r3, r3, #31
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6a1a      	ldr	r2, [r3, #32]
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	43db      	mvns	r3, r3
 8006dd6:	401a      	ands	r2, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6a1a      	ldr	r2, [r3, #32]
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	f003 031f 	and.w	r3, r3, #31
 8006de6:	6879      	ldr	r1, [r7, #4]
 8006de8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dec:	431a      	orrs	r2, r3
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	621a      	str	r2, [r3, #32]
}
 8006df2:	bf00      	nop
 8006df4:	371c      	adds	r7, #28
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
	...

08006e00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d101      	bne.n	8006e18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e14:	2302      	movs	r3, #2
 8006e16:	e05a      	b.n	8006ece <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2202      	movs	r2, #2
 8006e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a21      	ldr	r2, [pc, #132]	; (8006edc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d022      	beq.n	8006ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e64:	d01d      	beq.n	8006ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a1d      	ldr	r2, [pc, #116]	; (8006ee0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d018      	beq.n	8006ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a1b      	ldr	r2, [pc, #108]	; (8006ee4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d013      	beq.n	8006ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a1a      	ldr	r2, [pc, #104]	; (8006ee8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d00e      	beq.n	8006ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a18      	ldr	r2, [pc, #96]	; (8006eec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d009      	beq.n	8006ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a17      	ldr	r2, [pc, #92]	; (8006ef0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d004      	beq.n	8006ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a15      	ldr	r2, [pc, #84]	; (8006ef4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d10c      	bne.n	8006ebc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ea8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	68ba      	ldr	r2, [r7, #8]
 8006eba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3714      	adds	r7, #20
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	40010000 	.word	0x40010000
 8006ee0:	40000400 	.word	0x40000400
 8006ee4:	40000800 	.word	0x40000800
 8006ee8:	40000c00 	.word	0x40000c00
 8006eec:	40010400 	.word	0x40010400
 8006ef0:	40014000 	.word	0x40014000
 8006ef4:	40001800 	.word	0x40001800

08006ef8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f00:	bf00      	nop
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d101      	bne.n	8006f32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e03f      	b.n	8006fb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d106      	bne.n	8006f4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f7fa fbac 	bl	80016a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2224      	movs	r2, #36	; 0x24
 8006f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68da      	ldr	r2, [r3, #12]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 fe9b 	bl	8007ca0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	691a      	ldr	r2, [r3, #16]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	695a      	ldr	r2, [r3, #20]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68da      	ldr	r2, [r3, #12]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2220      	movs	r2, #32
 8006fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2220      	movs	r2, #32
 8006fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b08c      	sub	sp, #48	; 0x30
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	60f8      	str	r0, [r7, #12]
 8006fc2:	60b9      	str	r1, [r7, #8]
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	2b20      	cmp	r3, #32
 8006fd2:	d152      	bne.n	800707a <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d002      	beq.n	8006fe0 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006fda:	88fb      	ldrh	r3, [r7, #6]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d101      	bne.n	8006fe4 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e04b      	b.n	800707c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d101      	bne.n	8006ff2 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8006fee:	2302      	movs	r3, #2
 8006ff0:	e044      	b.n	800707c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007000:	88fb      	ldrh	r3, [r7, #6]
 8007002:	461a      	mov	r2, r3
 8007004:	68b9      	ldr	r1, [r7, #8]
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f000 fbea 	bl	80077e0 <UART_Start_Receive_DMA>
 800700c:	4603      	mov	r3, r0
 800700e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007012:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007016:	2b00      	cmp	r3, #0
 8007018:	d12c      	bne.n	8007074 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800701e:	2b01      	cmp	r3, #1
 8007020:	d125      	bne.n	800706e <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007022:	2300      	movs	r3, #0
 8007024:	613b      	str	r3, [r7, #16]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	613b      	str	r3, [r7, #16]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	613b      	str	r3, [r7, #16]
 8007036:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	330c      	adds	r3, #12
 800703e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	e853 3f00 	ldrex	r3, [r3]
 8007046:	617b      	str	r3, [r7, #20]
   return(result);
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	f043 0310 	orr.w	r3, r3, #16
 800704e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	330c      	adds	r3, #12
 8007056:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007058:	627a      	str	r2, [r7, #36]	; 0x24
 800705a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705c:	6a39      	ldr	r1, [r7, #32]
 800705e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007060:	e841 2300 	strex	r3, r2, [r1]
 8007064:	61fb      	str	r3, [r7, #28]
   return(result);
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1e5      	bne.n	8007038 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800706c:	e002      	b.n	8007074 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8007074:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007078:	e000      	b.n	800707c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800707a:	2302      	movs	r3, #2
  }
}
 800707c:	4618      	mov	r0, r3
 800707e:	3730      	adds	r7, #48	; 0x30
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b0ba      	sub	sp, #232	; 0xe8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	695b      	ldr	r3, [r3, #20]
 80070a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80070aa:	2300      	movs	r3, #0
 80070ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80070b0:	2300      	movs	r3, #0
 80070b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80070b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070ba:	f003 030f 	and.w	r3, r3, #15
 80070be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80070c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d10f      	bne.n	80070ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070ce:	f003 0320 	and.w	r3, r3, #32
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d009      	beq.n	80070ea <HAL_UART_IRQHandler+0x66>
 80070d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070da:	f003 0320 	and.w	r3, r3, #32
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d003      	beq.n	80070ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 fd21 	bl	8007b2a <UART_Receive_IT>
      return;
 80070e8:	e256      	b.n	8007598 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80070ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f000 80de 	beq.w	80072b0 <HAL_UART_IRQHandler+0x22c>
 80070f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070f8:	f003 0301 	and.w	r3, r3, #1
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d106      	bne.n	800710e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007104:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007108:	2b00      	cmp	r3, #0
 800710a:	f000 80d1 	beq.w	80072b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800710e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007112:	f003 0301 	and.w	r3, r3, #1
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00b      	beq.n	8007132 <HAL_UART_IRQHandler+0xae>
 800711a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800711e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007122:	2b00      	cmp	r3, #0
 8007124:	d005      	beq.n	8007132 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712a:	f043 0201 	orr.w	r2, r3, #1
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007136:	f003 0304 	and.w	r3, r3, #4
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00b      	beq.n	8007156 <HAL_UART_IRQHandler+0xd2>
 800713e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007142:	f003 0301 	and.w	r3, r3, #1
 8007146:	2b00      	cmp	r3, #0
 8007148:	d005      	beq.n	8007156 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714e:	f043 0202 	orr.w	r2, r3, #2
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800715a:	f003 0302 	and.w	r3, r3, #2
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00b      	beq.n	800717a <HAL_UART_IRQHandler+0xf6>
 8007162:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007166:	f003 0301 	and.w	r3, r3, #1
 800716a:	2b00      	cmp	r3, #0
 800716c:	d005      	beq.n	800717a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007172:	f043 0204 	orr.w	r2, r3, #4
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800717a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800717e:	f003 0308 	and.w	r3, r3, #8
 8007182:	2b00      	cmp	r3, #0
 8007184:	d011      	beq.n	80071aa <HAL_UART_IRQHandler+0x126>
 8007186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800718a:	f003 0320 	and.w	r3, r3, #32
 800718e:	2b00      	cmp	r3, #0
 8007190:	d105      	bne.n	800719e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007192:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007196:	f003 0301 	and.w	r3, r3, #1
 800719a:	2b00      	cmp	r3, #0
 800719c:	d005      	beq.n	80071aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a2:	f043 0208 	orr.w	r2, r3, #8
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	f000 81ed 	beq.w	800758e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071b8:	f003 0320 	and.w	r3, r3, #32
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d008      	beq.n	80071d2 <HAL_UART_IRQHandler+0x14e>
 80071c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071c4:	f003 0320 	and.w	r3, r3, #32
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d002      	beq.n	80071d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 fcac 	bl	8007b2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	695b      	ldr	r3, [r3, #20]
 80071d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071dc:	2b40      	cmp	r3, #64	; 0x40
 80071de:	bf0c      	ite	eq
 80071e0:	2301      	moveq	r3, #1
 80071e2:	2300      	movne	r3, #0
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ee:	f003 0308 	and.w	r3, r3, #8
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d103      	bne.n	80071fe <HAL_UART_IRQHandler+0x17a>
 80071f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d04f      	beq.n	800729e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 fbb4 	bl	800796c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	695b      	ldr	r3, [r3, #20]
 800720a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800720e:	2b40      	cmp	r3, #64	; 0x40
 8007210:	d141      	bne.n	8007296 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	3314      	adds	r3, #20
 8007218:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007220:	e853 3f00 	ldrex	r3, [r3]
 8007224:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007228:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800722c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007230:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	3314      	adds	r3, #20
 800723a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800723e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007242:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007246:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800724a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800724e:	e841 2300 	strex	r3, r2, [r1]
 8007252:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007256:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d1d9      	bne.n	8007212 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007262:	2b00      	cmp	r3, #0
 8007264:	d013      	beq.n	800728e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726a:	4a7d      	ldr	r2, [pc, #500]	; (8007460 <HAL_UART_IRQHandler+0x3dc>)
 800726c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007272:	4618      	mov	r0, r3
 8007274:	f7fb fa48 	bl	8002708 <HAL_DMA_Abort_IT>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d016      	beq.n	80072ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007288:	4610      	mov	r0, r2
 800728a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800728c:	e00e      	b.n	80072ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f9a4 	bl	80075dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007294:	e00a      	b.n	80072ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 f9a0 	bl	80075dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800729c:	e006      	b.n	80072ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 f99c 	bl	80075dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80072aa:	e170      	b.n	800758e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072ac:	bf00      	nop
    return;
 80072ae:	e16e      	b.n	800758e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	f040 814a 	bne.w	800754e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80072ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072be:	f003 0310 	and.w	r3, r3, #16
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	f000 8143 	beq.w	800754e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80072c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072cc:	f003 0310 	and.w	r3, r3, #16
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f000 813c 	beq.w	800754e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072d6:	2300      	movs	r3, #0
 80072d8:	60bb      	str	r3, [r7, #8]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	60bb      	str	r3, [r7, #8]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	60bb      	str	r3, [r7, #8]
 80072ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	695b      	ldr	r3, [r3, #20]
 80072f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f6:	2b40      	cmp	r3, #64	; 0x40
 80072f8:	f040 80b4 	bne.w	8007464 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007308:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800730c:	2b00      	cmp	r3, #0
 800730e:	f000 8140 	beq.w	8007592 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007316:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800731a:	429a      	cmp	r2, r3
 800731c:	f080 8139 	bcs.w	8007592 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007326:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732c:	69db      	ldr	r3, [r3, #28]
 800732e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007332:	f000 8088 	beq.w	8007446 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	330c      	adds	r3, #12
 800733c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007340:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007344:	e853 3f00 	ldrex	r3, [r3]
 8007348:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800734c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007350:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007354:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	330c      	adds	r3, #12
 800735e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007362:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007366:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800736e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007372:	e841 2300 	strex	r3, r2, [r1]
 8007376:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800737a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1d9      	bne.n	8007336 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	3314      	adds	r3, #20
 8007388:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800738c:	e853 3f00 	ldrex	r3, [r3]
 8007390:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007392:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007394:	f023 0301 	bic.w	r3, r3, #1
 8007398:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	3314      	adds	r3, #20
 80073a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80073a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80073aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80073ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80073b2:	e841 2300 	strex	r3, r2, [r1]
 80073b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80073b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1e1      	bne.n	8007382 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	3314      	adds	r3, #20
 80073c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073c8:	e853 3f00 	ldrex	r3, [r3]
 80073cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80073ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	3314      	adds	r3, #20
 80073de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80073e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80073e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80073e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80073ea:	e841 2300 	strex	r3, r2, [r1]
 80073ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80073f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1e3      	bne.n	80073be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2220      	movs	r2, #32
 80073fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	330c      	adds	r3, #12
 800740a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800740e:	e853 3f00 	ldrex	r3, [r3]
 8007412:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007414:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007416:	f023 0310 	bic.w	r3, r3, #16
 800741a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	330c      	adds	r3, #12
 8007424:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007428:	65ba      	str	r2, [r7, #88]	; 0x58
 800742a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800742e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007430:	e841 2300 	strex	r3, r2, [r1]
 8007434:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1e3      	bne.n	8007404 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007440:	4618      	mov	r0, r3
 8007442:	f7fb f8f1 	bl	8002628 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800744e:	b29b      	uxth	r3, r3
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	b29b      	uxth	r3, r3
 8007454:	4619      	mov	r1, r3
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f7f9 fa18 	bl	800088c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800745c:	e099      	b.n	8007592 <HAL_UART_IRQHandler+0x50e>
 800745e:	bf00      	nop
 8007460:	08007a33 	.word	0x08007a33
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800746c:	b29b      	uxth	r3, r3
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007478:	b29b      	uxth	r3, r3
 800747a:	2b00      	cmp	r3, #0
 800747c:	f000 808b 	beq.w	8007596 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007480:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007484:	2b00      	cmp	r3, #0
 8007486:	f000 8086 	beq.w	8007596 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	330c      	adds	r3, #12
 8007490:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007494:	e853 3f00 	ldrex	r3, [r3]
 8007498:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800749a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800749c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	330c      	adds	r3, #12
 80074aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80074ae:	647a      	str	r2, [r7, #68]	; 0x44
 80074b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074b6:	e841 2300 	strex	r3, r2, [r1]
 80074ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1e3      	bne.n	800748a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	3314      	adds	r3, #20
 80074c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074cc:	e853 3f00 	ldrex	r3, [r3]
 80074d0:	623b      	str	r3, [r7, #32]
   return(result);
 80074d2:	6a3b      	ldr	r3, [r7, #32]
 80074d4:	f023 0301 	bic.w	r3, r3, #1
 80074d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	3314      	adds	r3, #20
 80074e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80074e6:	633a      	str	r2, [r7, #48]	; 0x30
 80074e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074ee:	e841 2300 	strex	r3, r2, [r1]
 80074f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d1e3      	bne.n	80074c2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2220      	movs	r2, #32
 80074fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	330c      	adds	r3, #12
 800750e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	e853 3f00 	ldrex	r3, [r3]
 8007516:	60fb      	str	r3, [r7, #12]
   return(result);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f023 0310 	bic.w	r3, r3, #16
 800751e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	330c      	adds	r3, #12
 8007528:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800752c:	61fa      	str	r2, [r7, #28]
 800752e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007530:	69b9      	ldr	r1, [r7, #24]
 8007532:	69fa      	ldr	r2, [r7, #28]
 8007534:	e841 2300 	strex	r3, r2, [r1]
 8007538:	617b      	str	r3, [r7, #20]
   return(result);
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1e3      	bne.n	8007508 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007540:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007544:	4619      	mov	r1, r3
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f7f9 f9a0 	bl	800088c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800754c:	e023      	b.n	8007596 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800754e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007556:	2b00      	cmp	r3, #0
 8007558:	d009      	beq.n	800756e <HAL_UART_IRQHandler+0x4ea>
 800755a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800755e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007562:	2b00      	cmp	r3, #0
 8007564:	d003      	beq.n	800756e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 fa77 	bl	8007a5a <UART_Transmit_IT>
    return;
 800756c:	e014      	b.n	8007598 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800756e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00e      	beq.n	8007598 <HAL_UART_IRQHandler+0x514>
 800757a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800757e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007582:	2b00      	cmp	r3, #0
 8007584:	d008      	beq.n	8007598 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 fab7 	bl	8007afa <UART_EndTransmit_IT>
    return;
 800758c:	e004      	b.n	8007598 <HAL_UART_IRQHandler+0x514>
    return;
 800758e:	bf00      	nop
 8007590:	e002      	b.n	8007598 <HAL_UART_IRQHandler+0x514>
      return;
 8007592:	bf00      	nop
 8007594:	e000      	b.n	8007598 <HAL_UART_IRQHandler+0x514>
      return;
 8007596:	bf00      	nop
  }
}
 8007598:	37e8      	adds	r7, #232	; 0xe8
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop

080075a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80075bc:	bf00      	nop
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80075d0:	bf00      	nop
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b09c      	sub	sp, #112	; 0x70
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007608:	2b00      	cmp	r3, #0
 800760a:	d172      	bne.n	80076f2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800760c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800760e:	2200      	movs	r2, #0
 8007610:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	330c      	adds	r3, #12
 8007618:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800761c:	e853 3f00 	ldrex	r3, [r3]
 8007620:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007624:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007628:	66bb      	str	r3, [r7, #104]	; 0x68
 800762a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	330c      	adds	r3, #12
 8007630:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007632:	65ba      	str	r2, [r7, #88]	; 0x58
 8007634:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007636:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007638:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800763a:	e841 2300 	strex	r3, r2, [r1]
 800763e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007640:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1e5      	bne.n	8007612 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	3314      	adds	r3, #20
 800764c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007650:	e853 3f00 	ldrex	r3, [r3]
 8007654:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007658:	f023 0301 	bic.w	r3, r3, #1
 800765c:	667b      	str	r3, [r7, #100]	; 0x64
 800765e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	3314      	adds	r3, #20
 8007664:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007666:	647a      	str	r2, [r7, #68]	; 0x44
 8007668:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800766c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800766e:	e841 2300 	strex	r3, r2, [r1]
 8007672:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1e5      	bne.n	8007646 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800767a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	3314      	adds	r3, #20
 8007680:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007684:	e853 3f00 	ldrex	r3, [r3]
 8007688:	623b      	str	r3, [r7, #32]
   return(result);
 800768a:	6a3b      	ldr	r3, [r7, #32]
 800768c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007690:	663b      	str	r3, [r7, #96]	; 0x60
 8007692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	3314      	adds	r3, #20
 8007698:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800769a:	633a      	str	r2, [r7, #48]	; 0x30
 800769c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076a2:	e841 2300 	strex	r3, r2, [r1]
 80076a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1e5      	bne.n	800767a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80076ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076b0:	2220      	movs	r2, #32
 80076b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d119      	bne.n	80076f2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	330c      	adds	r3, #12
 80076c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	e853 3f00 	ldrex	r3, [r3]
 80076cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f023 0310 	bic.w	r3, r3, #16
 80076d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	330c      	adds	r3, #12
 80076dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80076de:	61fa      	str	r2, [r7, #28]
 80076e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e2:	69b9      	ldr	r1, [r7, #24]
 80076e4:	69fa      	ldr	r2, [r7, #28]
 80076e6:	e841 2300 	strex	r3, r2, [r1]
 80076ea:	617b      	str	r3, [r7, #20]
   return(result);
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1e5      	bne.n	80076be <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d106      	bne.n	8007708 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80076fe:	4619      	mov	r1, r3
 8007700:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007702:	f7f9 f8c3 	bl	800088c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007706:	e002      	b.n	800770e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007708:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800770a:	f7ff ff53 	bl	80075b4 <HAL_UART_RxCpltCallback>
}
 800770e:	bf00      	nop
 8007710:	3770      	adds	r7, #112	; 0x70
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b084      	sub	sp, #16
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007722:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007728:	2b01      	cmp	r3, #1
 800772a:	d108      	bne.n	800773e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007730:	085b      	lsrs	r3, r3, #1
 8007732:	b29b      	uxth	r3, r3
 8007734:	4619      	mov	r1, r3
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f7f9 f8a8 	bl	800088c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800773c:	e002      	b.n	8007744 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f7ff ff42 	bl	80075c8 <HAL_UART_RxHalfCpltCallback>
}
 8007744:	bf00      	nop
 8007746:	3710      	adds	r7, #16
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007754:	2300      	movs	r3, #0
 8007756:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800775c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	695b      	ldr	r3, [r3, #20]
 8007764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007768:	2b80      	cmp	r3, #128	; 0x80
 800776a:	bf0c      	ite	eq
 800776c:	2301      	moveq	r3, #1
 800776e:	2300      	movne	r3, #0
 8007770:	b2db      	uxtb	r3, r3
 8007772:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800777a:	b2db      	uxtb	r3, r3
 800777c:	2b21      	cmp	r3, #33	; 0x21
 800777e:	d108      	bne.n	8007792 <UART_DMAError+0x46>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d005      	beq.n	8007792 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	2200      	movs	r2, #0
 800778a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800778c:	68b8      	ldr	r0, [r7, #8]
 800778e:	f000 f8c5 	bl	800791c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	695b      	ldr	r3, [r3, #20]
 8007798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800779c:	2b40      	cmp	r3, #64	; 0x40
 800779e:	bf0c      	ite	eq
 80077a0:	2301      	moveq	r3, #1
 80077a2:	2300      	movne	r3, #0
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	2b22      	cmp	r3, #34	; 0x22
 80077b2:	d108      	bne.n	80077c6 <UART_DMAError+0x7a>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d005      	beq.n	80077c6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	2200      	movs	r2, #0
 80077be:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80077c0:	68b8      	ldr	r0, [r7, #8]
 80077c2:	f000 f8d3 	bl	800796c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ca:	f043 0210 	orr.w	r2, r3, #16
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077d2:	68b8      	ldr	r0, [r7, #8]
 80077d4:	f7ff ff02 	bl	80075dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077d8:	bf00      	nop
 80077da:	3710      	adds	r7, #16
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b098      	sub	sp, #96	; 0x60
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	4613      	mov	r3, r2
 80077ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80077ee:	68ba      	ldr	r2, [r7, #8]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	88fa      	ldrh	r2, [r7, #6]
 80077f8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2222      	movs	r2, #34	; 0x22
 8007804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800780c:	4a40      	ldr	r2, [pc, #256]	; (8007910 <UART_Start_Receive_DMA+0x130>)
 800780e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007814:	4a3f      	ldr	r2, [pc, #252]	; (8007914 <UART_Start_Receive_DMA+0x134>)
 8007816:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781c:	4a3e      	ldr	r2, [pc, #248]	; (8007918 <UART_Start_Receive_DMA+0x138>)
 800781e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007824:	2200      	movs	r2, #0
 8007826:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007828:	f107 0308 	add.w	r3, r7, #8
 800782c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	3304      	adds	r3, #4
 8007838:	4619      	mov	r1, r3
 800783a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	88fb      	ldrh	r3, [r7, #6]
 8007840:	f7fa fe9a 	bl	8002578 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007844:	2300      	movs	r3, #0
 8007846:	613b      	str	r3, [r7, #16]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	613b      	str	r3, [r7, #16]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	613b      	str	r3, [r7, #16]
 8007858:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2200      	movs	r2, #0
 800785e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d019      	beq.n	800789e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	330c      	adds	r3, #12
 8007870:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007874:	e853 3f00 	ldrex	r3, [r3]
 8007878:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800787a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800787c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007880:	65bb      	str	r3, [r7, #88]	; 0x58
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	330c      	adds	r3, #12
 8007888:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800788a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800788c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007890:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007892:	e841 2300 	strex	r3, r2, [r1]
 8007896:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1e5      	bne.n	800786a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	3314      	adds	r3, #20
 80078a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a8:	e853 3f00 	ldrex	r3, [r3]
 80078ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b0:	f043 0301 	orr.w	r3, r3, #1
 80078b4:	657b      	str	r3, [r7, #84]	; 0x54
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	3314      	adds	r3, #20
 80078bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80078be:	63ba      	str	r2, [r7, #56]	; 0x38
 80078c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80078c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078c6:	e841 2300 	strex	r3, r2, [r1]
 80078ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80078cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1e5      	bne.n	800789e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	3314      	adds	r3, #20
 80078d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	e853 3f00 	ldrex	r3, [r3]
 80078e0:	617b      	str	r3, [r7, #20]
   return(result);
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078e8:	653b      	str	r3, [r7, #80]	; 0x50
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	3314      	adds	r3, #20
 80078f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80078f2:	627a      	str	r2, [r7, #36]	; 0x24
 80078f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f6:	6a39      	ldr	r1, [r7, #32]
 80078f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078fa:	e841 2300 	strex	r3, r2, [r1]
 80078fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1e5      	bne.n	80078d2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	3760      	adds	r7, #96	; 0x60
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}
 8007910:	080075f1 	.word	0x080075f1
 8007914:	08007717 	.word	0x08007717
 8007918:	0800774d 	.word	0x0800774d

0800791c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800791c:	b480      	push	{r7}
 800791e:	b089      	sub	sp, #36	; 0x24
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	330c      	adds	r3, #12
 800792a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	e853 3f00 	ldrex	r3, [r3]
 8007932:	60bb      	str	r3, [r7, #8]
   return(result);
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800793a:	61fb      	str	r3, [r7, #28]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	330c      	adds	r3, #12
 8007942:	69fa      	ldr	r2, [r7, #28]
 8007944:	61ba      	str	r2, [r7, #24]
 8007946:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007948:	6979      	ldr	r1, [r7, #20]
 800794a:	69ba      	ldr	r2, [r7, #24]
 800794c:	e841 2300 	strex	r3, r2, [r1]
 8007950:	613b      	str	r3, [r7, #16]
   return(result);
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1e5      	bne.n	8007924 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2220      	movs	r2, #32
 800795c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007960:	bf00      	nop
 8007962:	3724      	adds	r7, #36	; 0x24
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800796c:	b480      	push	{r7}
 800796e:	b095      	sub	sp, #84	; 0x54
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	330c      	adds	r3, #12
 800797a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800797e:	e853 3f00 	ldrex	r3, [r3]
 8007982:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007986:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800798a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	330c      	adds	r3, #12
 8007992:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007994:	643a      	str	r2, [r7, #64]	; 0x40
 8007996:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007998:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800799a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800799c:	e841 2300 	strex	r3, r2, [r1]
 80079a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d1e5      	bne.n	8007974 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	3314      	adds	r3, #20
 80079ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b0:	6a3b      	ldr	r3, [r7, #32]
 80079b2:	e853 3f00 	ldrex	r3, [r3]
 80079b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	f023 0301 	bic.w	r3, r3, #1
 80079be:	64bb      	str	r3, [r7, #72]	; 0x48
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	3314      	adds	r3, #20
 80079c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079d0:	e841 2300 	strex	r3, r2, [r1]
 80079d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d1e5      	bne.n	80079a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d119      	bne.n	8007a18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	330c      	adds	r3, #12
 80079ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	e853 3f00 	ldrex	r3, [r3]
 80079f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	f023 0310 	bic.w	r3, r3, #16
 80079fa:	647b      	str	r3, [r7, #68]	; 0x44
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	330c      	adds	r3, #12
 8007a02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a04:	61ba      	str	r2, [r7, #24]
 8007a06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a08:	6979      	ldr	r1, [r7, #20]
 8007a0a:	69ba      	ldr	r2, [r7, #24]
 8007a0c:	e841 2300 	strex	r3, r2, [r1]
 8007a10:	613b      	str	r3, [r7, #16]
   return(result);
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1e5      	bne.n	80079e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2220      	movs	r2, #32
 8007a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007a26:	bf00      	nop
 8007a28:	3754      	adds	r7, #84	; 0x54
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr

08007a32 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b084      	sub	sp, #16
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f7ff fdc5 	bl	80075dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a52:	bf00      	nop
 8007a54:	3710      	adds	r7, #16
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007a5a:	b480      	push	{r7}
 8007a5c:	b085      	sub	sp, #20
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	2b21      	cmp	r3, #33	; 0x21
 8007a6c:	d13e      	bne.n	8007aec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a76:	d114      	bne.n	8007aa2 <UART_Transmit_IT+0x48>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d110      	bne.n	8007aa2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a1b      	ldr	r3, [r3, #32]
 8007a84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	881b      	ldrh	r3, [r3, #0]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	1c9a      	adds	r2, r3, #2
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	621a      	str	r2, [r3, #32]
 8007aa0:	e008      	b.n	8007ab4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a1b      	ldr	r3, [r3, #32]
 8007aa6:	1c59      	adds	r1, r3, #1
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	6211      	str	r1, [r2, #32]
 8007aac:	781a      	ldrb	r2, [r3, #0]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	3b01      	subs	r3, #1
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d10f      	bne.n	8007ae8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	68da      	ldr	r2, [r3, #12]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ad6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68da      	ldr	r2, [r3, #12]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ae6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	e000      	b.n	8007aee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007aec:	2302      	movs	r3, #2
  }
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3714      	adds	r7, #20
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr

08007afa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b082      	sub	sp, #8
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	68da      	ldr	r2, [r3, #12]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2220      	movs	r2, #32
 8007b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f7ff fd40 	bl	80075a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3708      	adds	r7, #8
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b08c      	sub	sp, #48	; 0x30
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	2b22      	cmp	r3, #34	; 0x22
 8007b3c:	f040 80ab 	bne.w	8007c96 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b48:	d117      	bne.n	8007b7a <UART_Receive_IT+0x50>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d113      	bne.n	8007b7a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007b52:	2300      	movs	r3, #0
 8007b54:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b72:	1c9a      	adds	r2, r3, #2
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	629a      	str	r2, [r3, #40]	; 0x28
 8007b78:	e026      	b.n	8007bc8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007b80:	2300      	movs	r3, #0
 8007b82:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b8c:	d007      	beq.n	8007b9e <UART_Receive_IT+0x74>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d10a      	bne.n	8007bac <UART_Receive_IT+0x82>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d106      	bne.n	8007bac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	b2da      	uxtb	r2, r3
 8007ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba8:	701a      	strb	r2, [r3, #0]
 8007baa:	e008      	b.n	8007bbe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bb8:	b2da      	uxtb	r2, r3
 8007bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bbc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc2:	1c5a      	adds	r2, r3, #1
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d15a      	bne.n	8007c92 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	68da      	ldr	r2, [r3, #12]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f022 0220 	bic.w	r2, r2, #32
 8007bea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68da      	ldr	r2, [r3, #12]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007bfa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	695a      	ldr	r2, [r3, #20]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f022 0201 	bic.w	r2, r2, #1
 8007c0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2220      	movs	r2, #32
 8007c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d135      	bne.n	8007c88 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	330c      	adds	r3, #12
 8007c28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	e853 3f00 	ldrex	r3, [r3]
 8007c30:	613b      	str	r3, [r7, #16]
   return(result);
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	f023 0310 	bic.w	r3, r3, #16
 8007c38:	627b      	str	r3, [r7, #36]	; 0x24
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	330c      	adds	r3, #12
 8007c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c42:	623a      	str	r2, [r7, #32]
 8007c44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c46:	69f9      	ldr	r1, [r7, #28]
 8007c48:	6a3a      	ldr	r2, [r7, #32]
 8007c4a:	e841 2300 	strex	r3, r2, [r1]
 8007c4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d1e5      	bne.n	8007c22 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 0310 	and.w	r3, r3, #16
 8007c60:	2b10      	cmp	r3, #16
 8007c62:	d10a      	bne.n	8007c7a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c64:	2300      	movs	r3, #0
 8007c66:	60fb      	str	r3, [r7, #12]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	60fb      	str	r3, [r7, #12]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	60fb      	str	r3, [r7, #12]
 8007c78:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c7e:	4619      	mov	r1, r3
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f7f8 fe03 	bl	800088c <HAL_UARTEx_RxEventCallback>
 8007c86:	e002      	b.n	8007c8e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f7ff fc93 	bl	80075b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	e002      	b.n	8007c98 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007c92:	2300      	movs	r3, #0
 8007c94:	e000      	b.n	8007c98 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007c96:	2302      	movs	r3, #2
  }
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3730      	adds	r7, #48	; 0x30
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ca4:	b0c0      	sub	sp, #256	; 0x100
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cbc:	68d9      	ldr	r1, [r3, #12]
 8007cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	ea40 0301 	orr.w	r3, r0, r1
 8007cc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cce:	689a      	ldr	r2, [r3, #8]
 8007cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	431a      	orrs	r2, r3
 8007cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cdc:	695b      	ldr	r3, [r3, #20]
 8007cde:	431a      	orrs	r2, r3
 8007ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ce4:	69db      	ldr	r3, [r3, #28]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007cf8:	f021 010c 	bic.w	r1, r1, #12
 8007cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d06:	430b      	orrs	r3, r1
 8007d08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	695b      	ldr	r3, [r3, #20]
 8007d12:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d1a:	6999      	ldr	r1, [r3, #24]
 8007d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	ea40 0301 	orr.w	r3, r0, r1
 8007d26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	4b8f      	ldr	r3, [pc, #572]	; (8007f6c <UART_SetConfig+0x2cc>)
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d005      	beq.n	8007d40 <UART_SetConfig+0xa0>
 8007d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	4b8d      	ldr	r3, [pc, #564]	; (8007f70 <UART_SetConfig+0x2d0>)
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d104      	bne.n	8007d4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d40:	f7fe f8be 	bl	8005ec0 <HAL_RCC_GetPCLK2Freq>
 8007d44:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007d48:	e003      	b.n	8007d52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d4a:	f7fe f8a5 	bl	8005e98 <HAL_RCC_GetPCLK1Freq>
 8007d4e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d56:	69db      	ldr	r3, [r3, #28]
 8007d58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d5c:	f040 810c 	bne.w	8007f78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d64:	2200      	movs	r2, #0
 8007d66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007d6a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007d6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007d72:	4622      	mov	r2, r4
 8007d74:	462b      	mov	r3, r5
 8007d76:	1891      	adds	r1, r2, r2
 8007d78:	65b9      	str	r1, [r7, #88]	; 0x58
 8007d7a:	415b      	adcs	r3, r3
 8007d7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007d82:	4621      	mov	r1, r4
 8007d84:	eb12 0801 	adds.w	r8, r2, r1
 8007d88:	4629      	mov	r1, r5
 8007d8a:	eb43 0901 	adc.w	r9, r3, r1
 8007d8e:	f04f 0200 	mov.w	r2, #0
 8007d92:	f04f 0300 	mov.w	r3, #0
 8007d96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007da2:	4690      	mov	r8, r2
 8007da4:	4699      	mov	r9, r3
 8007da6:	4623      	mov	r3, r4
 8007da8:	eb18 0303 	adds.w	r3, r8, r3
 8007dac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007db0:	462b      	mov	r3, r5
 8007db2:	eb49 0303 	adc.w	r3, r9, r3
 8007db6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007dc6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007dca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007dce:	460b      	mov	r3, r1
 8007dd0:	18db      	adds	r3, r3, r3
 8007dd2:	653b      	str	r3, [r7, #80]	; 0x50
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	eb42 0303 	adc.w	r3, r2, r3
 8007dda:	657b      	str	r3, [r7, #84]	; 0x54
 8007ddc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007de0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007de4:	f7f8 fa44 	bl	8000270 <__aeabi_uldivmod>
 8007de8:	4602      	mov	r2, r0
 8007dea:	460b      	mov	r3, r1
 8007dec:	4b61      	ldr	r3, [pc, #388]	; (8007f74 <UART_SetConfig+0x2d4>)
 8007dee:	fba3 2302 	umull	r2, r3, r3, r2
 8007df2:	095b      	lsrs	r3, r3, #5
 8007df4:	011c      	lsls	r4, r3, #4
 8007df6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e00:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007e04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007e08:	4642      	mov	r2, r8
 8007e0a:	464b      	mov	r3, r9
 8007e0c:	1891      	adds	r1, r2, r2
 8007e0e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007e10:	415b      	adcs	r3, r3
 8007e12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007e18:	4641      	mov	r1, r8
 8007e1a:	eb12 0a01 	adds.w	sl, r2, r1
 8007e1e:	4649      	mov	r1, r9
 8007e20:	eb43 0b01 	adc.w	fp, r3, r1
 8007e24:	f04f 0200 	mov.w	r2, #0
 8007e28:	f04f 0300 	mov.w	r3, #0
 8007e2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007e30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007e34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e38:	4692      	mov	sl, r2
 8007e3a:	469b      	mov	fp, r3
 8007e3c:	4643      	mov	r3, r8
 8007e3e:	eb1a 0303 	adds.w	r3, sl, r3
 8007e42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e46:	464b      	mov	r3, r9
 8007e48:	eb4b 0303 	adc.w	r3, fp, r3
 8007e4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e5c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007e60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007e64:	460b      	mov	r3, r1
 8007e66:	18db      	adds	r3, r3, r3
 8007e68:	643b      	str	r3, [r7, #64]	; 0x40
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	eb42 0303 	adc.w	r3, r2, r3
 8007e70:	647b      	str	r3, [r7, #68]	; 0x44
 8007e72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007e76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007e7a:	f7f8 f9f9 	bl	8000270 <__aeabi_uldivmod>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	460b      	mov	r3, r1
 8007e82:	4611      	mov	r1, r2
 8007e84:	4b3b      	ldr	r3, [pc, #236]	; (8007f74 <UART_SetConfig+0x2d4>)
 8007e86:	fba3 2301 	umull	r2, r3, r3, r1
 8007e8a:	095b      	lsrs	r3, r3, #5
 8007e8c:	2264      	movs	r2, #100	; 0x64
 8007e8e:	fb02 f303 	mul.w	r3, r2, r3
 8007e92:	1acb      	subs	r3, r1, r3
 8007e94:	00db      	lsls	r3, r3, #3
 8007e96:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007e9a:	4b36      	ldr	r3, [pc, #216]	; (8007f74 <UART_SetConfig+0x2d4>)
 8007e9c:	fba3 2302 	umull	r2, r3, r3, r2
 8007ea0:	095b      	lsrs	r3, r3, #5
 8007ea2:	005b      	lsls	r3, r3, #1
 8007ea4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007ea8:	441c      	add	r4, r3
 8007eaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007eb4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007eb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007ebc:	4642      	mov	r2, r8
 8007ebe:	464b      	mov	r3, r9
 8007ec0:	1891      	adds	r1, r2, r2
 8007ec2:	63b9      	str	r1, [r7, #56]	; 0x38
 8007ec4:	415b      	adcs	r3, r3
 8007ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ec8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007ecc:	4641      	mov	r1, r8
 8007ece:	1851      	adds	r1, r2, r1
 8007ed0:	6339      	str	r1, [r7, #48]	; 0x30
 8007ed2:	4649      	mov	r1, r9
 8007ed4:	414b      	adcs	r3, r1
 8007ed6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ed8:	f04f 0200 	mov.w	r2, #0
 8007edc:	f04f 0300 	mov.w	r3, #0
 8007ee0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007ee4:	4659      	mov	r1, fp
 8007ee6:	00cb      	lsls	r3, r1, #3
 8007ee8:	4651      	mov	r1, sl
 8007eea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007eee:	4651      	mov	r1, sl
 8007ef0:	00ca      	lsls	r2, r1, #3
 8007ef2:	4610      	mov	r0, r2
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	4642      	mov	r2, r8
 8007efa:	189b      	adds	r3, r3, r2
 8007efc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f00:	464b      	mov	r3, r9
 8007f02:	460a      	mov	r2, r1
 8007f04:	eb42 0303 	adc.w	r3, r2, r3
 8007f08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007f18:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007f1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007f20:	460b      	mov	r3, r1
 8007f22:	18db      	adds	r3, r3, r3
 8007f24:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f26:	4613      	mov	r3, r2
 8007f28:	eb42 0303 	adc.w	r3, r2, r3
 8007f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007f36:	f7f8 f99b 	bl	8000270 <__aeabi_uldivmod>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	4b0d      	ldr	r3, [pc, #52]	; (8007f74 <UART_SetConfig+0x2d4>)
 8007f40:	fba3 1302 	umull	r1, r3, r3, r2
 8007f44:	095b      	lsrs	r3, r3, #5
 8007f46:	2164      	movs	r1, #100	; 0x64
 8007f48:	fb01 f303 	mul.w	r3, r1, r3
 8007f4c:	1ad3      	subs	r3, r2, r3
 8007f4e:	00db      	lsls	r3, r3, #3
 8007f50:	3332      	adds	r3, #50	; 0x32
 8007f52:	4a08      	ldr	r2, [pc, #32]	; (8007f74 <UART_SetConfig+0x2d4>)
 8007f54:	fba2 2303 	umull	r2, r3, r2, r3
 8007f58:	095b      	lsrs	r3, r3, #5
 8007f5a:	f003 0207 	and.w	r2, r3, #7
 8007f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4422      	add	r2, r4
 8007f66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007f68:	e105      	b.n	8008176 <UART_SetConfig+0x4d6>
 8007f6a:	bf00      	nop
 8007f6c:	40011000 	.word	0x40011000
 8007f70:	40011400 	.word	0x40011400
 8007f74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007f82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007f86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007f8a:	4642      	mov	r2, r8
 8007f8c:	464b      	mov	r3, r9
 8007f8e:	1891      	adds	r1, r2, r2
 8007f90:	6239      	str	r1, [r7, #32]
 8007f92:	415b      	adcs	r3, r3
 8007f94:	627b      	str	r3, [r7, #36]	; 0x24
 8007f96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f9a:	4641      	mov	r1, r8
 8007f9c:	1854      	adds	r4, r2, r1
 8007f9e:	4649      	mov	r1, r9
 8007fa0:	eb43 0501 	adc.w	r5, r3, r1
 8007fa4:	f04f 0200 	mov.w	r2, #0
 8007fa8:	f04f 0300 	mov.w	r3, #0
 8007fac:	00eb      	lsls	r3, r5, #3
 8007fae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007fb2:	00e2      	lsls	r2, r4, #3
 8007fb4:	4614      	mov	r4, r2
 8007fb6:	461d      	mov	r5, r3
 8007fb8:	4643      	mov	r3, r8
 8007fba:	18e3      	adds	r3, r4, r3
 8007fbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007fc0:	464b      	mov	r3, r9
 8007fc2:	eb45 0303 	adc.w	r3, r5, r3
 8007fc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007fd6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007fda:	f04f 0200 	mov.w	r2, #0
 8007fde:	f04f 0300 	mov.w	r3, #0
 8007fe2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007fe6:	4629      	mov	r1, r5
 8007fe8:	008b      	lsls	r3, r1, #2
 8007fea:	4621      	mov	r1, r4
 8007fec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ff0:	4621      	mov	r1, r4
 8007ff2:	008a      	lsls	r2, r1, #2
 8007ff4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007ff8:	f7f8 f93a 	bl	8000270 <__aeabi_uldivmod>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	460b      	mov	r3, r1
 8008000:	4b60      	ldr	r3, [pc, #384]	; (8008184 <UART_SetConfig+0x4e4>)
 8008002:	fba3 2302 	umull	r2, r3, r3, r2
 8008006:	095b      	lsrs	r3, r3, #5
 8008008:	011c      	lsls	r4, r3, #4
 800800a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800800e:	2200      	movs	r2, #0
 8008010:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008014:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008018:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800801c:	4642      	mov	r2, r8
 800801e:	464b      	mov	r3, r9
 8008020:	1891      	adds	r1, r2, r2
 8008022:	61b9      	str	r1, [r7, #24]
 8008024:	415b      	adcs	r3, r3
 8008026:	61fb      	str	r3, [r7, #28]
 8008028:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800802c:	4641      	mov	r1, r8
 800802e:	1851      	adds	r1, r2, r1
 8008030:	6139      	str	r1, [r7, #16]
 8008032:	4649      	mov	r1, r9
 8008034:	414b      	adcs	r3, r1
 8008036:	617b      	str	r3, [r7, #20]
 8008038:	f04f 0200 	mov.w	r2, #0
 800803c:	f04f 0300 	mov.w	r3, #0
 8008040:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008044:	4659      	mov	r1, fp
 8008046:	00cb      	lsls	r3, r1, #3
 8008048:	4651      	mov	r1, sl
 800804a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800804e:	4651      	mov	r1, sl
 8008050:	00ca      	lsls	r2, r1, #3
 8008052:	4610      	mov	r0, r2
 8008054:	4619      	mov	r1, r3
 8008056:	4603      	mov	r3, r0
 8008058:	4642      	mov	r2, r8
 800805a:	189b      	adds	r3, r3, r2
 800805c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008060:	464b      	mov	r3, r9
 8008062:	460a      	mov	r2, r1
 8008064:	eb42 0303 	adc.w	r3, r2, r3
 8008068:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800806c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	67bb      	str	r3, [r7, #120]	; 0x78
 8008076:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008078:	f04f 0200 	mov.w	r2, #0
 800807c:	f04f 0300 	mov.w	r3, #0
 8008080:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008084:	4649      	mov	r1, r9
 8008086:	008b      	lsls	r3, r1, #2
 8008088:	4641      	mov	r1, r8
 800808a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800808e:	4641      	mov	r1, r8
 8008090:	008a      	lsls	r2, r1, #2
 8008092:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008096:	f7f8 f8eb 	bl	8000270 <__aeabi_uldivmod>
 800809a:	4602      	mov	r2, r0
 800809c:	460b      	mov	r3, r1
 800809e:	4b39      	ldr	r3, [pc, #228]	; (8008184 <UART_SetConfig+0x4e4>)
 80080a0:	fba3 1302 	umull	r1, r3, r3, r2
 80080a4:	095b      	lsrs	r3, r3, #5
 80080a6:	2164      	movs	r1, #100	; 0x64
 80080a8:	fb01 f303 	mul.w	r3, r1, r3
 80080ac:	1ad3      	subs	r3, r2, r3
 80080ae:	011b      	lsls	r3, r3, #4
 80080b0:	3332      	adds	r3, #50	; 0x32
 80080b2:	4a34      	ldr	r2, [pc, #208]	; (8008184 <UART_SetConfig+0x4e4>)
 80080b4:	fba2 2303 	umull	r2, r3, r2, r3
 80080b8:	095b      	lsrs	r3, r3, #5
 80080ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080be:	441c      	add	r4, r3
 80080c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080c4:	2200      	movs	r2, #0
 80080c6:	673b      	str	r3, [r7, #112]	; 0x70
 80080c8:	677a      	str	r2, [r7, #116]	; 0x74
 80080ca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80080ce:	4642      	mov	r2, r8
 80080d0:	464b      	mov	r3, r9
 80080d2:	1891      	adds	r1, r2, r2
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	415b      	adcs	r3, r3
 80080d8:	60fb      	str	r3, [r7, #12]
 80080da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80080de:	4641      	mov	r1, r8
 80080e0:	1851      	adds	r1, r2, r1
 80080e2:	6039      	str	r1, [r7, #0]
 80080e4:	4649      	mov	r1, r9
 80080e6:	414b      	adcs	r3, r1
 80080e8:	607b      	str	r3, [r7, #4]
 80080ea:	f04f 0200 	mov.w	r2, #0
 80080ee:	f04f 0300 	mov.w	r3, #0
 80080f2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80080f6:	4659      	mov	r1, fp
 80080f8:	00cb      	lsls	r3, r1, #3
 80080fa:	4651      	mov	r1, sl
 80080fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008100:	4651      	mov	r1, sl
 8008102:	00ca      	lsls	r2, r1, #3
 8008104:	4610      	mov	r0, r2
 8008106:	4619      	mov	r1, r3
 8008108:	4603      	mov	r3, r0
 800810a:	4642      	mov	r2, r8
 800810c:	189b      	adds	r3, r3, r2
 800810e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008110:	464b      	mov	r3, r9
 8008112:	460a      	mov	r2, r1
 8008114:	eb42 0303 	adc.w	r3, r2, r3
 8008118:	66fb      	str	r3, [r7, #108]	; 0x6c
 800811a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	663b      	str	r3, [r7, #96]	; 0x60
 8008124:	667a      	str	r2, [r7, #100]	; 0x64
 8008126:	f04f 0200 	mov.w	r2, #0
 800812a:	f04f 0300 	mov.w	r3, #0
 800812e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008132:	4649      	mov	r1, r9
 8008134:	008b      	lsls	r3, r1, #2
 8008136:	4641      	mov	r1, r8
 8008138:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800813c:	4641      	mov	r1, r8
 800813e:	008a      	lsls	r2, r1, #2
 8008140:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008144:	f7f8 f894 	bl	8000270 <__aeabi_uldivmod>
 8008148:	4602      	mov	r2, r0
 800814a:	460b      	mov	r3, r1
 800814c:	4b0d      	ldr	r3, [pc, #52]	; (8008184 <UART_SetConfig+0x4e4>)
 800814e:	fba3 1302 	umull	r1, r3, r3, r2
 8008152:	095b      	lsrs	r3, r3, #5
 8008154:	2164      	movs	r1, #100	; 0x64
 8008156:	fb01 f303 	mul.w	r3, r1, r3
 800815a:	1ad3      	subs	r3, r2, r3
 800815c:	011b      	lsls	r3, r3, #4
 800815e:	3332      	adds	r3, #50	; 0x32
 8008160:	4a08      	ldr	r2, [pc, #32]	; (8008184 <UART_SetConfig+0x4e4>)
 8008162:	fba2 2303 	umull	r2, r3, r2, r3
 8008166:	095b      	lsrs	r3, r3, #5
 8008168:	f003 020f 	and.w	r2, r3, #15
 800816c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4422      	add	r2, r4
 8008174:	609a      	str	r2, [r3, #8]
}
 8008176:	bf00      	nop
 8008178:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800817c:	46bd      	mov	sp, r7
 800817e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008182:	bf00      	nop
 8008184:	51eb851f 	.word	0x51eb851f

08008188 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8008188:	b480      	push	{r7}
 800818a:	b087      	sub	sp, #28
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800819c:	683a      	ldr	r2, [r7, #0]
 800819e:	6812      	ldr	r2, [r2, #0]
 80081a0:	f023 0101 	bic.w	r1, r3, #1
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	2b08      	cmp	r3, #8
 80081b0:	d102      	bne.n	80081b8 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80081b2:	2340      	movs	r3, #64	; 0x40
 80081b4:	617b      	str	r3, [r7, #20]
 80081b6:	e001      	b.n	80081bc <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80081b8:	2300      	movs	r3, #0
 80081ba:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80081c8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80081ce:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80081d4:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80081da:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80081e0:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80081e6:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 80081ec:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 80081f2:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 80081f8:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 80081fe:	4313      	orrs	r3, r2
 8008200:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	693a      	ldr	r2, [r7, #16]
 8008208:	4313      	orrs	r3, r2
 800820a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008210:	693a      	ldr	r2, [r7, #16]
 8008212:	4313      	orrs	r3, r2
 8008214:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8008216:	4b10      	ldr	r3, [pc, #64]	; (8008258 <FSMC_NORSRAM_Init+0xd0>)
 8008218:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008220:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8008228:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	43db      	mvns	r3, r3
 8008238:	ea02 0103 	and.w	r1, r2, r3
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	4319      	orrs	r1, r3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	371c      	adds	r7, #28
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr
 8008258:	0008fb7f 	.word	0x0008fb7f

0800825c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	60b9      	str	r1, [r7, #8]
 8008266:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	1c5a      	adds	r2, r3, #1
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008272:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	011b      	lsls	r3, r3, #4
 8008280:	431a      	orrs	r2, r3
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	021b      	lsls	r3, r3, #8
 8008288:	431a      	orrs	r2, r3
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	041b      	lsls	r3, r3, #16
 8008290:	431a      	orrs	r2, r3
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	691b      	ldr	r3, [r3, #16]
 8008296:	3b01      	subs	r3, #1
 8008298:	051b      	lsls	r3, r3, #20
 800829a:	431a      	orrs	r2, r3
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	695b      	ldr	r3, [r3, #20]
 80082a0:	3b02      	subs	r3, #2
 80082a2:	061b      	lsls	r3, r3, #24
 80082a4:	431a      	orrs	r2, r3
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	699b      	ldr	r3, [r3, #24]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	3201      	adds	r2, #1
 80082b0:	4319      	orrs	r1, r3
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3714      	adds	r7, #20
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr
	...

080082c8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	607a      	str	r2, [r7, #4]
 80082d4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082dc:	d11d      	bne.n	800831a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80082e6:	4b13      	ldr	r3, [pc, #76]	; (8008334 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80082e8:	4013      	ands	r3, r2
 80082ea:	68ba      	ldr	r2, [r7, #8]
 80082ec:	6811      	ldr	r1, [r2, #0]
 80082ee:	68ba      	ldr	r2, [r7, #8]
 80082f0:	6852      	ldr	r2, [r2, #4]
 80082f2:	0112      	lsls	r2, r2, #4
 80082f4:	4311      	orrs	r1, r2
 80082f6:	68ba      	ldr	r2, [r7, #8]
 80082f8:	6892      	ldr	r2, [r2, #8]
 80082fa:	0212      	lsls	r2, r2, #8
 80082fc:	4311      	orrs	r1, r2
 80082fe:	68ba      	ldr	r2, [r7, #8]
 8008300:	6992      	ldr	r2, [r2, #24]
 8008302:	4311      	orrs	r1, r2
 8008304:	68ba      	ldr	r2, [r7, #8]
 8008306:	68d2      	ldr	r2, [r2, #12]
 8008308:	0412      	lsls	r2, r2, #16
 800830a:	430a      	orrs	r2, r1
 800830c:	ea43 0102 	orr.w	r1, r3, r2
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008318:	e005      	b.n	8008326 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008322:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	3714      	adds	r7, #20
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr
 8008334:	cff00000 	.word	0xcff00000

08008338 <__errno>:
 8008338:	4b01      	ldr	r3, [pc, #4]	; (8008340 <__errno+0x8>)
 800833a:	6818      	ldr	r0, [r3, #0]
 800833c:	4770      	bx	lr
 800833e:	bf00      	nop
 8008340:	2000000c 	.word	0x2000000c

08008344 <__libc_init_array>:
 8008344:	b570      	push	{r4, r5, r6, lr}
 8008346:	4d0d      	ldr	r5, [pc, #52]	; (800837c <__libc_init_array+0x38>)
 8008348:	4c0d      	ldr	r4, [pc, #52]	; (8008380 <__libc_init_array+0x3c>)
 800834a:	1b64      	subs	r4, r4, r5
 800834c:	10a4      	asrs	r4, r4, #2
 800834e:	2600      	movs	r6, #0
 8008350:	42a6      	cmp	r6, r4
 8008352:	d109      	bne.n	8008368 <__libc_init_array+0x24>
 8008354:	4d0b      	ldr	r5, [pc, #44]	; (8008384 <__libc_init_array+0x40>)
 8008356:	4c0c      	ldr	r4, [pc, #48]	; (8008388 <__libc_init_array+0x44>)
 8008358:	f000 ffbc 	bl	80092d4 <_init>
 800835c:	1b64      	subs	r4, r4, r5
 800835e:	10a4      	asrs	r4, r4, #2
 8008360:	2600      	movs	r6, #0
 8008362:	42a6      	cmp	r6, r4
 8008364:	d105      	bne.n	8008372 <__libc_init_array+0x2e>
 8008366:	bd70      	pop	{r4, r5, r6, pc}
 8008368:	f855 3b04 	ldr.w	r3, [r5], #4
 800836c:	4798      	blx	r3
 800836e:	3601      	adds	r6, #1
 8008370:	e7ee      	b.n	8008350 <__libc_init_array+0xc>
 8008372:	f855 3b04 	ldr.w	r3, [r5], #4
 8008376:	4798      	blx	r3
 8008378:	3601      	adds	r6, #1
 800837a:	e7f2      	b.n	8008362 <__libc_init_array+0x1e>
 800837c:	08009420 	.word	0x08009420
 8008380:	08009420 	.word	0x08009420
 8008384:	08009420 	.word	0x08009420
 8008388:	08009424 	.word	0x08009424

0800838c <memcpy>:
 800838c:	440a      	add	r2, r1
 800838e:	4291      	cmp	r1, r2
 8008390:	f100 33ff 	add.w	r3, r0, #4294967295
 8008394:	d100      	bne.n	8008398 <memcpy+0xc>
 8008396:	4770      	bx	lr
 8008398:	b510      	push	{r4, lr}
 800839a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800839e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083a2:	4291      	cmp	r1, r2
 80083a4:	d1f9      	bne.n	800839a <memcpy+0xe>
 80083a6:	bd10      	pop	{r4, pc}

080083a8 <memset>:
 80083a8:	4402      	add	r2, r0
 80083aa:	4603      	mov	r3, r0
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d100      	bne.n	80083b2 <memset+0xa>
 80083b0:	4770      	bx	lr
 80083b2:	f803 1b01 	strb.w	r1, [r3], #1
 80083b6:	e7f9      	b.n	80083ac <memset+0x4>

080083b8 <iprintf>:
 80083b8:	b40f      	push	{r0, r1, r2, r3}
 80083ba:	4b0a      	ldr	r3, [pc, #40]	; (80083e4 <iprintf+0x2c>)
 80083bc:	b513      	push	{r0, r1, r4, lr}
 80083be:	681c      	ldr	r4, [r3, #0]
 80083c0:	b124      	cbz	r4, 80083cc <iprintf+0x14>
 80083c2:	69a3      	ldr	r3, [r4, #24]
 80083c4:	b913      	cbnz	r3, 80083cc <iprintf+0x14>
 80083c6:	4620      	mov	r0, r4
 80083c8:	f000 f866 	bl	8008498 <__sinit>
 80083cc:	ab05      	add	r3, sp, #20
 80083ce:	9a04      	ldr	r2, [sp, #16]
 80083d0:	68a1      	ldr	r1, [r4, #8]
 80083d2:	9301      	str	r3, [sp, #4]
 80083d4:	4620      	mov	r0, r4
 80083d6:	f000 f9bd 	bl	8008754 <_vfiprintf_r>
 80083da:	b002      	add	sp, #8
 80083dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083e0:	b004      	add	sp, #16
 80083e2:	4770      	bx	lr
 80083e4:	2000000c 	.word	0x2000000c

080083e8 <std>:
 80083e8:	2300      	movs	r3, #0
 80083ea:	b510      	push	{r4, lr}
 80083ec:	4604      	mov	r4, r0
 80083ee:	e9c0 3300 	strd	r3, r3, [r0]
 80083f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083f6:	6083      	str	r3, [r0, #8]
 80083f8:	8181      	strh	r1, [r0, #12]
 80083fa:	6643      	str	r3, [r0, #100]	; 0x64
 80083fc:	81c2      	strh	r2, [r0, #14]
 80083fe:	6183      	str	r3, [r0, #24]
 8008400:	4619      	mov	r1, r3
 8008402:	2208      	movs	r2, #8
 8008404:	305c      	adds	r0, #92	; 0x5c
 8008406:	f7ff ffcf 	bl	80083a8 <memset>
 800840a:	4b05      	ldr	r3, [pc, #20]	; (8008420 <std+0x38>)
 800840c:	6263      	str	r3, [r4, #36]	; 0x24
 800840e:	4b05      	ldr	r3, [pc, #20]	; (8008424 <std+0x3c>)
 8008410:	62a3      	str	r3, [r4, #40]	; 0x28
 8008412:	4b05      	ldr	r3, [pc, #20]	; (8008428 <std+0x40>)
 8008414:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008416:	4b05      	ldr	r3, [pc, #20]	; (800842c <std+0x44>)
 8008418:	6224      	str	r4, [r4, #32]
 800841a:	6323      	str	r3, [r4, #48]	; 0x30
 800841c:	bd10      	pop	{r4, pc}
 800841e:	bf00      	nop
 8008420:	08008cfd 	.word	0x08008cfd
 8008424:	08008d1f 	.word	0x08008d1f
 8008428:	08008d57 	.word	0x08008d57
 800842c:	08008d7b 	.word	0x08008d7b

08008430 <_cleanup_r>:
 8008430:	4901      	ldr	r1, [pc, #4]	; (8008438 <_cleanup_r+0x8>)
 8008432:	f000 b8af 	b.w	8008594 <_fwalk_reent>
 8008436:	bf00      	nop
 8008438:	08009055 	.word	0x08009055

0800843c <__sfmoreglue>:
 800843c:	b570      	push	{r4, r5, r6, lr}
 800843e:	2268      	movs	r2, #104	; 0x68
 8008440:	1e4d      	subs	r5, r1, #1
 8008442:	4355      	muls	r5, r2
 8008444:	460e      	mov	r6, r1
 8008446:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800844a:	f000 f8e5 	bl	8008618 <_malloc_r>
 800844e:	4604      	mov	r4, r0
 8008450:	b140      	cbz	r0, 8008464 <__sfmoreglue+0x28>
 8008452:	2100      	movs	r1, #0
 8008454:	e9c0 1600 	strd	r1, r6, [r0]
 8008458:	300c      	adds	r0, #12
 800845a:	60a0      	str	r0, [r4, #8]
 800845c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008460:	f7ff ffa2 	bl	80083a8 <memset>
 8008464:	4620      	mov	r0, r4
 8008466:	bd70      	pop	{r4, r5, r6, pc}

08008468 <__sfp_lock_acquire>:
 8008468:	4801      	ldr	r0, [pc, #4]	; (8008470 <__sfp_lock_acquire+0x8>)
 800846a:	f000 b8b3 	b.w	80085d4 <__retarget_lock_acquire_recursive>
 800846e:	bf00      	nop
 8008470:	20000395 	.word	0x20000395

08008474 <__sfp_lock_release>:
 8008474:	4801      	ldr	r0, [pc, #4]	; (800847c <__sfp_lock_release+0x8>)
 8008476:	f000 b8ae 	b.w	80085d6 <__retarget_lock_release_recursive>
 800847a:	bf00      	nop
 800847c:	20000395 	.word	0x20000395

08008480 <__sinit_lock_acquire>:
 8008480:	4801      	ldr	r0, [pc, #4]	; (8008488 <__sinit_lock_acquire+0x8>)
 8008482:	f000 b8a7 	b.w	80085d4 <__retarget_lock_acquire_recursive>
 8008486:	bf00      	nop
 8008488:	20000396 	.word	0x20000396

0800848c <__sinit_lock_release>:
 800848c:	4801      	ldr	r0, [pc, #4]	; (8008494 <__sinit_lock_release+0x8>)
 800848e:	f000 b8a2 	b.w	80085d6 <__retarget_lock_release_recursive>
 8008492:	bf00      	nop
 8008494:	20000396 	.word	0x20000396

08008498 <__sinit>:
 8008498:	b510      	push	{r4, lr}
 800849a:	4604      	mov	r4, r0
 800849c:	f7ff fff0 	bl	8008480 <__sinit_lock_acquire>
 80084a0:	69a3      	ldr	r3, [r4, #24]
 80084a2:	b11b      	cbz	r3, 80084ac <__sinit+0x14>
 80084a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084a8:	f7ff bff0 	b.w	800848c <__sinit_lock_release>
 80084ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80084b0:	6523      	str	r3, [r4, #80]	; 0x50
 80084b2:	4b13      	ldr	r3, [pc, #76]	; (8008500 <__sinit+0x68>)
 80084b4:	4a13      	ldr	r2, [pc, #76]	; (8008504 <__sinit+0x6c>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80084ba:	42a3      	cmp	r3, r4
 80084bc:	bf04      	itt	eq
 80084be:	2301      	moveq	r3, #1
 80084c0:	61a3      	streq	r3, [r4, #24]
 80084c2:	4620      	mov	r0, r4
 80084c4:	f000 f820 	bl	8008508 <__sfp>
 80084c8:	6060      	str	r0, [r4, #4]
 80084ca:	4620      	mov	r0, r4
 80084cc:	f000 f81c 	bl	8008508 <__sfp>
 80084d0:	60a0      	str	r0, [r4, #8]
 80084d2:	4620      	mov	r0, r4
 80084d4:	f000 f818 	bl	8008508 <__sfp>
 80084d8:	2200      	movs	r2, #0
 80084da:	60e0      	str	r0, [r4, #12]
 80084dc:	2104      	movs	r1, #4
 80084de:	6860      	ldr	r0, [r4, #4]
 80084e0:	f7ff ff82 	bl	80083e8 <std>
 80084e4:	68a0      	ldr	r0, [r4, #8]
 80084e6:	2201      	movs	r2, #1
 80084e8:	2109      	movs	r1, #9
 80084ea:	f7ff ff7d 	bl	80083e8 <std>
 80084ee:	68e0      	ldr	r0, [r4, #12]
 80084f0:	2202      	movs	r2, #2
 80084f2:	2112      	movs	r1, #18
 80084f4:	f7ff ff78 	bl	80083e8 <std>
 80084f8:	2301      	movs	r3, #1
 80084fa:	61a3      	str	r3, [r4, #24]
 80084fc:	e7d2      	b.n	80084a4 <__sinit+0xc>
 80084fe:	bf00      	nop
 8008500:	08009380 	.word	0x08009380
 8008504:	08008431 	.word	0x08008431

08008508 <__sfp>:
 8008508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800850a:	4607      	mov	r7, r0
 800850c:	f7ff ffac 	bl	8008468 <__sfp_lock_acquire>
 8008510:	4b1e      	ldr	r3, [pc, #120]	; (800858c <__sfp+0x84>)
 8008512:	681e      	ldr	r6, [r3, #0]
 8008514:	69b3      	ldr	r3, [r6, #24]
 8008516:	b913      	cbnz	r3, 800851e <__sfp+0x16>
 8008518:	4630      	mov	r0, r6
 800851a:	f7ff ffbd 	bl	8008498 <__sinit>
 800851e:	3648      	adds	r6, #72	; 0x48
 8008520:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008524:	3b01      	subs	r3, #1
 8008526:	d503      	bpl.n	8008530 <__sfp+0x28>
 8008528:	6833      	ldr	r3, [r6, #0]
 800852a:	b30b      	cbz	r3, 8008570 <__sfp+0x68>
 800852c:	6836      	ldr	r6, [r6, #0]
 800852e:	e7f7      	b.n	8008520 <__sfp+0x18>
 8008530:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008534:	b9d5      	cbnz	r5, 800856c <__sfp+0x64>
 8008536:	4b16      	ldr	r3, [pc, #88]	; (8008590 <__sfp+0x88>)
 8008538:	60e3      	str	r3, [r4, #12]
 800853a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800853e:	6665      	str	r5, [r4, #100]	; 0x64
 8008540:	f000 f847 	bl	80085d2 <__retarget_lock_init_recursive>
 8008544:	f7ff ff96 	bl	8008474 <__sfp_lock_release>
 8008548:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800854c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008550:	6025      	str	r5, [r4, #0]
 8008552:	61a5      	str	r5, [r4, #24]
 8008554:	2208      	movs	r2, #8
 8008556:	4629      	mov	r1, r5
 8008558:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800855c:	f7ff ff24 	bl	80083a8 <memset>
 8008560:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008564:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008568:	4620      	mov	r0, r4
 800856a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800856c:	3468      	adds	r4, #104	; 0x68
 800856e:	e7d9      	b.n	8008524 <__sfp+0x1c>
 8008570:	2104      	movs	r1, #4
 8008572:	4638      	mov	r0, r7
 8008574:	f7ff ff62 	bl	800843c <__sfmoreglue>
 8008578:	4604      	mov	r4, r0
 800857a:	6030      	str	r0, [r6, #0]
 800857c:	2800      	cmp	r0, #0
 800857e:	d1d5      	bne.n	800852c <__sfp+0x24>
 8008580:	f7ff ff78 	bl	8008474 <__sfp_lock_release>
 8008584:	230c      	movs	r3, #12
 8008586:	603b      	str	r3, [r7, #0]
 8008588:	e7ee      	b.n	8008568 <__sfp+0x60>
 800858a:	bf00      	nop
 800858c:	08009380 	.word	0x08009380
 8008590:	ffff0001 	.word	0xffff0001

08008594 <_fwalk_reent>:
 8008594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008598:	4606      	mov	r6, r0
 800859a:	4688      	mov	r8, r1
 800859c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80085a0:	2700      	movs	r7, #0
 80085a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085a6:	f1b9 0901 	subs.w	r9, r9, #1
 80085aa:	d505      	bpl.n	80085b8 <_fwalk_reent+0x24>
 80085ac:	6824      	ldr	r4, [r4, #0]
 80085ae:	2c00      	cmp	r4, #0
 80085b0:	d1f7      	bne.n	80085a2 <_fwalk_reent+0xe>
 80085b2:	4638      	mov	r0, r7
 80085b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085b8:	89ab      	ldrh	r3, [r5, #12]
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d907      	bls.n	80085ce <_fwalk_reent+0x3a>
 80085be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80085c2:	3301      	adds	r3, #1
 80085c4:	d003      	beq.n	80085ce <_fwalk_reent+0x3a>
 80085c6:	4629      	mov	r1, r5
 80085c8:	4630      	mov	r0, r6
 80085ca:	47c0      	blx	r8
 80085cc:	4307      	orrs	r7, r0
 80085ce:	3568      	adds	r5, #104	; 0x68
 80085d0:	e7e9      	b.n	80085a6 <_fwalk_reent+0x12>

080085d2 <__retarget_lock_init_recursive>:
 80085d2:	4770      	bx	lr

080085d4 <__retarget_lock_acquire_recursive>:
 80085d4:	4770      	bx	lr

080085d6 <__retarget_lock_release_recursive>:
 80085d6:	4770      	bx	lr

080085d8 <sbrk_aligned>:
 80085d8:	b570      	push	{r4, r5, r6, lr}
 80085da:	4e0e      	ldr	r6, [pc, #56]	; (8008614 <sbrk_aligned+0x3c>)
 80085dc:	460c      	mov	r4, r1
 80085de:	6831      	ldr	r1, [r6, #0]
 80085e0:	4605      	mov	r5, r0
 80085e2:	b911      	cbnz	r1, 80085ea <sbrk_aligned+0x12>
 80085e4:	f000 fb7a 	bl	8008cdc <_sbrk_r>
 80085e8:	6030      	str	r0, [r6, #0]
 80085ea:	4621      	mov	r1, r4
 80085ec:	4628      	mov	r0, r5
 80085ee:	f000 fb75 	bl	8008cdc <_sbrk_r>
 80085f2:	1c43      	adds	r3, r0, #1
 80085f4:	d00a      	beq.n	800860c <sbrk_aligned+0x34>
 80085f6:	1cc4      	adds	r4, r0, #3
 80085f8:	f024 0403 	bic.w	r4, r4, #3
 80085fc:	42a0      	cmp	r0, r4
 80085fe:	d007      	beq.n	8008610 <sbrk_aligned+0x38>
 8008600:	1a21      	subs	r1, r4, r0
 8008602:	4628      	mov	r0, r5
 8008604:	f000 fb6a 	bl	8008cdc <_sbrk_r>
 8008608:	3001      	adds	r0, #1
 800860a:	d101      	bne.n	8008610 <sbrk_aligned+0x38>
 800860c:	f04f 34ff 	mov.w	r4, #4294967295
 8008610:	4620      	mov	r0, r4
 8008612:	bd70      	pop	{r4, r5, r6, pc}
 8008614:	2000039c 	.word	0x2000039c

08008618 <_malloc_r>:
 8008618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800861c:	1ccd      	adds	r5, r1, #3
 800861e:	f025 0503 	bic.w	r5, r5, #3
 8008622:	3508      	adds	r5, #8
 8008624:	2d0c      	cmp	r5, #12
 8008626:	bf38      	it	cc
 8008628:	250c      	movcc	r5, #12
 800862a:	2d00      	cmp	r5, #0
 800862c:	4607      	mov	r7, r0
 800862e:	db01      	blt.n	8008634 <_malloc_r+0x1c>
 8008630:	42a9      	cmp	r1, r5
 8008632:	d905      	bls.n	8008640 <_malloc_r+0x28>
 8008634:	230c      	movs	r3, #12
 8008636:	603b      	str	r3, [r7, #0]
 8008638:	2600      	movs	r6, #0
 800863a:	4630      	mov	r0, r6
 800863c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008640:	4e2e      	ldr	r6, [pc, #184]	; (80086fc <_malloc_r+0xe4>)
 8008642:	f000 fdbb 	bl	80091bc <__malloc_lock>
 8008646:	6833      	ldr	r3, [r6, #0]
 8008648:	461c      	mov	r4, r3
 800864a:	bb34      	cbnz	r4, 800869a <_malloc_r+0x82>
 800864c:	4629      	mov	r1, r5
 800864e:	4638      	mov	r0, r7
 8008650:	f7ff ffc2 	bl	80085d8 <sbrk_aligned>
 8008654:	1c43      	adds	r3, r0, #1
 8008656:	4604      	mov	r4, r0
 8008658:	d14d      	bne.n	80086f6 <_malloc_r+0xde>
 800865a:	6834      	ldr	r4, [r6, #0]
 800865c:	4626      	mov	r6, r4
 800865e:	2e00      	cmp	r6, #0
 8008660:	d140      	bne.n	80086e4 <_malloc_r+0xcc>
 8008662:	6823      	ldr	r3, [r4, #0]
 8008664:	4631      	mov	r1, r6
 8008666:	4638      	mov	r0, r7
 8008668:	eb04 0803 	add.w	r8, r4, r3
 800866c:	f000 fb36 	bl	8008cdc <_sbrk_r>
 8008670:	4580      	cmp	r8, r0
 8008672:	d13a      	bne.n	80086ea <_malloc_r+0xd2>
 8008674:	6821      	ldr	r1, [r4, #0]
 8008676:	3503      	adds	r5, #3
 8008678:	1a6d      	subs	r5, r5, r1
 800867a:	f025 0503 	bic.w	r5, r5, #3
 800867e:	3508      	adds	r5, #8
 8008680:	2d0c      	cmp	r5, #12
 8008682:	bf38      	it	cc
 8008684:	250c      	movcc	r5, #12
 8008686:	4629      	mov	r1, r5
 8008688:	4638      	mov	r0, r7
 800868a:	f7ff ffa5 	bl	80085d8 <sbrk_aligned>
 800868e:	3001      	adds	r0, #1
 8008690:	d02b      	beq.n	80086ea <_malloc_r+0xd2>
 8008692:	6823      	ldr	r3, [r4, #0]
 8008694:	442b      	add	r3, r5
 8008696:	6023      	str	r3, [r4, #0]
 8008698:	e00e      	b.n	80086b8 <_malloc_r+0xa0>
 800869a:	6822      	ldr	r2, [r4, #0]
 800869c:	1b52      	subs	r2, r2, r5
 800869e:	d41e      	bmi.n	80086de <_malloc_r+0xc6>
 80086a0:	2a0b      	cmp	r2, #11
 80086a2:	d916      	bls.n	80086d2 <_malloc_r+0xba>
 80086a4:	1961      	adds	r1, r4, r5
 80086a6:	42a3      	cmp	r3, r4
 80086a8:	6025      	str	r5, [r4, #0]
 80086aa:	bf18      	it	ne
 80086ac:	6059      	strne	r1, [r3, #4]
 80086ae:	6863      	ldr	r3, [r4, #4]
 80086b0:	bf08      	it	eq
 80086b2:	6031      	streq	r1, [r6, #0]
 80086b4:	5162      	str	r2, [r4, r5]
 80086b6:	604b      	str	r3, [r1, #4]
 80086b8:	4638      	mov	r0, r7
 80086ba:	f104 060b 	add.w	r6, r4, #11
 80086be:	f000 fd83 	bl	80091c8 <__malloc_unlock>
 80086c2:	f026 0607 	bic.w	r6, r6, #7
 80086c6:	1d23      	adds	r3, r4, #4
 80086c8:	1af2      	subs	r2, r6, r3
 80086ca:	d0b6      	beq.n	800863a <_malloc_r+0x22>
 80086cc:	1b9b      	subs	r3, r3, r6
 80086ce:	50a3      	str	r3, [r4, r2]
 80086d0:	e7b3      	b.n	800863a <_malloc_r+0x22>
 80086d2:	6862      	ldr	r2, [r4, #4]
 80086d4:	42a3      	cmp	r3, r4
 80086d6:	bf0c      	ite	eq
 80086d8:	6032      	streq	r2, [r6, #0]
 80086da:	605a      	strne	r2, [r3, #4]
 80086dc:	e7ec      	b.n	80086b8 <_malloc_r+0xa0>
 80086de:	4623      	mov	r3, r4
 80086e0:	6864      	ldr	r4, [r4, #4]
 80086e2:	e7b2      	b.n	800864a <_malloc_r+0x32>
 80086e4:	4634      	mov	r4, r6
 80086e6:	6876      	ldr	r6, [r6, #4]
 80086e8:	e7b9      	b.n	800865e <_malloc_r+0x46>
 80086ea:	230c      	movs	r3, #12
 80086ec:	603b      	str	r3, [r7, #0]
 80086ee:	4638      	mov	r0, r7
 80086f0:	f000 fd6a 	bl	80091c8 <__malloc_unlock>
 80086f4:	e7a1      	b.n	800863a <_malloc_r+0x22>
 80086f6:	6025      	str	r5, [r4, #0]
 80086f8:	e7de      	b.n	80086b8 <_malloc_r+0xa0>
 80086fa:	bf00      	nop
 80086fc:	20000398 	.word	0x20000398

08008700 <__sfputc_r>:
 8008700:	6893      	ldr	r3, [r2, #8]
 8008702:	3b01      	subs	r3, #1
 8008704:	2b00      	cmp	r3, #0
 8008706:	b410      	push	{r4}
 8008708:	6093      	str	r3, [r2, #8]
 800870a:	da08      	bge.n	800871e <__sfputc_r+0x1e>
 800870c:	6994      	ldr	r4, [r2, #24]
 800870e:	42a3      	cmp	r3, r4
 8008710:	db01      	blt.n	8008716 <__sfputc_r+0x16>
 8008712:	290a      	cmp	r1, #10
 8008714:	d103      	bne.n	800871e <__sfputc_r+0x1e>
 8008716:	f85d 4b04 	ldr.w	r4, [sp], #4
 800871a:	f000 bb33 	b.w	8008d84 <__swbuf_r>
 800871e:	6813      	ldr	r3, [r2, #0]
 8008720:	1c58      	adds	r0, r3, #1
 8008722:	6010      	str	r0, [r2, #0]
 8008724:	7019      	strb	r1, [r3, #0]
 8008726:	4608      	mov	r0, r1
 8008728:	f85d 4b04 	ldr.w	r4, [sp], #4
 800872c:	4770      	bx	lr

0800872e <__sfputs_r>:
 800872e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008730:	4606      	mov	r6, r0
 8008732:	460f      	mov	r7, r1
 8008734:	4614      	mov	r4, r2
 8008736:	18d5      	adds	r5, r2, r3
 8008738:	42ac      	cmp	r4, r5
 800873a:	d101      	bne.n	8008740 <__sfputs_r+0x12>
 800873c:	2000      	movs	r0, #0
 800873e:	e007      	b.n	8008750 <__sfputs_r+0x22>
 8008740:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008744:	463a      	mov	r2, r7
 8008746:	4630      	mov	r0, r6
 8008748:	f7ff ffda 	bl	8008700 <__sfputc_r>
 800874c:	1c43      	adds	r3, r0, #1
 800874e:	d1f3      	bne.n	8008738 <__sfputs_r+0xa>
 8008750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008754 <_vfiprintf_r>:
 8008754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008758:	460d      	mov	r5, r1
 800875a:	b09d      	sub	sp, #116	; 0x74
 800875c:	4614      	mov	r4, r2
 800875e:	4698      	mov	r8, r3
 8008760:	4606      	mov	r6, r0
 8008762:	b118      	cbz	r0, 800876c <_vfiprintf_r+0x18>
 8008764:	6983      	ldr	r3, [r0, #24]
 8008766:	b90b      	cbnz	r3, 800876c <_vfiprintf_r+0x18>
 8008768:	f7ff fe96 	bl	8008498 <__sinit>
 800876c:	4b89      	ldr	r3, [pc, #548]	; (8008994 <_vfiprintf_r+0x240>)
 800876e:	429d      	cmp	r5, r3
 8008770:	d11b      	bne.n	80087aa <_vfiprintf_r+0x56>
 8008772:	6875      	ldr	r5, [r6, #4]
 8008774:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008776:	07d9      	lsls	r1, r3, #31
 8008778:	d405      	bmi.n	8008786 <_vfiprintf_r+0x32>
 800877a:	89ab      	ldrh	r3, [r5, #12]
 800877c:	059a      	lsls	r2, r3, #22
 800877e:	d402      	bmi.n	8008786 <_vfiprintf_r+0x32>
 8008780:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008782:	f7ff ff27 	bl	80085d4 <__retarget_lock_acquire_recursive>
 8008786:	89ab      	ldrh	r3, [r5, #12]
 8008788:	071b      	lsls	r3, r3, #28
 800878a:	d501      	bpl.n	8008790 <_vfiprintf_r+0x3c>
 800878c:	692b      	ldr	r3, [r5, #16]
 800878e:	b9eb      	cbnz	r3, 80087cc <_vfiprintf_r+0x78>
 8008790:	4629      	mov	r1, r5
 8008792:	4630      	mov	r0, r6
 8008794:	f000 fb5a 	bl	8008e4c <__swsetup_r>
 8008798:	b1c0      	cbz	r0, 80087cc <_vfiprintf_r+0x78>
 800879a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800879c:	07dc      	lsls	r4, r3, #31
 800879e:	d50e      	bpl.n	80087be <_vfiprintf_r+0x6a>
 80087a0:	f04f 30ff 	mov.w	r0, #4294967295
 80087a4:	b01d      	add	sp, #116	; 0x74
 80087a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087aa:	4b7b      	ldr	r3, [pc, #492]	; (8008998 <_vfiprintf_r+0x244>)
 80087ac:	429d      	cmp	r5, r3
 80087ae:	d101      	bne.n	80087b4 <_vfiprintf_r+0x60>
 80087b0:	68b5      	ldr	r5, [r6, #8]
 80087b2:	e7df      	b.n	8008774 <_vfiprintf_r+0x20>
 80087b4:	4b79      	ldr	r3, [pc, #484]	; (800899c <_vfiprintf_r+0x248>)
 80087b6:	429d      	cmp	r5, r3
 80087b8:	bf08      	it	eq
 80087ba:	68f5      	ldreq	r5, [r6, #12]
 80087bc:	e7da      	b.n	8008774 <_vfiprintf_r+0x20>
 80087be:	89ab      	ldrh	r3, [r5, #12]
 80087c0:	0598      	lsls	r0, r3, #22
 80087c2:	d4ed      	bmi.n	80087a0 <_vfiprintf_r+0x4c>
 80087c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087c6:	f7ff ff06 	bl	80085d6 <__retarget_lock_release_recursive>
 80087ca:	e7e9      	b.n	80087a0 <_vfiprintf_r+0x4c>
 80087cc:	2300      	movs	r3, #0
 80087ce:	9309      	str	r3, [sp, #36]	; 0x24
 80087d0:	2320      	movs	r3, #32
 80087d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80087da:	2330      	movs	r3, #48	; 0x30
 80087dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80089a0 <_vfiprintf_r+0x24c>
 80087e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087e4:	f04f 0901 	mov.w	r9, #1
 80087e8:	4623      	mov	r3, r4
 80087ea:	469a      	mov	sl, r3
 80087ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087f0:	b10a      	cbz	r2, 80087f6 <_vfiprintf_r+0xa2>
 80087f2:	2a25      	cmp	r2, #37	; 0x25
 80087f4:	d1f9      	bne.n	80087ea <_vfiprintf_r+0x96>
 80087f6:	ebba 0b04 	subs.w	fp, sl, r4
 80087fa:	d00b      	beq.n	8008814 <_vfiprintf_r+0xc0>
 80087fc:	465b      	mov	r3, fp
 80087fe:	4622      	mov	r2, r4
 8008800:	4629      	mov	r1, r5
 8008802:	4630      	mov	r0, r6
 8008804:	f7ff ff93 	bl	800872e <__sfputs_r>
 8008808:	3001      	adds	r0, #1
 800880a:	f000 80aa 	beq.w	8008962 <_vfiprintf_r+0x20e>
 800880e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008810:	445a      	add	r2, fp
 8008812:	9209      	str	r2, [sp, #36]	; 0x24
 8008814:	f89a 3000 	ldrb.w	r3, [sl]
 8008818:	2b00      	cmp	r3, #0
 800881a:	f000 80a2 	beq.w	8008962 <_vfiprintf_r+0x20e>
 800881e:	2300      	movs	r3, #0
 8008820:	f04f 32ff 	mov.w	r2, #4294967295
 8008824:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008828:	f10a 0a01 	add.w	sl, sl, #1
 800882c:	9304      	str	r3, [sp, #16]
 800882e:	9307      	str	r3, [sp, #28]
 8008830:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008834:	931a      	str	r3, [sp, #104]	; 0x68
 8008836:	4654      	mov	r4, sl
 8008838:	2205      	movs	r2, #5
 800883a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800883e:	4858      	ldr	r0, [pc, #352]	; (80089a0 <_vfiprintf_r+0x24c>)
 8008840:	f7f7 fcc6 	bl	80001d0 <memchr>
 8008844:	9a04      	ldr	r2, [sp, #16]
 8008846:	b9d8      	cbnz	r0, 8008880 <_vfiprintf_r+0x12c>
 8008848:	06d1      	lsls	r1, r2, #27
 800884a:	bf44      	itt	mi
 800884c:	2320      	movmi	r3, #32
 800884e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008852:	0713      	lsls	r3, r2, #28
 8008854:	bf44      	itt	mi
 8008856:	232b      	movmi	r3, #43	; 0x2b
 8008858:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800885c:	f89a 3000 	ldrb.w	r3, [sl]
 8008860:	2b2a      	cmp	r3, #42	; 0x2a
 8008862:	d015      	beq.n	8008890 <_vfiprintf_r+0x13c>
 8008864:	9a07      	ldr	r2, [sp, #28]
 8008866:	4654      	mov	r4, sl
 8008868:	2000      	movs	r0, #0
 800886a:	f04f 0c0a 	mov.w	ip, #10
 800886e:	4621      	mov	r1, r4
 8008870:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008874:	3b30      	subs	r3, #48	; 0x30
 8008876:	2b09      	cmp	r3, #9
 8008878:	d94e      	bls.n	8008918 <_vfiprintf_r+0x1c4>
 800887a:	b1b0      	cbz	r0, 80088aa <_vfiprintf_r+0x156>
 800887c:	9207      	str	r2, [sp, #28]
 800887e:	e014      	b.n	80088aa <_vfiprintf_r+0x156>
 8008880:	eba0 0308 	sub.w	r3, r0, r8
 8008884:	fa09 f303 	lsl.w	r3, r9, r3
 8008888:	4313      	orrs	r3, r2
 800888a:	9304      	str	r3, [sp, #16]
 800888c:	46a2      	mov	sl, r4
 800888e:	e7d2      	b.n	8008836 <_vfiprintf_r+0xe2>
 8008890:	9b03      	ldr	r3, [sp, #12]
 8008892:	1d19      	adds	r1, r3, #4
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	9103      	str	r1, [sp, #12]
 8008898:	2b00      	cmp	r3, #0
 800889a:	bfbb      	ittet	lt
 800889c:	425b      	neglt	r3, r3
 800889e:	f042 0202 	orrlt.w	r2, r2, #2
 80088a2:	9307      	strge	r3, [sp, #28]
 80088a4:	9307      	strlt	r3, [sp, #28]
 80088a6:	bfb8      	it	lt
 80088a8:	9204      	strlt	r2, [sp, #16]
 80088aa:	7823      	ldrb	r3, [r4, #0]
 80088ac:	2b2e      	cmp	r3, #46	; 0x2e
 80088ae:	d10c      	bne.n	80088ca <_vfiprintf_r+0x176>
 80088b0:	7863      	ldrb	r3, [r4, #1]
 80088b2:	2b2a      	cmp	r3, #42	; 0x2a
 80088b4:	d135      	bne.n	8008922 <_vfiprintf_r+0x1ce>
 80088b6:	9b03      	ldr	r3, [sp, #12]
 80088b8:	1d1a      	adds	r2, r3, #4
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	9203      	str	r2, [sp, #12]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	bfb8      	it	lt
 80088c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80088c6:	3402      	adds	r4, #2
 80088c8:	9305      	str	r3, [sp, #20]
 80088ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80089b0 <_vfiprintf_r+0x25c>
 80088ce:	7821      	ldrb	r1, [r4, #0]
 80088d0:	2203      	movs	r2, #3
 80088d2:	4650      	mov	r0, sl
 80088d4:	f7f7 fc7c 	bl	80001d0 <memchr>
 80088d8:	b140      	cbz	r0, 80088ec <_vfiprintf_r+0x198>
 80088da:	2340      	movs	r3, #64	; 0x40
 80088dc:	eba0 000a 	sub.w	r0, r0, sl
 80088e0:	fa03 f000 	lsl.w	r0, r3, r0
 80088e4:	9b04      	ldr	r3, [sp, #16]
 80088e6:	4303      	orrs	r3, r0
 80088e8:	3401      	adds	r4, #1
 80088ea:	9304      	str	r3, [sp, #16]
 80088ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088f0:	482c      	ldr	r0, [pc, #176]	; (80089a4 <_vfiprintf_r+0x250>)
 80088f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088f6:	2206      	movs	r2, #6
 80088f8:	f7f7 fc6a 	bl	80001d0 <memchr>
 80088fc:	2800      	cmp	r0, #0
 80088fe:	d03f      	beq.n	8008980 <_vfiprintf_r+0x22c>
 8008900:	4b29      	ldr	r3, [pc, #164]	; (80089a8 <_vfiprintf_r+0x254>)
 8008902:	bb1b      	cbnz	r3, 800894c <_vfiprintf_r+0x1f8>
 8008904:	9b03      	ldr	r3, [sp, #12]
 8008906:	3307      	adds	r3, #7
 8008908:	f023 0307 	bic.w	r3, r3, #7
 800890c:	3308      	adds	r3, #8
 800890e:	9303      	str	r3, [sp, #12]
 8008910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008912:	443b      	add	r3, r7
 8008914:	9309      	str	r3, [sp, #36]	; 0x24
 8008916:	e767      	b.n	80087e8 <_vfiprintf_r+0x94>
 8008918:	fb0c 3202 	mla	r2, ip, r2, r3
 800891c:	460c      	mov	r4, r1
 800891e:	2001      	movs	r0, #1
 8008920:	e7a5      	b.n	800886e <_vfiprintf_r+0x11a>
 8008922:	2300      	movs	r3, #0
 8008924:	3401      	adds	r4, #1
 8008926:	9305      	str	r3, [sp, #20]
 8008928:	4619      	mov	r1, r3
 800892a:	f04f 0c0a 	mov.w	ip, #10
 800892e:	4620      	mov	r0, r4
 8008930:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008934:	3a30      	subs	r2, #48	; 0x30
 8008936:	2a09      	cmp	r2, #9
 8008938:	d903      	bls.n	8008942 <_vfiprintf_r+0x1ee>
 800893a:	2b00      	cmp	r3, #0
 800893c:	d0c5      	beq.n	80088ca <_vfiprintf_r+0x176>
 800893e:	9105      	str	r1, [sp, #20]
 8008940:	e7c3      	b.n	80088ca <_vfiprintf_r+0x176>
 8008942:	fb0c 2101 	mla	r1, ip, r1, r2
 8008946:	4604      	mov	r4, r0
 8008948:	2301      	movs	r3, #1
 800894a:	e7f0      	b.n	800892e <_vfiprintf_r+0x1da>
 800894c:	ab03      	add	r3, sp, #12
 800894e:	9300      	str	r3, [sp, #0]
 8008950:	462a      	mov	r2, r5
 8008952:	4b16      	ldr	r3, [pc, #88]	; (80089ac <_vfiprintf_r+0x258>)
 8008954:	a904      	add	r1, sp, #16
 8008956:	4630      	mov	r0, r6
 8008958:	f3af 8000 	nop.w
 800895c:	4607      	mov	r7, r0
 800895e:	1c78      	adds	r0, r7, #1
 8008960:	d1d6      	bne.n	8008910 <_vfiprintf_r+0x1bc>
 8008962:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008964:	07d9      	lsls	r1, r3, #31
 8008966:	d405      	bmi.n	8008974 <_vfiprintf_r+0x220>
 8008968:	89ab      	ldrh	r3, [r5, #12]
 800896a:	059a      	lsls	r2, r3, #22
 800896c:	d402      	bmi.n	8008974 <_vfiprintf_r+0x220>
 800896e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008970:	f7ff fe31 	bl	80085d6 <__retarget_lock_release_recursive>
 8008974:	89ab      	ldrh	r3, [r5, #12]
 8008976:	065b      	lsls	r3, r3, #25
 8008978:	f53f af12 	bmi.w	80087a0 <_vfiprintf_r+0x4c>
 800897c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800897e:	e711      	b.n	80087a4 <_vfiprintf_r+0x50>
 8008980:	ab03      	add	r3, sp, #12
 8008982:	9300      	str	r3, [sp, #0]
 8008984:	462a      	mov	r2, r5
 8008986:	4b09      	ldr	r3, [pc, #36]	; (80089ac <_vfiprintf_r+0x258>)
 8008988:	a904      	add	r1, sp, #16
 800898a:	4630      	mov	r0, r6
 800898c:	f000 f880 	bl	8008a90 <_printf_i>
 8008990:	e7e4      	b.n	800895c <_vfiprintf_r+0x208>
 8008992:	bf00      	nop
 8008994:	080093a4 	.word	0x080093a4
 8008998:	080093c4 	.word	0x080093c4
 800899c:	08009384 	.word	0x08009384
 80089a0:	080093e4 	.word	0x080093e4
 80089a4:	080093ee 	.word	0x080093ee
 80089a8:	00000000 	.word	0x00000000
 80089ac:	0800872f 	.word	0x0800872f
 80089b0:	080093ea 	.word	0x080093ea

080089b4 <_printf_common>:
 80089b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089b8:	4616      	mov	r6, r2
 80089ba:	4699      	mov	r9, r3
 80089bc:	688a      	ldr	r2, [r1, #8]
 80089be:	690b      	ldr	r3, [r1, #16]
 80089c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089c4:	4293      	cmp	r3, r2
 80089c6:	bfb8      	it	lt
 80089c8:	4613      	movlt	r3, r2
 80089ca:	6033      	str	r3, [r6, #0]
 80089cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80089d0:	4607      	mov	r7, r0
 80089d2:	460c      	mov	r4, r1
 80089d4:	b10a      	cbz	r2, 80089da <_printf_common+0x26>
 80089d6:	3301      	adds	r3, #1
 80089d8:	6033      	str	r3, [r6, #0]
 80089da:	6823      	ldr	r3, [r4, #0]
 80089dc:	0699      	lsls	r1, r3, #26
 80089de:	bf42      	ittt	mi
 80089e0:	6833      	ldrmi	r3, [r6, #0]
 80089e2:	3302      	addmi	r3, #2
 80089e4:	6033      	strmi	r3, [r6, #0]
 80089e6:	6825      	ldr	r5, [r4, #0]
 80089e8:	f015 0506 	ands.w	r5, r5, #6
 80089ec:	d106      	bne.n	80089fc <_printf_common+0x48>
 80089ee:	f104 0a19 	add.w	sl, r4, #25
 80089f2:	68e3      	ldr	r3, [r4, #12]
 80089f4:	6832      	ldr	r2, [r6, #0]
 80089f6:	1a9b      	subs	r3, r3, r2
 80089f8:	42ab      	cmp	r3, r5
 80089fa:	dc26      	bgt.n	8008a4a <_printf_common+0x96>
 80089fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a00:	1e13      	subs	r3, r2, #0
 8008a02:	6822      	ldr	r2, [r4, #0]
 8008a04:	bf18      	it	ne
 8008a06:	2301      	movne	r3, #1
 8008a08:	0692      	lsls	r2, r2, #26
 8008a0a:	d42b      	bmi.n	8008a64 <_printf_common+0xb0>
 8008a0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a10:	4649      	mov	r1, r9
 8008a12:	4638      	mov	r0, r7
 8008a14:	47c0      	blx	r8
 8008a16:	3001      	adds	r0, #1
 8008a18:	d01e      	beq.n	8008a58 <_printf_common+0xa4>
 8008a1a:	6823      	ldr	r3, [r4, #0]
 8008a1c:	68e5      	ldr	r5, [r4, #12]
 8008a1e:	6832      	ldr	r2, [r6, #0]
 8008a20:	f003 0306 	and.w	r3, r3, #6
 8008a24:	2b04      	cmp	r3, #4
 8008a26:	bf08      	it	eq
 8008a28:	1aad      	subeq	r5, r5, r2
 8008a2a:	68a3      	ldr	r3, [r4, #8]
 8008a2c:	6922      	ldr	r2, [r4, #16]
 8008a2e:	bf0c      	ite	eq
 8008a30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a34:	2500      	movne	r5, #0
 8008a36:	4293      	cmp	r3, r2
 8008a38:	bfc4      	itt	gt
 8008a3a:	1a9b      	subgt	r3, r3, r2
 8008a3c:	18ed      	addgt	r5, r5, r3
 8008a3e:	2600      	movs	r6, #0
 8008a40:	341a      	adds	r4, #26
 8008a42:	42b5      	cmp	r5, r6
 8008a44:	d11a      	bne.n	8008a7c <_printf_common+0xc8>
 8008a46:	2000      	movs	r0, #0
 8008a48:	e008      	b.n	8008a5c <_printf_common+0xa8>
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	4652      	mov	r2, sl
 8008a4e:	4649      	mov	r1, r9
 8008a50:	4638      	mov	r0, r7
 8008a52:	47c0      	blx	r8
 8008a54:	3001      	adds	r0, #1
 8008a56:	d103      	bne.n	8008a60 <_printf_common+0xac>
 8008a58:	f04f 30ff 	mov.w	r0, #4294967295
 8008a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a60:	3501      	adds	r5, #1
 8008a62:	e7c6      	b.n	80089f2 <_printf_common+0x3e>
 8008a64:	18e1      	adds	r1, r4, r3
 8008a66:	1c5a      	adds	r2, r3, #1
 8008a68:	2030      	movs	r0, #48	; 0x30
 8008a6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a6e:	4422      	add	r2, r4
 8008a70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a78:	3302      	adds	r3, #2
 8008a7a:	e7c7      	b.n	8008a0c <_printf_common+0x58>
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	4622      	mov	r2, r4
 8008a80:	4649      	mov	r1, r9
 8008a82:	4638      	mov	r0, r7
 8008a84:	47c0      	blx	r8
 8008a86:	3001      	adds	r0, #1
 8008a88:	d0e6      	beq.n	8008a58 <_printf_common+0xa4>
 8008a8a:	3601      	adds	r6, #1
 8008a8c:	e7d9      	b.n	8008a42 <_printf_common+0x8e>
	...

08008a90 <_printf_i>:
 8008a90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a94:	7e0f      	ldrb	r7, [r1, #24]
 8008a96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a98:	2f78      	cmp	r7, #120	; 0x78
 8008a9a:	4691      	mov	r9, r2
 8008a9c:	4680      	mov	r8, r0
 8008a9e:	460c      	mov	r4, r1
 8008aa0:	469a      	mov	sl, r3
 8008aa2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008aa6:	d807      	bhi.n	8008ab8 <_printf_i+0x28>
 8008aa8:	2f62      	cmp	r7, #98	; 0x62
 8008aaa:	d80a      	bhi.n	8008ac2 <_printf_i+0x32>
 8008aac:	2f00      	cmp	r7, #0
 8008aae:	f000 80d8 	beq.w	8008c62 <_printf_i+0x1d2>
 8008ab2:	2f58      	cmp	r7, #88	; 0x58
 8008ab4:	f000 80a3 	beq.w	8008bfe <_printf_i+0x16e>
 8008ab8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008abc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ac0:	e03a      	b.n	8008b38 <_printf_i+0xa8>
 8008ac2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008ac6:	2b15      	cmp	r3, #21
 8008ac8:	d8f6      	bhi.n	8008ab8 <_printf_i+0x28>
 8008aca:	a101      	add	r1, pc, #4	; (adr r1, 8008ad0 <_printf_i+0x40>)
 8008acc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ad0:	08008b29 	.word	0x08008b29
 8008ad4:	08008b3d 	.word	0x08008b3d
 8008ad8:	08008ab9 	.word	0x08008ab9
 8008adc:	08008ab9 	.word	0x08008ab9
 8008ae0:	08008ab9 	.word	0x08008ab9
 8008ae4:	08008ab9 	.word	0x08008ab9
 8008ae8:	08008b3d 	.word	0x08008b3d
 8008aec:	08008ab9 	.word	0x08008ab9
 8008af0:	08008ab9 	.word	0x08008ab9
 8008af4:	08008ab9 	.word	0x08008ab9
 8008af8:	08008ab9 	.word	0x08008ab9
 8008afc:	08008c49 	.word	0x08008c49
 8008b00:	08008b6d 	.word	0x08008b6d
 8008b04:	08008c2b 	.word	0x08008c2b
 8008b08:	08008ab9 	.word	0x08008ab9
 8008b0c:	08008ab9 	.word	0x08008ab9
 8008b10:	08008c6b 	.word	0x08008c6b
 8008b14:	08008ab9 	.word	0x08008ab9
 8008b18:	08008b6d 	.word	0x08008b6d
 8008b1c:	08008ab9 	.word	0x08008ab9
 8008b20:	08008ab9 	.word	0x08008ab9
 8008b24:	08008c33 	.word	0x08008c33
 8008b28:	682b      	ldr	r3, [r5, #0]
 8008b2a:	1d1a      	adds	r2, r3, #4
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	602a      	str	r2, [r5, #0]
 8008b30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e0a3      	b.n	8008c84 <_printf_i+0x1f4>
 8008b3c:	6820      	ldr	r0, [r4, #0]
 8008b3e:	6829      	ldr	r1, [r5, #0]
 8008b40:	0606      	lsls	r6, r0, #24
 8008b42:	f101 0304 	add.w	r3, r1, #4
 8008b46:	d50a      	bpl.n	8008b5e <_printf_i+0xce>
 8008b48:	680e      	ldr	r6, [r1, #0]
 8008b4a:	602b      	str	r3, [r5, #0]
 8008b4c:	2e00      	cmp	r6, #0
 8008b4e:	da03      	bge.n	8008b58 <_printf_i+0xc8>
 8008b50:	232d      	movs	r3, #45	; 0x2d
 8008b52:	4276      	negs	r6, r6
 8008b54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b58:	485e      	ldr	r0, [pc, #376]	; (8008cd4 <_printf_i+0x244>)
 8008b5a:	230a      	movs	r3, #10
 8008b5c:	e019      	b.n	8008b92 <_printf_i+0x102>
 8008b5e:	680e      	ldr	r6, [r1, #0]
 8008b60:	602b      	str	r3, [r5, #0]
 8008b62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b66:	bf18      	it	ne
 8008b68:	b236      	sxthne	r6, r6
 8008b6a:	e7ef      	b.n	8008b4c <_printf_i+0xbc>
 8008b6c:	682b      	ldr	r3, [r5, #0]
 8008b6e:	6820      	ldr	r0, [r4, #0]
 8008b70:	1d19      	adds	r1, r3, #4
 8008b72:	6029      	str	r1, [r5, #0]
 8008b74:	0601      	lsls	r1, r0, #24
 8008b76:	d501      	bpl.n	8008b7c <_printf_i+0xec>
 8008b78:	681e      	ldr	r6, [r3, #0]
 8008b7a:	e002      	b.n	8008b82 <_printf_i+0xf2>
 8008b7c:	0646      	lsls	r6, r0, #25
 8008b7e:	d5fb      	bpl.n	8008b78 <_printf_i+0xe8>
 8008b80:	881e      	ldrh	r6, [r3, #0]
 8008b82:	4854      	ldr	r0, [pc, #336]	; (8008cd4 <_printf_i+0x244>)
 8008b84:	2f6f      	cmp	r7, #111	; 0x6f
 8008b86:	bf0c      	ite	eq
 8008b88:	2308      	moveq	r3, #8
 8008b8a:	230a      	movne	r3, #10
 8008b8c:	2100      	movs	r1, #0
 8008b8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b92:	6865      	ldr	r5, [r4, #4]
 8008b94:	60a5      	str	r5, [r4, #8]
 8008b96:	2d00      	cmp	r5, #0
 8008b98:	bfa2      	ittt	ge
 8008b9a:	6821      	ldrge	r1, [r4, #0]
 8008b9c:	f021 0104 	bicge.w	r1, r1, #4
 8008ba0:	6021      	strge	r1, [r4, #0]
 8008ba2:	b90e      	cbnz	r6, 8008ba8 <_printf_i+0x118>
 8008ba4:	2d00      	cmp	r5, #0
 8008ba6:	d04d      	beq.n	8008c44 <_printf_i+0x1b4>
 8008ba8:	4615      	mov	r5, r2
 8008baa:	fbb6 f1f3 	udiv	r1, r6, r3
 8008bae:	fb03 6711 	mls	r7, r3, r1, r6
 8008bb2:	5dc7      	ldrb	r7, [r0, r7]
 8008bb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008bb8:	4637      	mov	r7, r6
 8008bba:	42bb      	cmp	r3, r7
 8008bbc:	460e      	mov	r6, r1
 8008bbe:	d9f4      	bls.n	8008baa <_printf_i+0x11a>
 8008bc0:	2b08      	cmp	r3, #8
 8008bc2:	d10b      	bne.n	8008bdc <_printf_i+0x14c>
 8008bc4:	6823      	ldr	r3, [r4, #0]
 8008bc6:	07de      	lsls	r6, r3, #31
 8008bc8:	d508      	bpl.n	8008bdc <_printf_i+0x14c>
 8008bca:	6923      	ldr	r3, [r4, #16]
 8008bcc:	6861      	ldr	r1, [r4, #4]
 8008bce:	4299      	cmp	r1, r3
 8008bd0:	bfde      	ittt	le
 8008bd2:	2330      	movle	r3, #48	; 0x30
 8008bd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008bd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008bdc:	1b52      	subs	r2, r2, r5
 8008bde:	6122      	str	r2, [r4, #16]
 8008be0:	f8cd a000 	str.w	sl, [sp]
 8008be4:	464b      	mov	r3, r9
 8008be6:	aa03      	add	r2, sp, #12
 8008be8:	4621      	mov	r1, r4
 8008bea:	4640      	mov	r0, r8
 8008bec:	f7ff fee2 	bl	80089b4 <_printf_common>
 8008bf0:	3001      	adds	r0, #1
 8008bf2:	d14c      	bne.n	8008c8e <_printf_i+0x1fe>
 8008bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf8:	b004      	add	sp, #16
 8008bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bfe:	4835      	ldr	r0, [pc, #212]	; (8008cd4 <_printf_i+0x244>)
 8008c00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008c04:	6829      	ldr	r1, [r5, #0]
 8008c06:	6823      	ldr	r3, [r4, #0]
 8008c08:	f851 6b04 	ldr.w	r6, [r1], #4
 8008c0c:	6029      	str	r1, [r5, #0]
 8008c0e:	061d      	lsls	r5, r3, #24
 8008c10:	d514      	bpl.n	8008c3c <_printf_i+0x1ac>
 8008c12:	07df      	lsls	r7, r3, #31
 8008c14:	bf44      	itt	mi
 8008c16:	f043 0320 	orrmi.w	r3, r3, #32
 8008c1a:	6023      	strmi	r3, [r4, #0]
 8008c1c:	b91e      	cbnz	r6, 8008c26 <_printf_i+0x196>
 8008c1e:	6823      	ldr	r3, [r4, #0]
 8008c20:	f023 0320 	bic.w	r3, r3, #32
 8008c24:	6023      	str	r3, [r4, #0]
 8008c26:	2310      	movs	r3, #16
 8008c28:	e7b0      	b.n	8008b8c <_printf_i+0xfc>
 8008c2a:	6823      	ldr	r3, [r4, #0]
 8008c2c:	f043 0320 	orr.w	r3, r3, #32
 8008c30:	6023      	str	r3, [r4, #0]
 8008c32:	2378      	movs	r3, #120	; 0x78
 8008c34:	4828      	ldr	r0, [pc, #160]	; (8008cd8 <_printf_i+0x248>)
 8008c36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c3a:	e7e3      	b.n	8008c04 <_printf_i+0x174>
 8008c3c:	0659      	lsls	r1, r3, #25
 8008c3e:	bf48      	it	mi
 8008c40:	b2b6      	uxthmi	r6, r6
 8008c42:	e7e6      	b.n	8008c12 <_printf_i+0x182>
 8008c44:	4615      	mov	r5, r2
 8008c46:	e7bb      	b.n	8008bc0 <_printf_i+0x130>
 8008c48:	682b      	ldr	r3, [r5, #0]
 8008c4a:	6826      	ldr	r6, [r4, #0]
 8008c4c:	6961      	ldr	r1, [r4, #20]
 8008c4e:	1d18      	adds	r0, r3, #4
 8008c50:	6028      	str	r0, [r5, #0]
 8008c52:	0635      	lsls	r5, r6, #24
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	d501      	bpl.n	8008c5c <_printf_i+0x1cc>
 8008c58:	6019      	str	r1, [r3, #0]
 8008c5a:	e002      	b.n	8008c62 <_printf_i+0x1d2>
 8008c5c:	0670      	lsls	r0, r6, #25
 8008c5e:	d5fb      	bpl.n	8008c58 <_printf_i+0x1c8>
 8008c60:	8019      	strh	r1, [r3, #0]
 8008c62:	2300      	movs	r3, #0
 8008c64:	6123      	str	r3, [r4, #16]
 8008c66:	4615      	mov	r5, r2
 8008c68:	e7ba      	b.n	8008be0 <_printf_i+0x150>
 8008c6a:	682b      	ldr	r3, [r5, #0]
 8008c6c:	1d1a      	adds	r2, r3, #4
 8008c6e:	602a      	str	r2, [r5, #0]
 8008c70:	681d      	ldr	r5, [r3, #0]
 8008c72:	6862      	ldr	r2, [r4, #4]
 8008c74:	2100      	movs	r1, #0
 8008c76:	4628      	mov	r0, r5
 8008c78:	f7f7 faaa 	bl	80001d0 <memchr>
 8008c7c:	b108      	cbz	r0, 8008c82 <_printf_i+0x1f2>
 8008c7e:	1b40      	subs	r0, r0, r5
 8008c80:	6060      	str	r0, [r4, #4]
 8008c82:	6863      	ldr	r3, [r4, #4]
 8008c84:	6123      	str	r3, [r4, #16]
 8008c86:	2300      	movs	r3, #0
 8008c88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c8c:	e7a8      	b.n	8008be0 <_printf_i+0x150>
 8008c8e:	6923      	ldr	r3, [r4, #16]
 8008c90:	462a      	mov	r2, r5
 8008c92:	4649      	mov	r1, r9
 8008c94:	4640      	mov	r0, r8
 8008c96:	47d0      	blx	sl
 8008c98:	3001      	adds	r0, #1
 8008c9a:	d0ab      	beq.n	8008bf4 <_printf_i+0x164>
 8008c9c:	6823      	ldr	r3, [r4, #0]
 8008c9e:	079b      	lsls	r3, r3, #30
 8008ca0:	d413      	bmi.n	8008cca <_printf_i+0x23a>
 8008ca2:	68e0      	ldr	r0, [r4, #12]
 8008ca4:	9b03      	ldr	r3, [sp, #12]
 8008ca6:	4298      	cmp	r0, r3
 8008ca8:	bfb8      	it	lt
 8008caa:	4618      	movlt	r0, r3
 8008cac:	e7a4      	b.n	8008bf8 <_printf_i+0x168>
 8008cae:	2301      	movs	r3, #1
 8008cb0:	4632      	mov	r2, r6
 8008cb2:	4649      	mov	r1, r9
 8008cb4:	4640      	mov	r0, r8
 8008cb6:	47d0      	blx	sl
 8008cb8:	3001      	adds	r0, #1
 8008cba:	d09b      	beq.n	8008bf4 <_printf_i+0x164>
 8008cbc:	3501      	adds	r5, #1
 8008cbe:	68e3      	ldr	r3, [r4, #12]
 8008cc0:	9903      	ldr	r1, [sp, #12]
 8008cc2:	1a5b      	subs	r3, r3, r1
 8008cc4:	42ab      	cmp	r3, r5
 8008cc6:	dcf2      	bgt.n	8008cae <_printf_i+0x21e>
 8008cc8:	e7eb      	b.n	8008ca2 <_printf_i+0x212>
 8008cca:	2500      	movs	r5, #0
 8008ccc:	f104 0619 	add.w	r6, r4, #25
 8008cd0:	e7f5      	b.n	8008cbe <_printf_i+0x22e>
 8008cd2:	bf00      	nop
 8008cd4:	080093f5 	.word	0x080093f5
 8008cd8:	08009406 	.word	0x08009406

08008cdc <_sbrk_r>:
 8008cdc:	b538      	push	{r3, r4, r5, lr}
 8008cde:	4d06      	ldr	r5, [pc, #24]	; (8008cf8 <_sbrk_r+0x1c>)
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	4608      	mov	r0, r1
 8008ce6:	602b      	str	r3, [r5, #0]
 8008ce8:	f7f8 fecc 	bl	8001a84 <_sbrk>
 8008cec:	1c43      	adds	r3, r0, #1
 8008cee:	d102      	bne.n	8008cf6 <_sbrk_r+0x1a>
 8008cf0:	682b      	ldr	r3, [r5, #0]
 8008cf2:	b103      	cbz	r3, 8008cf6 <_sbrk_r+0x1a>
 8008cf4:	6023      	str	r3, [r4, #0]
 8008cf6:	bd38      	pop	{r3, r4, r5, pc}
 8008cf8:	200003a0 	.word	0x200003a0

08008cfc <__sread>:
 8008cfc:	b510      	push	{r4, lr}
 8008cfe:	460c      	mov	r4, r1
 8008d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d04:	f000 fab2 	bl	800926c <_read_r>
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	bfab      	itete	ge
 8008d0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d0e:	89a3      	ldrhlt	r3, [r4, #12]
 8008d10:	181b      	addge	r3, r3, r0
 8008d12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d16:	bfac      	ite	ge
 8008d18:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d1a:	81a3      	strhlt	r3, [r4, #12]
 8008d1c:	bd10      	pop	{r4, pc}

08008d1e <__swrite>:
 8008d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d22:	461f      	mov	r7, r3
 8008d24:	898b      	ldrh	r3, [r1, #12]
 8008d26:	05db      	lsls	r3, r3, #23
 8008d28:	4605      	mov	r5, r0
 8008d2a:	460c      	mov	r4, r1
 8008d2c:	4616      	mov	r6, r2
 8008d2e:	d505      	bpl.n	8008d3c <__swrite+0x1e>
 8008d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d34:	2302      	movs	r3, #2
 8008d36:	2200      	movs	r2, #0
 8008d38:	f000 f9c8 	bl	80090cc <_lseek_r>
 8008d3c:	89a3      	ldrh	r3, [r4, #12]
 8008d3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d46:	81a3      	strh	r3, [r4, #12]
 8008d48:	4632      	mov	r2, r6
 8008d4a:	463b      	mov	r3, r7
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d52:	f000 b869 	b.w	8008e28 <_write_r>

08008d56 <__sseek>:
 8008d56:	b510      	push	{r4, lr}
 8008d58:	460c      	mov	r4, r1
 8008d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d5e:	f000 f9b5 	bl	80090cc <_lseek_r>
 8008d62:	1c43      	adds	r3, r0, #1
 8008d64:	89a3      	ldrh	r3, [r4, #12]
 8008d66:	bf15      	itete	ne
 8008d68:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d72:	81a3      	strheq	r3, [r4, #12]
 8008d74:	bf18      	it	ne
 8008d76:	81a3      	strhne	r3, [r4, #12]
 8008d78:	bd10      	pop	{r4, pc}

08008d7a <__sclose>:
 8008d7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d7e:	f000 b8d3 	b.w	8008f28 <_close_r>
	...

08008d84 <__swbuf_r>:
 8008d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d86:	460e      	mov	r6, r1
 8008d88:	4614      	mov	r4, r2
 8008d8a:	4605      	mov	r5, r0
 8008d8c:	b118      	cbz	r0, 8008d96 <__swbuf_r+0x12>
 8008d8e:	6983      	ldr	r3, [r0, #24]
 8008d90:	b90b      	cbnz	r3, 8008d96 <__swbuf_r+0x12>
 8008d92:	f7ff fb81 	bl	8008498 <__sinit>
 8008d96:	4b21      	ldr	r3, [pc, #132]	; (8008e1c <__swbuf_r+0x98>)
 8008d98:	429c      	cmp	r4, r3
 8008d9a:	d12b      	bne.n	8008df4 <__swbuf_r+0x70>
 8008d9c:	686c      	ldr	r4, [r5, #4]
 8008d9e:	69a3      	ldr	r3, [r4, #24]
 8008da0:	60a3      	str	r3, [r4, #8]
 8008da2:	89a3      	ldrh	r3, [r4, #12]
 8008da4:	071a      	lsls	r2, r3, #28
 8008da6:	d52f      	bpl.n	8008e08 <__swbuf_r+0x84>
 8008da8:	6923      	ldr	r3, [r4, #16]
 8008daa:	b36b      	cbz	r3, 8008e08 <__swbuf_r+0x84>
 8008dac:	6923      	ldr	r3, [r4, #16]
 8008dae:	6820      	ldr	r0, [r4, #0]
 8008db0:	1ac0      	subs	r0, r0, r3
 8008db2:	6963      	ldr	r3, [r4, #20]
 8008db4:	b2f6      	uxtb	r6, r6
 8008db6:	4283      	cmp	r3, r0
 8008db8:	4637      	mov	r7, r6
 8008dba:	dc04      	bgt.n	8008dc6 <__swbuf_r+0x42>
 8008dbc:	4621      	mov	r1, r4
 8008dbe:	4628      	mov	r0, r5
 8008dc0:	f000 f948 	bl	8009054 <_fflush_r>
 8008dc4:	bb30      	cbnz	r0, 8008e14 <__swbuf_r+0x90>
 8008dc6:	68a3      	ldr	r3, [r4, #8]
 8008dc8:	3b01      	subs	r3, #1
 8008dca:	60a3      	str	r3, [r4, #8]
 8008dcc:	6823      	ldr	r3, [r4, #0]
 8008dce:	1c5a      	adds	r2, r3, #1
 8008dd0:	6022      	str	r2, [r4, #0]
 8008dd2:	701e      	strb	r6, [r3, #0]
 8008dd4:	6963      	ldr	r3, [r4, #20]
 8008dd6:	3001      	adds	r0, #1
 8008dd8:	4283      	cmp	r3, r0
 8008dda:	d004      	beq.n	8008de6 <__swbuf_r+0x62>
 8008ddc:	89a3      	ldrh	r3, [r4, #12]
 8008dde:	07db      	lsls	r3, r3, #31
 8008de0:	d506      	bpl.n	8008df0 <__swbuf_r+0x6c>
 8008de2:	2e0a      	cmp	r6, #10
 8008de4:	d104      	bne.n	8008df0 <__swbuf_r+0x6c>
 8008de6:	4621      	mov	r1, r4
 8008de8:	4628      	mov	r0, r5
 8008dea:	f000 f933 	bl	8009054 <_fflush_r>
 8008dee:	b988      	cbnz	r0, 8008e14 <__swbuf_r+0x90>
 8008df0:	4638      	mov	r0, r7
 8008df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008df4:	4b0a      	ldr	r3, [pc, #40]	; (8008e20 <__swbuf_r+0x9c>)
 8008df6:	429c      	cmp	r4, r3
 8008df8:	d101      	bne.n	8008dfe <__swbuf_r+0x7a>
 8008dfa:	68ac      	ldr	r4, [r5, #8]
 8008dfc:	e7cf      	b.n	8008d9e <__swbuf_r+0x1a>
 8008dfe:	4b09      	ldr	r3, [pc, #36]	; (8008e24 <__swbuf_r+0xa0>)
 8008e00:	429c      	cmp	r4, r3
 8008e02:	bf08      	it	eq
 8008e04:	68ec      	ldreq	r4, [r5, #12]
 8008e06:	e7ca      	b.n	8008d9e <__swbuf_r+0x1a>
 8008e08:	4621      	mov	r1, r4
 8008e0a:	4628      	mov	r0, r5
 8008e0c:	f000 f81e 	bl	8008e4c <__swsetup_r>
 8008e10:	2800      	cmp	r0, #0
 8008e12:	d0cb      	beq.n	8008dac <__swbuf_r+0x28>
 8008e14:	f04f 37ff 	mov.w	r7, #4294967295
 8008e18:	e7ea      	b.n	8008df0 <__swbuf_r+0x6c>
 8008e1a:	bf00      	nop
 8008e1c:	080093a4 	.word	0x080093a4
 8008e20:	080093c4 	.word	0x080093c4
 8008e24:	08009384 	.word	0x08009384

08008e28 <_write_r>:
 8008e28:	b538      	push	{r3, r4, r5, lr}
 8008e2a:	4d07      	ldr	r5, [pc, #28]	; (8008e48 <_write_r+0x20>)
 8008e2c:	4604      	mov	r4, r0
 8008e2e:	4608      	mov	r0, r1
 8008e30:	4611      	mov	r1, r2
 8008e32:	2200      	movs	r2, #0
 8008e34:	602a      	str	r2, [r5, #0]
 8008e36:	461a      	mov	r2, r3
 8008e38:	f7f8 fdd3 	bl	80019e2 <_write>
 8008e3c:	1c43      	adds	r3, r0, #1
 8008e3e:	d102      	bne.n	8008e46 <_write_r+0x1e>
 8008e40:	682b      	ldr	r3, [r5, #0]
 8008e42:	b103      	cbz	r3, 8008e46 <_write_r+0x1e>
 8008e44:	6023      	str	r3, [r4, #0]
 8008e46:	bd38      	pop	{r3, r4, r5, pc}
 8008e48:	200003a0 	.word	0x200003a0

08008e4c <__swsetup_r>:
 8008e4c:	4b32      	ldr	r3, [pc, #200]	; (8008f18 <__swsetup_r+0xcc>)
 8008e4e:	b570      	push	{r4, r5, r6, lr}
 8008e50:	681d      	ldr	r5, [r3, #0]
 8008e52:	4606      	mov	r6, r0
 8008e54:	460c      	mov	r4, r1
 8008e56:	b125      	cbz	r5, 8008e62 <__swsetup_r+0x16>
 8008e58:	69ab      	ldr	r3, [r5, #24]
 8008e5a:	b913      	cbnz	r3, 8008e62 <__swsetup_r+0x16>
 8008e5c:	4628      	mov	r0, r5
 8008e5e:	f7ff fb1b 	bl	8008498 <__sinit>
 8008e62:	4b2e      	ldr	r3, [pc, #184]	; (8008f1c <__swsetup_r+0xd0>)
 8008e64:	429c      	cmp	r4, r3
 8008e66:	d10f      	bne.n	8008e88 <__swsetup_r+0x3c>
 8008e68:	686c      	ldr	r4, [r5, #4]
 8008e6a:	89a3      	ldrh	r3, [r4, #12]
 8008e6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e70:	0719      	lsls	r1, r3, #28
 8008e72:	d42c      	bmi.n	8008ece <__swsetup_r+0x82>
 8008e74:	06dd      	lsls	r5, r3, #27
 8008e76:	d411      	bmi.n	8008e9c <__swsetup_r+0x50>
 8008e78:	2309      	movs	r3, #9
 8008e7a:	6033      	str	r3, [r6, #0]
 8008e7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e80:	81a3      	strh	r3, [r4, #12]
 8008e82:	f04f 30ff 	mov.w	r0, #4294967295
 8008e86:	e03e      	b.n	8008f06 <__swsetup_r+0xba>
 8008e88:	4b25      	ldr	r3, [pc, #148]	; (8008f20 <__swsetup_r+0xd4>)
 8008e8a:	429c      	cmp	r4, r3
 8008e8c:	d101      	bne.n	8008e92 <__swsetup_r+0x46>
 8008e8e:	68ac      	ldr	r4, [r5, #8]
 8008e90:	e7eb      	b.n	8008e6a <__swsetup_r+0x1e>
 8008e92:	4b24      	ldr	r3, [pc, #144]	; (8008f24 <__swsetup_r+0xd8>)
 8008e94:	429c      	cmp	r4, r3
 8008e96:	bf08      	it	eq
 8008e98:	68ec      	ldreq	r4, [r5, #12]
 8008e9a:	e7e6      	b.n	8008e6a <__swsetup_r+0x1e>
 8008e9c:	0758      	lsls	r0, r3, #29
 8008e9e:	d512      	bpl.n	8008ec6 <__swsetup_r+0x7a>
 8008ea0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ea2:	b141      	cbz	r1, 8008eb6 <__swsetup_r+0x6a>
 8008ea4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ea8:	4299      	cmp	r1, r3
 8008eaa:	d002      	beq.n	8008eb2 <__swsetup_r+0x66>
 8008eac:	4630      	mov	r0, r6
 8008eae:	f000 f991 	bl	80091d4 <_free_r>
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	6363      	str	r3, [r4, #52]	; 0x34
 8008eb6:	89a3      	ldrh	r3, [r4, #12]
 8008eb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ebc:	81a3      	strh	r3, [r4, #12]
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	6063      	str	r3, [r4, #4]
 8008ec2:	6923      	ldr	r3, [r4, #16]
 8008ec4:	6023      	str	r3, [r4, #0]
 8008ec6:	89a3      	ldrh	r3, [r4, #12]
 8008ec8:	f043 0308 	orr.w	r3, r3, #8
 8008ecc:	81a3      	strh	r3, [r4, #12]
 8008ece:	6923      	ldr	r3, [r4, #16]
 8008ed0:	b94b      	cbnz	r3, 8008ee6 <__swsetup_r+0x9a>
 8008ed2:	89a3      	ldrh	r3, [r4, #12]
 8008ed4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008edc:	d003      	beq.n	8008ee6 <__swsetup_r+0x9a>
 8008ede:	4621      	mov	r1, r4
 8008ee0:	4630      	mov	r0, r6
 8008ee2:	f000 f92b 	bl	800913c <__smakebuf_r>
 8008ee6:	89a0      	ldrh	r0, [r4, #12]
 8008ee8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008eec:	f010 0301 	ands.w	r3, r0, #1
 8008ef0:	d00a      	beq.n	8008f08 <__swsetup_r+0xbc>
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	60a3      	str	r3, [r4, #8]
 8008ef6:	6963      	ldr	r3, [r4, #20]
 8008ef8:	425b      	negs	r3, r3
 8008efa:	61a3      	str	r3, [r4, #24]
 8008efc:	6923      	ldr	r3, [r4, #16]
 8008efe:	b943      	cbnz	r3, 8008f12 <__swsetup_r+0xc6>
 8008f00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f04:	d1ba      	bne.n	8008e7c <__swsetup_r+0x30>
 8008f06:	bd70      	pop	{r4, r5, r6, pc}
 8008f08:	0781      	lsls	r1, r0, #30
 8008f0a:	bf58      	it	pl
 8008f0c:	6963      	ldrpl	r3, [r4, #20]
 8008f0e:	60a3      	str	r3, [r4, #8]
 8008f10:	e7f4      	b.n	8008efc <__swsetup_r+0xb0>
 8008f12:	2000      	movs	r0, #0
 8008f14:	e7f7      	b.n	8008f06 <__swsetup_r+0xba>
 8008f16:	bf00      	nop
 8008f18:	2000000c 	.word	0x2000000c
 8008f1c:	080093a4 	.word	0x080093a4
 8008f20:	080093c4 	.word	0x080093c4
 8008f24:	08009384 	.word	0x08009384

08008f28 <_close_r>:
 8008f28:	b538      	push	{r3, r4, r5, lr}
 8008f2a:	4d06      	ldr	r5, [pc, #24]	; (8008f44 <_close_r+0x1c>)
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	4604      	mov	r4, r0
 8008f30:	4608      	mov	r0, r1
 8008f32:	602b      	str	r3, [r5, #0]
 8008f34:	f7f8 fd71 	bl	8001a1a <_close>
 8008f38:	1c43      	adds	r3, r0, #1
 8008f3a:	d102      	bne.n	8008f42 <_close_r+0x1a>
 8008f3c:	682b      	ldr	r3, [r5, #0]
 8008f3e:	b103      	cbz	r3, 8008f42 <_close_r+0x1a>
 8008f40:	6023      	str	r3, [r4, #0]
 8008f42:	bd38      	pop	{r3, r4, r5, pc}
 8008f44:	200003a0 	.word	0x200003a0

08008f48 <__sflush_r>:
 8008f48:	898a      	ldrh	r2, [r1, #12]
 8008f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f4e:	4605      	mov	r5, r0
 8008f50:	0710      	lsls	r0, r2, #28
 8008f52:	460c      	mov	r4, r1
 8008f54:	d458      	bmi.n	8009008 <__sflush_r+0xc0>
 8008f56:	684b      	ldr	r3, [r1, #4]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	dc05      	bgt.n	8008f68 <__sflush_r+0x20>
 8008f5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	dc02      	bgt.n	8008f68 <__sflush_r+0x20>
 8008f62:	2000      	movs	r0, #0
 8008f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f6a:	2e00      	cmp	r6, #0
 8008f6c:	d0f9      	beq.n	8008f62 <__sflush_r+0x1a>
 8008f6e:	2300      	movs	r3, #0
 8008f70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f74:	682f      	ldr	r7, [r5, #0]
 8008f76:	602b      	str	r3, [r5, #0]
 8008f78:	d032      	beq.n	8008fe0 <__sflush_r+0x98>
 8008f7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f7c:	89a3      	ldrh	r3, [r4, #12]
 8008f7e:	075a      	lsls	r2, r3, #29
 8008f80:	d505      	bpl.n	8008f8e <__sflush_r+0x46>
 8008f82:	6863      	ldr	r3, [r4, #4]
 8008f84:	1ac0      	subs	r0, r0, r3
 8008f86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f88:	b10b      	cbz	r3, 8008f8e <__sflush_r+0x46>
 8008f8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f8c:	1ac0      	subs	r0, r0, r3
 8008f8e:	2300      	movs	r3, #0
 8008f90:	4602      	mov	r2, r0
 8008f92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f94:	6a21      	ldr	r1, [r4, #32]
 8008f96:	4628      	mov	r0, r5
 8008f98:	47b0      	blx	r6
 8008f9a:	1c43      	adds	r3, r0, #1
 8008f9c:	89a3      	ldrh	r3, [r4, #12]
 8008f9e:	d106      	bne.n	8008fae <__sflush_r+0x66>
 8008fa0:	6829      	ldr	r1, [r5, #0]
 8008fa2:	291d      	cmp	r1, #29
 8008fa4:	d82c      	bhi.n	8009000 <__sflush_r+0xb8>
 8008fa6:	4a2a      	ldr	r2, [pc, #168]	; (8009050 <__sflush_r+0x108>)
 8008fa8:	40ca      	lsrs	r2, r1
 8008faa:	07d6      	lsls	r6, r2, #31
 8008fac:	d528      	bpl.n	8009000 <__sflush_r+0xb8>
 8008fae:	2200      	movs	r2, #0
 8008fb0:	6062      	str	r2, [r4, #4]
 8008fb2:	04d9      	lsls	r1, r3, #19
 8008fb4:	6922      	ldr	r2, [r4, #16]
 8008fb6:	6022      	str	r2, [r4, #0]
 8008fb8:	d504      	bpl.n	8008fc4 <__sflush_r+0x7c>
 8008fba:	1c42      	adds	r2, r0, #1
 8008fbc:	d101      	bne.n	8008fc2 <__sflush_r+0x7a>
 8008fbe:	682b      	ldr	r3, [r5, #0]
 8008fc0:	b903      	cbnz	r3, 8008fc4 <__sflush_r+0x7c>
 8008fc2:	6560      	str	r0, [r4, #84]	; 0x54
 8008fc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fc6:	602f      	str	r7, [r5, #0]
 8008fc8:	2900      	cmp	r1, #0
 8008fca:	d0ca      	beq.n	8008f62 <__sflush_r+0x1a>
 8008fcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fd0:	4299      	cmp	r1, r3
 8008fd2:	d002      	beq.n	8008fda <__sflush_r+0x92>
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	f000 f8fd 	bl	80091d4 <_free_r>
 8008fda:	2000      	movs	r0, #0
 8008fdc:	6360      	str	r0, [r4, #52]	; 0x34
 8008fde:	e7c1      	b.n	8008f64 <__sflush_r+0x1c>
 8008fe0:	6a21      	ldr	r1, [r4, #32]
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	4628      	mov	r0, r5
 8008fe6:	47b0      	blx	r6
 8008fe8:	1c41      	adds	r1, r0, #1
 8008fea:	d1c7      	bne.n	8008f7c <__sflush_r+0x34>
 8008fec:	682b      	ldr	r3, [r5, #0]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d0c4      	beq.n	8008f7c <__sflush_r+0x34>
 8008ff2:	2b1d      	cmp	r3, #29
 8008ff4:	d001      	beq.n	8008ffa <__sflush_r+0xb2>
 8008ff6:	2b16      	cmp	r3, #22
 8008ff8:	d101      	bne.n	8008ffe <__sflush_r+0xb6>
 8008ffa:	602f      	str	r7, [r5, #0]
 8008ffc:	e7b1      	b.n	8008f62 <__sflush_r+0x1a>
 8008ffe:	89a3      	ldrh	r3, [r4, #12]
 8009000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009004:	81a3      	strh	r3, [r4, #12]
 8009006:	e7ad      	b.n	8008f64 <__sflush_r+0x1c>
 8009008:	690f      	ldr	r7, [r1, #16]
 800900a:	2f00      	cmp	r7, #0
 800900c:	d0a9      	beq.n	8008f62 <__sflush_r+0x1a>
 800900e:	0793      	lsls	r3, r2, #30
 8009010:	680e      	ldr	r6, [r1, #0]
 8009012:	bf08      	it	eq
 8009014:	694b      	ldreq	r3, [r1, #20]
 8009016:	600f      	str	r7, [r1, #0]
 8009018:	bf18      	it	ne
 800901a:	2300      	movne	r3, #0
 800901c:	eba6 0807 	sub.w	r8, r6, r7
 8009020:	608b      	str	r3, [r1, #8]
 8009022:	f1b8 0f00 	cmp.w	r8, #0
 8009026:	dd9c      	ble.n	8008f62 <__sflush_r+0x1a>
 8009028:	6a21      	ldr	r1, [r4, #32]
 800902a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800902c:	4643      	mov	r3, r8
 800902e:	463a      	mov	r2, r7
 8009030:	4628      	mov	r0, r5
 8009032:	47b0      	blx	r6
 8009034:	2800      	cmp	r0, #0
 8009036:	dc06      	bgt.n	8009046 <__sflush_r+0xfe>
 8009038:	89a3      	ldrh	r3, [r4, #12]
 800903a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800903e:	81a3      	strh	r3, [r4, #12]
 8009040:	f04f 30ff 	mov.w	r0, #4294967295
 8009044:	e78e      	b.n	8008f64 <__sflush_r+0x1c>
 8009046:	4407      	add	r7, r0
 8009048:	eba8 0800 	sub.w	r8, r8, r0
 800904c:	e7e9      	b.n	8009022 <__sflush_r+0xda>
 800904e:	bf00      	nop
 8009050:	20400001 	.word	0x20400001

08009054 <_fflush_r>:
 8009054:	b538      	push	{r3, r4, r5, lr}
 8009056:	690b      	ldr	r3, [r1, #16]
 8009058:	4605      	mov	r5, r0
 800905a:	460c      	mov	r4, r1
 800905c:	b913      	cbnz	r3, 8009064 <_fflush_r+0x10>
 800905e:	2500      	movs	r5, #0
 8009060:	4628      	mov	r0, r5
 8009062:	bd38      	pop	{r3, r4, r5, pc}
 8009064:	b118      	cbz	r0, 800906e <_fflush_r+0x1a>
 8009066:	6983      	ldr	r3, [r0, #24]
 8009068:	b90b      	cbnz	r3, 800906e <_fflush_r+0x1a>
 800906a:	f7ff fa15 	bl	8008498 <__sinit>
 800906e:	4b14      	ldr	r3, [pc, #80]	; (80090c0 <_fflush_r+0x6c>)
 8009070:	429c      	cmp	r4, r3
 8009072:	d11b      	bne.n	80090ac <_fflush_r+0x58>
 8009074:	686c      	ldr	r4, [r5, #4]
 8009076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d0ef      	beq.n	800905e <_fflush_r+0xa>
 800907e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009080:	07d0      	lsls	r0, r2, #31
 8009082:	d404      	bmi.n	800908e <_fflush_r+0x3a>
 8009084:	0599      	lsls	r1, r3, #22
 8009086:	d402      	bmi.n	800908e <_fflush_r+0x3a>
 8009088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800908a:	f7ff faa3 	bl	80085d4 <__retarget_lock_acquire_recursive>
 800908e:	4628      	mov	r0, r5
 8009090:	4621      	mov	r1, r4
 8009092:	f7ff ff59 	bl	8008f48 <__sflush_r>
 8009096:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009098:	07da      	lsls	r2, r3, #31
 800909a:	4605      	mov	r5, r0
 800909c:	d4e0      	bmi.n	8009060 <_fflush_r+0xc>
 800909e:	89a3      	ldrh	r3, [r4, #12]
 80090a0:	059b      	lsls	r3, r3, #22
 80090a2:	d4dd      	bmi.n	8009060 <_fflush_r+0xc>
 80090a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090a6:	f7ff fa96 	bl	80085d6 <__retarget_lock_release_recursive>
 80090aa:	e7d9      	b.n	8009060 <_fflush_r+0xc>
 80090ac:	4b05      	ldr	r3, [pc, #20]	; (80090c4 <_fflush_r+0x70>)
 80090ae:	429c      	cmp	r4, r3
 80090b0:	d101      	bne.n	80090b6 <_fflush_r+0x62>
 80090b2:	68ac      	ldr	r4, [r5, #8]
 80090b4:	e7df      	b.n	8009076 <_fflush_r+0x22>
 80090b6:	4b04      	ldr	r3, [pc, #16]	; (80090c8 <_fflush_r+0x74>)
 80090b8:	429c      	cmp	r4, r3
 80090ba:	bf08      	it	eq
 80090bc:	68ec      	ldreq	r4, [r5, #12]
 80090be:	e7da      	b.n	8009076 <_fflush_r+0x22>
 80090c0:	080093a4 	.word	0x080093a4
 80090c4:	080093c4 	.word	0x080093c4
 80090c8:	08009384 	.word	0x08009384

080090cc <_lseek_r>:
 80090cc:	b538      	push	{r3, r4, r5, lr}
 80090ce:	4d07      	ldr	r5, [pc, #28]	; (80090ec <_lseek_r+0x20>)
 80090d0:	4604      	mov	r4, r0
 80090d2:	4608      	mov	r0, r1
 80090d4:	4611      	mov	r1, r2
 80090d6:	2200      	movs	r2, #0
 80090d8:	602a      	str	r2, [r5, #0]
 80090da:	461a      	mov	r2, r3
 80090dc:	f7f8 fcc4 	bl	8001a68 <_lseek>
 80090e0:	1c43      	adds	r3, r0, #1
 80090e2:	d102      	bne.n	80090ea <_lseek_r+0x1e>
 80090e4:	682b      	ldr	r3, [r5, #0]
 80090e6:	b103      	cbz	r3, 80090ea <_lseek_r+0x1e>
 80090e8:	6023      	str	r3, [r4, #0]
 80090ea:	bd38      	pop	{r3, r4, r5, pc}
 80090ec:	200003a0 	.word	0x200003a0

080090f0 <__swhatbuf_r>:
 80090f0:	b570      	push	{r4, r5, r6, lr}
 80090f2:	460e      	mov	r6, r1
 80090f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090f8:	2900      	cmp	r1, #0
 80090fa:	b096      	sub	sp, #88	; 0x58
 80090fc:	4614      	mov	r4, r2
 80090fe:	461d      	mov	r5, r3
 8009100:	da08      	bge.n	8009114 <__swhatbuf_r+0x24>
 8009102:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009106:	2200      	movs	r2, #0
 8009108:	602a      	str	r2, [r5, #0]
 800910a:	061a      	lsls	r2, r3, #24
 800910c:	d410      	bmi.n	8009130 <__swhatbuf_r+0x40>
 800910e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009112:	e00e      	b.n	8009132 <__swhatbuf_r+0x42>
 8009114:	466a      	mov	r2, sp
 8009116:	f000 f8bb 	bl	8009290 <_fstat_r>
 800911a:	2800      	cmp	r0, #0
 800911c:	dbf1      	blt.n	8009102 <__swhatbuf_r+0x12>
 800911e:	9a01      	ldr	r2, [sp, #4]
 8009120:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009124:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009128:	425a      	negs	r2, r3
 800912a:	415a      	adcs	r2, r3
 800912c:	602a      	str	r2, [r5, #0]
 800912e:	e7ee      	b.n	800910e <__swhatbuf_r+0x1e>
 8009130:	2340      	movs	r3, #64	; 0x40
 8009132:	2000      	movs	r0, #0
 8009134:	6023      	str	r3, [r4, #0]
 8009136:	b016      	add	sp, #88	; 0x58
 8009138:	bd70      	pop	{r4, r5, r6, pc}
	...

0800913c <__smakebuf_r>:
 800913c:	898b      	ldrh	r3, [r1, #12]
 800913e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009140:	079d      	lsls	r5, r3, #30
 8009142:	4606      	mov	r6, r0
 8009144:	460c      	mov	r4, r1
 8009146:	d507      	bpl.n	8009158 <__smakebuf_r+0x1c>
 8009148:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800914c:	6023      	str	r3, [r4, #0]
 800914e:	6123      	str	r3, [r4, #16]
 8009150:	2301      	movs	r3, #1
 8009152:	6163      	str	r3, [r4, #20]
 8009154:	b002      	add	sp, #8
 8009156:	bd70      	pop	{r4, r5, r6, pc}
 8009158:	ab01      	add	r3, sp, #4
 800915a:	466a      	mov	r2, sp
 800915c:	f7ff ffc8 	bl	80090f0 <__swhatbuf_r>
 8009160:	9900      	ldr	r1, [sp, #0]
 8009162:	4605      	mov	r5, r0
 8009164:	4630      	mov	r0, r6
 8009166:	f7ff fa57 	bl	8008618 <_malloc_r>
 800916a:	b948      	cbnz	r0, 8009180 <__smakebuf_r+0x44>
 800916c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009170:	059a      	lsls	r2, r3, #22
 8009172:	d4ef      	bmi.n	8009154 <__smakebuf_r+0x18>
 8009174:	f023 0303 	bic.w	r3, r3, #3
 8009178:	f043 0302 	orr.w	r3, r3, #2
 800917c:	81a3      	strh	r3, [r4, #12]
 800917e:	e7e3      	b.n	8009148 <__smakebuf_r+0xc>
 8009180:	4b0d      	ldr	r3, [pc, #52]	; (80091b8 <__smakebuf_r+0x7c>)
 8009182:	62b3      	str	r3, [r6, #40]	; 0x28
 8009184:	89a3      	ldrh	r3, [r4, #12]
 8009186:	6020      	str	r0, [r4, #0]
 8009188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800918c:	81a3      	strh	r3, [r4, #12]
 800918e:	9b00      	ldr	r3, [sp, #0]
 8009190:	6163      	str	r3, [r4, #20]
 8009192:	9b01      	ldr	r3, [sp, #4]
 8009194:	6120      	str	r0, [r4, #16]
 8009196:	b15b      	cbz	r3, 80091b0 <__smakebuf_r+0x74>
 8009198:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800919c:	4630      	mov	r0, r6
 800919e:	f000 f889 	bl	80092b4 <_isatty_r>
 80091a2:	b128      	cbz	r0, 80091b0 <__smakebuf_r+0x74>
 80091a4:	89a3      	ldrh	r3, [r4, #12]
 80091a6:	f023 0303 	bic.w	r3, r3, #3
 80091aa:	f043 0301 	orr.w	r3, r3, #1
 80091ae:	81a3      	strh	r3, [r4, #12]
 80091b0:	89a0      	ldrh	r0, [r4, #12]
 80091b2:	4305      	orrs	r5, r0
 80091b4:	81a5      	strh	r5, [r4, #12]
 80091b6:	e7cd      	b.n	8009154 <__smakebuf_r+0x18>
 80091b8:	08008431 	.word	0x08008431

080091bc <__malloc_lock>:
 80091bc:	4801      	ldr	r0, [pc, #4]	; (80091c4 <__malloc_lock+0x8>)
 80091be:	f7ff ba09 	b.w	80085d4 <__retarget_lock_acquire_recursive>
 80091c2:	bf00      	nop
 80091c4:	20000394 	.word	0x20000394

080091c8 <__malloc_unlock>:
 80091c8:	4801      	ldr	r0, [pc, #4]	; (80091d0 <__malloc_unlock+0x8>)
 80091ca:	f7ff ba04 	b.w	80085d6 <__retarget_lock_release_recursive>
 80091ce:	bf00      	nop
 80091d0:	20000394 	.word	0x20000394

080091d4 <_free_r>:
 80091d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091d6:	2900      	cmp	r1, #0
 80091d8:	d044      	beq.n	8009264 <_free_r+0x90>
 80091da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091de:	9001      	str	r0, [sp, #4]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	f1a1 0404 	sub.w	r4, r1, #4
 80091e6:	bfb8      	it	lt
 80091e8:	18e4      	addlt	r4, r4, r3
 80091ea:	f7ff ffe7 	bl	80091bc <__malloc_lock>
 80091ee:	4a1e      	ldr	r2, [pc, #120]	; (8009268 <_free_r+0x94>)
 80091f0:	9801      	ldr	r0, [sp, #4]
 80091f2:	6813      	ldr	r3, [r2, #0]
 80091f4:	b933      	cbnz	r3, 8009204 <_free_r+0x30>
 80091f6:	6063      	str	r3, [r4, #4]
 80091f8:	6014      	str	r4, [r2, #0]
 80091fa:	b003      	add	sp, #12
 80091fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009200:	f7ff bfe2 	b.w	80091c8 <__malloc_unlock>
 8009204:	42a3      	cmp	r3, r4
 8009206:	d908      	bls.n	800921a <_free_r+0x46>
 8009208:	6825      	ldr	r5, [r4, #0]
 800920a:	1961      	adds	r1, r4, r5
 800920c:	428b      	cmp	r3, r1
 800920e:	bf01      	itttt	eq
 8009210:	6819      	ldreq	r1, [r3, #0]
 8009212:	685b      	ldreq	r3, [r3, #4]
 8009214:	1949      	addeq	r1, r1, r5
 8009216:	6021      	streq	r1, [r4, #0]
 8009218:	e7ed      	b.n	80091f6 <_free_r+0x22>
 800921a:	461a      	mov	r2, r3
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	b10b      	cbz	r3, 8009224 <_free_r+0x50>
 8009220:	42a3      	cmp	r3, r4
 8009222:	d9fa      	bls.n	800921a <_free_r+0x46>
 8009224:	6811      	ldr	r1, [r2, #0]
 8009226:	1855      	adds	r5, r2, r1
 8009228:	42a5      	cmp	r5, r4
 800922a:	d10b      	bne.n	8009244 <_free_r+0x70>
 800922c:	6824      	ldr	r4, [r4, #0]
 800922e:	4421      	add	r1, r4
 8009230:	1854      	adds	r4, r2, r1
 8009232:	42a3      	cmp	r3, r4
 8009234:	6011      	str	r1, [r2, #0]
 8009236:	d1e0      	bne.n	80091fa <_free_r+0x26>
 8009238:	681c      	ldr	r4, [r3, #0]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	6053      	str	r3, [r2, #4]
 800923e:	4421      	add	r1, r4
 8009240:	6011      	str	r1, [r2, #0]
 8009242:	e7da      	b.n	80091fa <_free_r+0x26>
 8009244:	d902      	bls.n	800924c <_free_r+0x78>
 8009246:	230c      	movs	r3, #12
 8009248:	6003      	str	r3, [r0, #0]
 800924a:	e7d6      	b.n	80091fa <_free_r+0x26>
 800924c:	6825      	ldr	r5, [r4, #0]
 800924e:	1961      	adds	r1, r4, r5
 8009250:	428b      	cmp	r3, r1
 8009252:	bf04      	itt	eq
 8009254:	6819      	ldreq	r1, [r3, #0]
 8009256:	685b      	ldreq	r3, [r3, #4]
 8009258:	6063      	str	r3, [r4, #4]
 800925a:	bf04      	itt	eq
 800925c:	1949      	addeq	r1, r1, r5
 800925e:	6021      	streq	r1, [r4, #0]
 8009260:	6054      	str	r4, [r2, #4]
 8009262:	e7ca      	b.n	80091fa <_free_r+0x26>
 8009264:	b003      	add	sp, #12
 8009266:	bd30      	pop	{r4, r5, pc}
 8009268:	20000398 	.word	0x20000398

0800926c <_read_r>:
 800926c:	b538      	push	{r3, r4, r5, lr}
 800926e:	4d07      	ldr	r5, [pc, #28]	; (800928c <_read_r+0x20>)
 8009270:	4604      	mov	r4, r0
 8009272:	4608      	mov	r0, r1
 8009274:	4611      	mov	r1, r2
 8009276:	2200      	movs	r2, #0
 8009278:	602a      	str	r2, [r5, #0]
 800927a:	461a      	mov	r2, r3
 800927c:	f7f8 fb94 	bl	80019a8 <_read>
 8009280:	1c43      	adds	r3, r0, #1
 8009282:	d102      	bne.n	800928a <_read_r+0x1e>
 8009284:	682b      	ldr	r3, [r5, #0]
 8009286:	b103      	cbz	r3, 800928a <_read_r+0x1e>
 8009288:	6023      	str	r3, [r4, #0]
 800928a:	bd38      	pop	{r3, r4, r5, pc}
 800928c:	200003a0 	.word	0x200003a0

08009290 <_fstat_r>:
 8009290:	b538      	push	{r3, r4, r5, lr}
 8009292:	4d07      	ldr	r5, [pc, #28]	; (80092b0 <_fstat_r+0x20>)
 8009294:	2300      	movs	r3, #0
 8009296:	4604      	mov	r4, r0
 8009298:	4608      	mov	r0, r1
 800929a:	4611      	mov	r1, r2
 800929c:	602b      	str	r3, [r5, #0]
 800929e:	f7f8 fbc8 	bl	8001a32 <_fstat>
 80092a2:	1c43      	adds	r3, r0, #1
 80092a4:	d102      	bne.n	80092ac <_fstat_r+0x1c>
 80092a6:	682b      	ldr	r3, [r5, #0]
 80092a8:	b103      	cbz	r3, 80092ac <_fstat_r+0x1c>
 80092aa:	6023      	str	r3, [r4, #0]
 80092ac:	bd38      	pop	{r3, r4, r5, pc}
 80092ae:	bf00      	nop
 80092b0:	200003a0 	.word	0x200003a0

080092b4 <_isatty_r>:
 80092b4:	b538      	push	{r3, r4, r5, lr}
 80092b6:	4d06      	ldr	r5, [pc, #24]	; (80092d0 <_isatty_r+0x1c>)
 80092b8:	2300      	movs	r3, #0
 80092ba:	4604      	mov	r4, r0
 80092bc:	4608      	mov	r0, r1
 80092be:	602b      	str	r3, [r5, #0]
 80092c0:	f7f8 fbc7 	bl	8001a52 <_isatty>
 80092c4:	1c43      	adds	r3, r0, #1
 80092c6:	d102      	bne.n	80092ce <_isatty_r+0x1a>
 80092c8:	682b      	ldr	r3, [r5, #0]
 80092ca:	b103      	cbz	r3, 80092ce <_isatty_r+0x1a>
 80092cc:	6023      	str	r3, [r4, #0]
 80092ce:	bd38      	pop	{r3, r4, r5, pc}
 80092d0:	200003a0 	.word	0x200003a0

080092d4 <_init>:
 80092d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092d6:	bf00      	nop
 80092d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092da:	bc08      	pop	{r3}
 80092dc:	469e      	mov	lr, r3
 80092de:	4770      	bx	lr

080092e0 <_fini>:
 80092e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092e2:	bf00      	nop
 80092e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092e6:	bc08      	pop	{r3}
 80092e8:	469e      	mov	lr, r3
 80092ea:	4770      	bx	lr
